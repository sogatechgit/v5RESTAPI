--------------------------------------------------------
--  DDL for Function SP_CELL_VALUE
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE FUNCTION "IMSA"."SP_CELL_VALUE" 
(
  P_TABLE IN VARCHAR2 DEFAULT NULL 
, P_COL IN VARCHAR2 DEFAULT NULL 
, P_WHERE IN VARCHAR2 DEFAULT NULL 

) 
  RETURN VARCHAR2 AS 
  V_RES VARCHAR2(1000):='';
  V_RC SYS_REFCURSOR;
BEGIN
  OPEN V_RC FOR 'SELECT ' || P_COL || '  FROM ' || P_TABLE || ' WHERE ' || P_WHERE;
  FETCH V_RC INTO V_RES;
  CLOSE V_RC;
  DBMS_OUTPUT.PUT_LINE('SELECT ' || P_COL || '  FROM ' || P_TABLE || ' WHERE ' || P_WHERE);
  RETURN V_RES;
EXCEPTION
  WHEN NO_DATA_FOUND THEN 
    RETURN '';
  WHEN OTHERS THEN 
    RETURN '';
END SP_CELL_VALUE;

/
--------------------------------------------------------
--  DDL for Function SP_CELL_VALUE_INT
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE FUNCTION "IMSA"."SP_CELL_VALUE_INT" 
(
  P_TABLE IN VARCHAR2 DEFAULT NULL 
, P_COL IN VARCHAR2 DEFAULT NULL 
, P_WHERE IN VARCHAR2 DEFAULT NULL 
) 
  RETURN VARCHAR2 AS 
  V_RES INTEGER:=-1;
  V_RC SYS_REFCURSOR;
  V_WHERE VARCHAR2(1000):='';
BEGIN
  IF (P_WHERE IS NOT NULL) THEN
    V_WHERE:=(' WHERE ' || P_WHERE);
  END IF;

  OPEN V_RC FOR 'SELECT ' || P_COL || '  FROM ' || P_TABLE || V_WHERE;
  FETCH V_RC INTO V_RES;
  CLOSE V_RC;

  RETURN V_RES;
EXCEPTION
  WHEN OTHERS THEN 
    RETURN -1;
END SP_CELL_VALUE_INT;

/
--------------------------------------------------------
--  DDL for Function SP_CH_CHD_HDR_TYPE_NO
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE FUNCTION "IMSA"."SP_CH_CHD_HDR_TYPE_NO" 
(
  P_MODULE IN VARCHAR2 DEFAULT 'fs' 
) 
  RETURN NUMBER AS 
  V_MOD_NO NUMBER;
BEGIN

  IF (P_MODULE = 'cd') THEN 
    V_MOD_NO := '18';
  END IF;


EXCEPTION
  WHEN OTHERS THEN 
    RETURN -1;
END SP_CH_CHD_HDR_TYPE_NO;

/
--------------------------------------------------------
--  DDL for Function SP_CH_SUB_MOD_NO
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE FUNCTION "IMSA"."SP_CH_SUB_MOD_NO" 
(
  P_MODULE IN VARCHAR2 DEFAULT 'fs' 
) 
  RETURN NUMBER AS 
  V_MOD_NO NUMBER;
BEGIN

  IF (P_MODULE = 'FS') THEN 
   RETURN  18;
  END IF;


  IF (P_MODULE = 'CD') THEN 
   RETURN  17;
  END IF;

  IF (P_MODULE = 'CTR') THEN 
   RETURN  16;
  END IF;


  IF (P_MODULE = 'CR') THEN 
    RETURN  20;
  END IF;


  IF (P_MODULE = 'DC') THEN 
   RETURN  1;
  END IF;


  IF (P_MODULE = 'OA') THEN 
    V_MOD_NO := 2;
  END IF;


  IF (P_MODULE = 'PWA') THEN 
    V_MOD_NO := 4;
  END IF;


  IF (P_MODULE = 'SA') THEN 
    V_MOD_NO := 5;
  END IF;

  IF (P_MODULE = 'FA') THEN 
   RETURN  6;
  END IF;

  IF (P_MODULE = 'BAB') THEN 
    RETURN  3;
  END IF;

  IF (P_MODULE = 'BABT') THEN 
    RETURN  7;
  END IF;

  IF (P_MODULE = 'CC') THEN 
   RETURN  8;
  END IF;

  IF (P_MODULE = 'SC') THEN 
    RETURN  9;
  END IF;

  IF (P_MODULE = 'BSW') THEN 
    RETURN  10;
  END IF;

  IF (P_MODULE = 'WQA') THEN 
    RETURN  11;
  END IF;

  IF (P_MODULE = 'GA') THEN 
    RETURN  12;
  END IF;

  IF (P_MODULE = 'WHRU') THEN 
    RETURN  13;
  END IF;

  IF (P_MODULE = 'WHRUJ') THEN 
    RETURN  14;
  END IF;

  IF (P_MODULE = 'WHRUWA') THEN 
    RETURN  15;
  END IF;

  IF (P_MODULE = 'HFA') THEN 
   RETURN  19;
  END IF;

  RETURN V_MOD_NO;


EXCEPTION
  WHEN OTHERS THEN 
    RETURN -1;
END SP_CH_SUB_MOD_NO;

/
--------------------------------------------------------
--  DDL for Function SP_DELETE_LNK_CHEM_PFD_REF
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE FUNCTION "IMSA"."SP_DELETE_LNK_CHEM_PFD_REF" 
(
  P_TAG_A IN NUMBER DEFAULT NULL 
, P_TAG_B IN NUMBER DEFAULT NULL 
, P_USER IN VARCHAR2 DEFAULT 'IMSA ADMIN'
) 
  RETURN NUMBER AS 
  V_EVT_LOG NUMBER;
BEGIN
  DELETE FROM LNK_CHEM_PFD_REF WHERE LNK_TAG_A=P_TAG_A AND LNK_TAG_B=P_TAG_B;

  COMMIT;
  V_EVT_LOG:=SP_INSERT_TBL_EVENT_LOG(P_USER,'LNK_CHEM_PFD_REF','DELETE SUCCESS: #' || P_TAG_A || ' #' || P_TAG_B);
  RETURN P_TAG_A;
EXCEPTION
 WHEN OTHERS THEN
    ROLLBACK;
    V_EVT_LOG:=SP_INSERT_TBL_EVENT_LOG(P_USER,'LNK_CHEM_PFD_REF','DELETE FAIL: #' || P_TAG_A || ' #' || P_TAG_B || '; ERR: ' || SQLCODE || '-' || SQLERRM);
    RETURN -1;
END SP_DELETE_LNK_CHEM_PFD_REF;

/
--------------------------------------------------------
--  DDL for Function SP_DELETE_LNK_CHEM_REF
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE FUNCTION "IMSA"."SP_DELETE_LNK_CHEM_REF" 
(
  P_TAG_A IN NUMBER DEFAULT NULL 
, P_TAG_B IN NUMBER DEFAULT NULL 
, P_USER IN VARCHAR2 DEFAULT 'IMSA ADMIN') 
  RETURN NUMBER AS 
  V_EVT_LOG NUMBER;
BEGIN
    DELETE FROM LNK_CHEM_REF WHERE LNK_TAG_A=P_TAG_A AND LNK_TAG_B=P_TAG_B;

  COMMIT;
  V_EVT_LOG:=SP_INSERT_TBL_EVENT_LOG(P_USER,'LNK_CHEM_REF','DELETE SUCCESS: #' || P_TAG_A || ' #' || P_TAG_B);
  RETURN P_TAG_A;
EXCEPTION
 WHEN OTHERS THEN
    ROLLBACK;
    V_EVT_LOG:=SP_INSERT_TBL_EVENT_LOG(P_USER,'LNK_CHEM_REF','DELETE FAIL: #' || P_TAG_A || ' #' || P_TAG_B || '; ERR: ' || SQLCODE || '-' || SQLERRM);
    RETURN -1;
END SP_DELETE_LNK_CHEM_REF;

/
--------------------------------------------------------
--  DDL for Function SP_DELETE_LNK_CHEM_SR_REF
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE FUNCTION "IMSA"."SP_DELETE_LNK_CHEM_SR_REF" 
(
  P_TAG_A IN NUMBER DEFAULT NULL 
, P_TAG_B IN NUMBER DEFAULT NULL 
, P_USER IN VARCHAR2 DEFAULT 'IMSA ADMIN') 
  RETURN NUMBER AS 
  V_EVT_LOG NUMBER;
BEGIN
    DELETE FROM LNK_CHEM_SR_REF WHERE LNK_TAG_A=P_TAG_A AND LNK_TAG_B=P_TAG_B;

  COMMIT;
  V_EVT_LOG:=SP_INSERT_TBL_EVENT_LOG(P_USER,'LNK_CHEM_SR_REF','DELETE SUCCESS: #' || P_TAG_A || ' #' || P_TAG_B);
  RETURN P_TAG_A;
EXCEPTION
 WHEN OTHERS THEN
    ROLLBACK;
    V_EVT_LOG:=SP_INSERT_TBL_EVENT_LOG(P_USER,'LNK_CHEM_SR_REF','DELETE FAIL: #' || P_TAG_A || ' #' || P_TAG_B || '; ERR: ' || SQLCODE || '-' || SQLERRM);
    RETURN -1;
END SP_DELETE_LNK_CHEM_SR_REF;

/
--------------------------------------------------------
--  DDL for Function SP_DELETE_LNK_CHEM_T_REF
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE FUNCTION "IMSA"."SP_DELETE_LNK_CHEM_T_REF" 
(
  P_TAG_A IN NUMBER DEFAULT NULL 
, P_TAG_B IN NUMBER DEFAULT NULL 
, P_USER IN VARCHAR2 DEFAULT 'IMSA ADMIN') 
  RETURN NUMBER AS 
  V_EVT_LOG NUMBER;
BEGIN
    DELETE FROM LNK_CHEM_TREATINGMANUAL_REF WHERE LNK_TAG_A=P_TAG_A AND LNK_TAG_B=P_TAG_B;

  COMMIT;
  V_EVT_LOG:=SP_INSERT_TBL_EVENT_LOG(P_USER,'LNK_CHEM_TREATINGMANUAL_REF','DELETE SUCCESS: #' || P_TAG_A || ' #' || P_TAG_B);
  RETURN P_TAG_A;
EXCEPTION
 WHEN OTHERS THEN
    ROLLBACK;
    V_EVT_LOG:=SP_INSERT_TBL_EVENT_LOG(P_USER,'LNK_CHEM_TREATINGMANUAL_REF','DELETE FAIL: #' || P_TAG_A || ' #' || P_TAG_B || '; ERR: ' || SQLCODE || '-' || SQLERRM);
    RETURN -1;
END SP_DELETE_LNK_CHEM_T_REF;

/
--------------------------------------------------------
--  DDL for Function SP_DELETE_LNK_REF_ANOMMAIN
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE FUNCTION "IMSA"."SP_DELETE_LNK_REF_ANOMMAIN" 
(
  P_TAG_A IN NUMBER DEFAULT NULL 
, P_TAG_B IN NUMBER DEFAULT NULL 
, P_USER IN VARCHAR2 DEFAULT 'IMSA ADMIN') 
  RETURN NUMBER AS 
  V_EVT_LOG NUMBER;
BEGIN
    DELETE FROM LNK_REF_ANOMMAIN WHERE LNK_TAG_A=P_TAG_A AND LNK_TAG_B=P_TAG_B;

    UPDATE TBL_ANOM_MAIN SET AN_ATTACHMENTS=(AN_ATTACHMENTS-1) WHERE AN_ID=P_TAG_B;    

  COMMIT;
  V_EVT_LOG:=SP_INSERT_TBL_EVENT_LOG(P_USER,'LNK_REF_ANOMMAIN','DELETE SUCCESS: #' || P_TAG_A || ' #' || P_TAG_B);
  RETURN P_TAG_A;
EXCEPTION
 WHEN OTHERS THEN
    ROLLBACK;
    V_EVT_LOG:=SP_INSERT_TBL_EVENT_LOG(P_USER,'LNK_REF_ANOMMAIN','DELETE FAIL: #' || P_TAG_A || ' #' || P_TAG_B || '; ERR: ' || SQLCODE || '-' || SQLERRM);
    RETURN -1;
END SP_DELETE_LNK_REF_ANOMMAIN;

/
--------------------------------------------------------
--  DDL for Function SP_DELETE_LNK_REF_CA
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE FUNCTION "IMSA"."SP_DELETE_LNK_REF_CA" 
(
  P_TAG_A IN NUMBER DEFAULT NULL 
, P_TAG_B IN NUMBER DEFAULT NULL 
, P_USER IN VARCHAR2 DEFAULT 'IMSA ADMIN') 
  RETURN NUMBER AS 
  V_EVT_LOG NUMBER;
BEGIN
    DELETE FROM LNK_REF_CA WHERE LNK_TAG_A=P_TAG_A AND LNK_TAG_B=P_TAG_B;

  COMMIT;
  V_EVT_LOG:=SP_INSERT_TBL_EVENT_LOG(P_USER,'LNK_REF_CA','DELETE SUCCESS: #' || P_TAG_A || ' #' || P_TAG_B);
  RETURN P_TAG_A;
EXCEPTION
 WHEN OTHERS THEN
    ROLLBACK;
    V_EVT_LOG:=SP_INSERT_TBL_EVENT_LOG(P_USER,'LNK_REF_CA','DELETE FAIL: #' || P_TAG_A || ' #' || P_TAG_B || '; ERR: ' || SQLCODE || '-' || SQLERRM);
    RETURN -1;
END SP_DELETE_LNK_REF_CA;

/
--------------------------------------------------------
--  DDL for Function SP_DELETE_LNK_REF_DESIGNMAIN
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE FUNCTION "IMSA"."SP_DELETE_LNK_REF_DESIGNMAIN" 
(
  P_TAG_A IN NUMBER DEFAULT NULL 
, P_TAG_B IN NUMBER DEFAULT NULL 
, P_USER IN VARCHAR2 DEFAULT 'IMSA ADMIN') 
  RETURN NUMBER AS 
  V_EVT_LOG NUMBER;
BEGIN
    DELETE FROM LNK_REF_DESIGNMAIN WHERE LNK_TAG_A=P_TAG_A AND LNK_TAG_B=P_TAG_B;

  COMMIT;

  V_EVT_LOG:=SP_INSERT_TBL_EVENT_LOG(P_USER,'LNK_REF_DESIGNMAIN','DELETE SUCCESS: #' || P_TAG_A || ' #' || P_TAG_B);
  RETURN P_TAG_A;
EXCEPTION
 WHEN OTHERS THEN
    ROLLBACK;
    V_EVT_LOG:=SP_INSERT_TBL_EVENT_LOG(P_USER,'LNK_REF_DESIGNMAIN','DELETE FAIL: #' || P_TAG_A || ' #' || P_TAG_B || '; ERR: ' || SQLCODE || '-' || SQLERRM);
    RETURN -1;
END SP_DELETE_LNK_REF_DESIGNMAIN;

/
--------------------------------------------------------
--  DDL for Function SP_DELETE_LNK_REF_SVY
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE FUNCTION "IMSA"."SP_DELETE_LNK_REF_SVY" 
(
  P_TAG_A IN NUMBER DEFAULT NULL 
, P_TAG_B IN NUMBER DEFAULT NULL 
, P_USER IN VARCHAR2 DEFAULT 'IMSA ADMIN') 
  RETURN NUMBER AS 
  V_EVT_LOG NUMBER;
BEGIN
    DELETE FROM LNK_REF_SVY WHERE LNK_TAG_A=P_TAG_A AND LNK_TAG_B=P_TAG_B;

  COMMIT;

  V_EVT_LOG:=SP_INSERT_TBL_EVENT_LOG(P_USER,'LNK_REF_SVY','DELETE SUCCESS: #' || P_TAG_A || ' #' || P_TAG_B);
  RETURN P_TAG_A;
EXCEPTION
 WHEN OTHERS THEN
    ROLLBACK;
    V_EVT_LOG:=SP_INSERT_TBL_EVENT_LOG(P_USER,'LNK_REF_SVY','DELETE FAIL: #' || P_TAG_A || ' #' || P_TAG_B || '; ERR: ' || SQLCODE || '-' || SQLERRM);
    RETURN -1;
END SP_DELETE_LNK_REF_SVY;

/
--------------------------------------------------------
--  DDL for Function SP_DELETE_REC
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE FUNCTION "IMSA"."SP_DELETE_REC" 
(
  P_TBL_NAME IN VARCHAR2 
, P_WHERE IN VARCHAR2 
) RETURN NUMBER AS 
  
BEGIN 
  dbms_output.put_line('DELETE FROM ' || P_TBL_NAME || ' WHERE ' || P_WHERE);
  EXECUTE IMMEDIATE 'DELETE FROM ' || P_TBL_NAME || ' WHERE ' || P_WHERE;
  RETURN 1;
EXCEPTION
  WHEN OTHERS THEN
    RETURN -1;
END SP_DELETE_REC;

/
--------------------------------------------------------
--  DDL for Function SP_DELETE_TBL_ANOM_ACT_ITEMS
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE FUNCTION "IMSA"."SP_DELETE_TBL_ANOM_ACT_ITEMS" 
(
  P_AI_ID IN NUMBER DEFAULT NULL
  , P_USER IN VARCHAR2 DEFAULT 'IMSA ADMIN'
) RETURN NUMBER AS 
  V_EVT_LOG NUMBER;

BEGIN
  DELETE FROM TBL_ANOM_ACT_ITEMS WHERE AI_ID=P_AI_ID;
  COMMIT;

  --Record event log.
  V_EVT_LOG:=SP_INSERT_TBL_EVENT_LOG(P_USER,'TBL_ANOM_ACT_ITEMS','DELETE SUCCESS: #' || P_AI_ID);

  RETURN P_AI_ID;
EXCEPTION
 WHEN OTHERS THEN
    ROLLBACK;
  --Record event log.
    V_EVT_LOG:=SP_INSERT_TBL_EVENT_LOG(P_USER,'TBL_ANOM_ACT_ITEMS','DELETE FAIL: #' || P_AI_ID || '; ERR: ' || SQLCODE || '-' || SQLERRM);
    RETURN -1;
END SP_DELETE_TBL_ANOM_ACT_ITEMS;

/
--------------------------------------------------------
--  DDL for Function SP_DELETE_TBL_ANOM_FT
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE FUNCTION "IMSA"."SP_DELETE_TBL_ANOM_FT" 
(
  P_FT_ID IN NUMBER DEFAULT NULL 
  , P_USER IN VARCHAR2 DEFAULT 'IMSA ADMIN'
) RETURN NUMBER AS 
  V_EVT_LOG NUMBER;
BEGIN
  DELETE FROM TBL_ANOM_FT WHERE FT_ID=P_FT_ID;
  COMMIT;

  --Record event log.
  V_EVT_LOG:=SP_INSERT_TBL_EVENT_LOG(P_USER,'TBL_ANOM_FT','DELETE SUCCESS: #' || P_FT_ID);
  RETURN P_FT_ID;
EXCEPTION
 WHEN OTHERS THEN
    ROLLBACK;
  V_EVT_LOG:=SP_INSERT_TBL_EVENT_LOG(P_USER,'TBL_ANOM_FT','DELETE FAIL: #' || P_FT_ID || '; ERR: ' || SQLCODE || '-' || SQLERRM);
    RETURN -1;
END SP_DELETE_TBL_ANOM_FT;

/
--------------------------------------------------------
--  DDL for Function SP_DELETE_TBL_ANOM_MAIN
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE FUNCTION "IMSA"."SP_DELETE_TBL_ANOM_MAIN" 
(
  P_AN_ID IN NUMBER DEFAULT NULL
  , P_DAT_TYPE IN NUMBER DEFAULT 1
  , P_AN_ASSET_ID IN NUMBER DEFAULT NULL
  , P_COLOR_MODE IN VARCHAR2 DEFAULT 'ACTION_COLOR'
  , P_USER IN VARCHAR2 DEFAULT 'IMSA ADMIN'
)
  RETURN NUMBER AS 
  V_EVT_LOG NUMBER;
BEGIN

  --DELETE FROM TBL_ANOM_MAIN WHERE AN_ID=P_AN_ID;
  --DELETE FROM LNK_AN_NODES WHERE LNK_TAG_A=P_AN_ID;
  --DELETE FROM LNK_REF_ANOMMAIN WHERE LNK_TAG_B=P_AN_ID;
  --DELETE FROM LNK_AN_FT WHERE LNK_TAG_A=P_AN_ID;
  --DELETE FROM LNK_RELAN_AN WHERE LNK_TAG_A=P_AN_ID;
  --DELETE FROM TBL_ANOM_ACT_ITEMS WHERE AI_AN_ID=P_AN_ID;
  UPDATE TBL_ANOM_MAIN SET AN_DELETED = 1 WHERE AN_ID=P_AN_ID;

  COMMIT;

  --Record event log.
  V_EVT_LOG:=SP_INSERT_TBL_EVENT_LOG(P_USER,'TBL_ANOM_MAIN','DELETE SUCCESS: #' || P_AN_ID);

  RETURN P_AN_ID;
EXCEPTION
 WHEN OTHERS THEN
    ROLLBACK;
    --Record event log.
    V_EVT_LOG:=SP_INSERT_TBL_EVENT_LOG(P_USER,'TBL_ANOM_MAIN','DELETE SUCCESS: #' || P_AN_ID);
    RETURN -1;
END SP_DELETE_TBL_ANOM_MAIN;

/
--------------------------------------------------------
--  DDL for Function SP_DELETE_TBL_CA
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE FUNCTION "IMSA"."SP_DELETE_TBL_CA" 
(
  P_CA_ID IN NUMBER DEFAULT NULL
  , P_DAT_TYPE IN NUMBER DEFAULT 1
  , P_CA_REC_TAG IN NUMBER DEFAULT NULL
  , P_COLOR_MODE IN VARCHAR2 DEFAULT 'ACTION_COLOR'
  , P_USER IN VARCHAR2 DEFAULT 'IMSA ADMIN'
)
  RETURN NUMBER AS 
  V_EVT_LOG NUMBER;
BEGIN

  --DELETE FROM TBL_CA WHERE CA_ID=P_CA_ID;
  UPDATE TBL_CA SET CA_DELETED= 1 WHERE CA_ID=P_CA_ID;
  DELETE FROM LNK_REF_CA WHERE LNK_TAG_B=P_CA_ID;
  DELETE FROM LNK_AN_CA WHERE LNK_TAG_B=P_CA_ID;

  COMMIT;

  --Record event log.
  V_EVT_LOG:=SP_INSERT_TBL_EVENT_LOG(P_USER,'TBL_CA','DELETE SUCCESS: #' || P_CA_ID);

  RETURN P_CA_ID;
EXCEPTION
 WHEN OTHERS THEN
    ROLLBACK;
    --Record event log.
    V_EVT_LOG:=SP_INSERT_TBL_EVENT_LOG(P_USER,'TBL_CA','DELETE SUCCESS: #' || P_CA_ID);
    RETURN -1;
END SP_DELETE_TBL_CA;

/
--------------------------------------------------------
--  DDL for Function SP_DELETE_TBL_CHD_HEADER
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE FUNCTION "IMSA"."SP_DELETE_TBL_CHD_HEADER" 
(
  P_CHD_HDR_ID IN NUMBER DEFAULT NULL
  , P_DAT_TYPE IN NUMBER DEFAULT 1
  , P_CHD_HDR_ASSET_ID IN NUMBER DEFAULT NULL
  , P_USER IN VARCHAR2 DEFAULT 'IMSA ADMIN'
)
  
  RETURN NUMBER AS 
  V_EVT_LOG NUMBER;

BEGIN
    DELETE FROM TBL_CHD_HEADER
    WHERE CHD_HDR_ID = P_CHD_HDR_ID;    

    DELETE FROM TBL_CHD_BAC_BAC
    WHERE CHD_BAC_BAC_ID = P_CHD_HDR_ID;

    DELETE FROM TBL_CHD_CHEM_QUAL
    WHERE CHD_CHEM_QUAL_ID = P_CHD_HDR_ID;    

    DELETE FROM TBL_CHD_CHEM_RSD
    WHERE CHD_CHEM_RSD_ID = P_CHD_HDR_ID;    

    DELETE FROM TBL_CHD_CHEM_TREAT
    WHERE CHD_CHEM_TREAT_ID = P_CHD_HDR_ID;    

    DELETE FROM TBL_CHD_COUP_CORR
    WHERE CHD_COUP_CORR_ID = P_CHD_HDR_ID;

    DELETE FROM TBL_CHD_COUP_SCALE
    WHERE CHD_COUP_SC_ID = P_CHD_HDR_ID;    

    DELETE FROM TBL_CHD_GAP
    WHERE CHD_GAP_ID = P_CHD_HDR_ID;

    DELETE FROM TBL_CHD_GLY
    WHERE CHD_GLY_ID = P_CHD_HDR_ID;

    DELETE FROM TBL_CHD_HFA
    WHERE CHD_HFA_ID = P_CHD_HDR_ID;

    DELETE FROM TBL_CHD_OWA
    WHERE CHD_OWA_ID = P_CHD_HDR_ID;

    DELETE FROM TBL_CHD_PWA
    WHERE CHD_PWA_ID = P_CHD_HDR_ID;

    DELETE FROM TBL_CHD_WHRU_JACKET
    WHERE CHD_WHRU_JACKET_ID = P_CHD_HDR_ID;

    DELETE FROM TBL_CHD_WHRU_WATER
    WHERE CHD_WHRU_WATER_ID = P_CHD_HDR_ID;

    DELETE FROM TBL_CHD_WHRU_WHRU
    WHERE CHD_WHRU_WHRU_ID = P_CHD_HDR_ID;

    DELETE FROM TBL_CHD_WQA
    WHERE CHD_WQA_ID = P_CHD_HDR_ID;     

  COMMIT;

  V_EVT_LOG:=SP_INSERT_TBL_EVENT_LOG(P_USER,'TBL_CHD_HEADER','DELETE SUCCESS: #' || P_CHD_HDR_ID);  
  RETURN P_CHD_HDR_ID;
EXCEPTION
 WHEN OTHERS THEN
    ROLLBACK;
    V_EVT_LOG:=SP_INSERT_TBL_EVENT_LOG(P_USER,'TBL_CHD_HEADER','DELETE FAIL: #' || P_CHD_HDR_ID || '; ERR: ' || SQLCODE || '-' || SQLERRM);
    RETURN -1;
END SP_DELETE_TBL_CHD_HEADER;

/
--------------------------------------------------------
--  DDL for Function SP_DELETE_TBL_DESIGN_DATA_KP
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE FUNCTION "IMSA"."SP_DELETE_TBL_DESIGN_DATA_KP" 
(
  P_DD_KP_PARAM_ID IN NUMBER DEFAULT NULL
  , P_USER IN VARCHAR2 DEFAULT 'IMSA ADMIN'
)
  RETURN NUMBER AS 
  V_EVT_LOG NUMBER;
BEGIN

  DELETE FROM TBL_DESIGN_DATA_KP WHERE DD_KP_PARAM_ID=P_DD_KP_PARAM_ID;

  COMMIT;

  --Record event log.
  V_EVT_LOG:=SP_INSERT_TBL_EVENT_LOG(P_USER,'TBL_DESIGN_DATA_KP','DELETE SUCCESS: #' || P_DD_KP_PARAM_ID);
  RETURN P_DD_KP_PARAM_ID;
EXCEPTION
 WHEN OTHERS THEN
    ROLLBACK;
  --Record event log.
  V_EVT_LOG:=SP_INSERT_TBL_EVENT_LOG(P_USER,'TBL_DESIGN_DATA_KP','DELETE FAIL: #' || P_DD_KP_PARAM_ID || '; ERR: ' || SQLCODE || '-' || SQLERRM);
    RETURN -1;
END SP_DELETE_TBL_DESIGN_DATA_KP;

/
--------------------------------------------------------
--  DDL for Function SP_DELETE_TBL_DESIGN_DATA_MAIN
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE FUNCTION "IMSA"."SP_DELETE_TBL_DESIGN_DATA_MAIN" 
(
  P_DD_ID IN NUMBER DEFAULT NULL
 , P_DAT_TYPE IN NUMBER DEFAULT 1  
  , P_DD_ASSET IN NUMBER DEFAULT NULL
  , P_COLOR_MODE IN VARCHAR2 DEFAULT 'ACTION_COLOR'
  , P_USER IN VARCHAR2 DEFAULT 'IMSA ADMIN'
 
)
   RETURN NUMBER AS 
  V_EVT_LOG NUMBER;
BEGIN

  DELETE FROM TBL_DESIGN_DATA_MAIN WHERE DD_ID=P_DD_ID;
  DELETE FROM LNK_REF_DESIGNMAIN WHERE LNK_TAG_B=P_DD_ID;
  DELETE FROM TBL_DESIGN_DATA_KP WHERE DD_PARAM_ID=P_DD_ID;

  COMMIT;

  --Record event log.
  V_EVT_LOG:=SP_INSERT_TBL_EVENT_LOG(P_USER,'TBL_DESIGN_DATA_MAIN','DELETE SUCCESS: #' || P_DD_ID);

  RETURN P_DD_ID;
EXCEPTION
  WHEN OTHERS THEN
  V_EVT_LOG:=SP_INSERT_TBL_EVENT_LOG(P_USER,'TBL_DESIGN_DATA_MAIN','DELETE FAIL: #' || P_DD_ID || '; ERR: ' || SQLCODE || '-' || SQLERRM);
    ROLLBACK;
    RETURN -1;
END SP_DELETE_TBL_DESIGN_DATA_MAIN;

/
--------------------------------------------------------
--  DDL for Function SP_DELETE_TBL_RBI_CB
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE FUNCTION "IMSA"."SP_DELETE_TBL_RBI_CB" 
(
  P_RBI_CB_ID IN NUMBER DEFAULT NULL
, P_USER IN VARCHAR2 DEFAULT 'IMSA ADMIN'
) RETURN NUMBER AS 
  V_EVT_LOG NUMBER;
BEGIN
  DELETE FROM TBL_RBI_CB WHERE RBI_CB_ID=P_RBI_CB_ID;
  COMMIT;

  --Record event log.
  V_EVT_LOG:=SP_INSERT_TBL_EVENT_LOG(P_USER,'TBL_RBI_CB','DELETE SUCCESS: #' || P_RBI_CB_ID);
  RETURN P_RBI_CB_ID;
EXCEPTION
 WHEN OTHERS THEN
    ROLLBACK;
  V_EVT_LOG:=SP_INSERT_TBL_EVENT_LOG(P_USER,'TBL_RBI_CB','DELETE FAIL: #' || P_RBI_CB_ID || '; ERR: ' || SQLCODE || '-' || SQLERRM);
    RETURN -1;
END SP_DELETE_TBL_RBI_CB;

/
--------------------------------------------------------
--  DDL for Function SP_DELETE_TBL_RBI_MIT
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE FUNCTION "IMSA"."SP_DELETE_TBL_RBI_MIT" 
(
  P_RBI_MIT_ID IN NUMBER DEFAULT NULL
, P_USER IN VARCHAR2 DEFAULT 'IMSA ADMIN'
) RETURN NUMBER AS 
  V_EVT_LOG NUMBER;
BEGIN
  DELETE FROM TBL_RBI_MIT WHERE RBI_MIT_ID=P_RBI_MIT_ID;
  COMMIT;
--Record event log.
  V_EVT_LOG:=SP_INSERT_TBL_EVENT_LOG(P_USER,'TBL_RBI_MIT','DELETE SUCCESS: #' || P_RBI_MIT_ID);
  RETURN P_RBI_MIT_ID;
EXCEPTION
 WHEN OTHERS THEN
    ROLLBACK;
  V_EVT_LOG:=SP_INSERT_TBL_EVENT_LOG(P_USER,'TBL_RBI_MIT','DELETE FAIL: #' || P_RBI_MIT_ID || '; ERR: ' || SQLCODE || '-' || SQLERRM);
    RETURN -1;
END SP_DELETE_TBL_RBI_MIT;

/
--------------------------------------------------------
--  DDL for Function SP_DELETE_TBL_REFERENCE_FILES
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE FUNCTION "IMSA"."SP_DELETE_TBL_REFERENCE_FILES" 
(
  P_RF_ID IN NUMBER DEFAULT NULL
  , P_USER IN VARCHAR2 DEFAULT 'IMSA ADMIN'
)
  RETURN NUMBER AS 
  V_EVT_LOG NUMBER;

BEGIN

  DELETE FROM LNK_REF_ANOMMAIN WHERE LNK_TAG_A = P_RF_ID;
  DELETE FROM LNK_REF_DESIGNMAIN WHERE LNK_TAG_A = P_RF_ID;
  DELETE FROM LNK_CHEM_PFD_REF WHERE LNK_TAG_A = P_RF_ID;
  DELETE FROM LNK_CHEM_REF WHERE LNK_TAG_A = P_RF_ID;
  DELETE FROM LNK_CHEM_SR_REF WHERE LNK_TAG_A = P_RF_ID;
  DELETE FROM LNK_CHEM_TREATINGMANUAL_REF WHERE LNK_TAG_A = P_RF_ID;
  DELETE FROM TBL_REFERENCE_FILES WHERE RF_ID=P_RF_ID;

  COMMIT;
  --Record event log.
  V_EVT_LOG:=SP_INSERT_TBL_EVENT_LOG(P_USER,'TBL_REFERENCE_FILES','DELETE SUCCESS: #' || P_RF_ID);

  RETURN P_RF_ID;
EXCEPTION
 WHEN OTHERS THEN
    ROLLBACK;
  --Record event log.
  V_EVT_LOG:=SP_INSERT_TBL_EVENT_LOG(P_USER,'TBL_REFERENCE_FILES','DELETE FAIL: #' || P_RF_ID || '; ERR: ' || SQLCODE || '-' || SQLERRM);
    RETURN -1;
END SP_DELETE_TBL_REFERENCE_FILES;

/
--------------------------------------------------------
--  DDL for Function SP_DELETE_TBL_SVY_HEADER
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE FUNCTION "IMSA"."SP_DELETE_TBL_SVY_HEADER" 
(
  P_SVY_HDR_ID IN NUMBER DEFAULT NULL
  , P_DAT_TYPE IN NUMBER DEFAULT 1
  , P_SVY_HDR_NOD_ID IN NUMBER DEFAULT NULL
  , P_COLOR_MODE IN VARCHAR2 DEFAULT 'ACTION_COLOR'
  , P_USER IN VARCHAR2 DEFAULT 'IMSA ADMIN'
)
  RETURN NUMBER AS 
  V_S_SVY_POS_ID NUMBER;
  V_E_SVY_POS_ID NUMBER;
  V_EVT_LOG NUMBER;
BEGIN
  SELECT SVY_HDR_START_POS_ID INTO V_S_SVY_POS_ID FROM TBL_SVY_HEADER WHERE SVY_HDR_ID=P_SVY_HDR_ID;
  SELECT SVY_HDR_END_POS_ID INTO V_E_SVY_POS_ID FROM TBL_SVY_HEADER WHERE SVY_HDR_ID=P_SVY_HDR_ID;

  DELETE FROM TBL_SVY_POSITION WHERE SVY_POS_ID = V_S_SVY_POS_ID;
  DELETE FROM TBL_SVY_POSITION WHERE SVY_POS_ID = V_E_SVY_POS_ID;
  DELETE FROM LNK_FT_SVY WHERE LNK_TAG_B=P_SVY_HDR_ID;
  DELETE FROM LNK_REF_SVY WHERE LNK_TAG_B=P_SVY_HDR_ID;
  DELETE FROM LNK_REL_SVY WHERE LNK_TAG_A=P_SVY_HDR_ID;
  DELETE FROM LNK_AN_SVY WHERE LNK_TAG_B=P_SVY_HDR_ID;

  DELETE FROM TBL_SVY_HEADER WHERE SVY_HDR_ID=P_SVY_HDR_ID;

  COMMIT;

  --Record event log.
  V_EVT_LOG:=SP_INSERT_TBL_EVENT_LOG(P_USER,'TBL_SVY_HEADER','DELETE SUCCESS: #' || P_SVY_HDR_ID);

  RETURN P_SVY_HDR_ID;
EXCEPTION
 WHEN OTHERS THEN
    ROLLBACK;
  --Record event log.
  V_EVT_LOG:=SP_INSERT_TBL_EVENT_LOG(P_USER,'TBL_SVY_HEADER','DELETE FAIL: #' || P_SVY_HDR_ID || '; ERR: ' || SQLCODE || '-' || SQLERRM);
    RETURN NULL;
END SP_DELETE_TBL_SVY_HEADER;

/
--------------------------------------------------------
--  DDL for Function SP_GET_ISR_ANOM_ACTIVE
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE FUNCTION "IMSA"."SP_GET_ISR_ANOM_ACTIVE" 
(
  P_EQUIP_TYPE IN VARCHAR2 DEFAULT NULL 
, P_START_DATE IN VARCHAR2 DEFAULT NULL 
, P_END_DATE IN VARCHAR2 DEFAULT NULL 
) 
  RETURN SYS_REFCURSOR AS 
  V_RC SYS_REFCURSOR;
  V_EQUIP_TYPE VARCHAR2(1000);
  L_COUNT BINARY_INTEGER;
  L_ARRAY DBMS_UTILITY.lname_array;
  V_SQL VARCHAR2(4000):= '';
BEGIN
  --V_EQUIP_TYPE:=REPLACE(P_EQUIP_TYPE, ',', ''',''');
    V_EQUIP_TYPE:=P_EQUIP_TYPE;

  --Convert string to array.
  DBMS_UTILITY.COMMA_TO_TABLE(list => REGEXP_REPLACE(V_EQUIP_TYPE,'(^|,)','\1x'),tablen => L_COUNT,tab  => L_ARRAY);

  FOR i IN 1 .. L_COUNT LOOP
--    V_SQL:=(V_SQL || 'SELECT * FROM V_TBL_ANOM_MAIN WHERE (('','' || RTRIM(NODE_GROUP) || '','') LIKE ''%,' || SUBSTR(L_ARRAY(i),2) || ',%'' 
--    AND (AN_RAISED_DATE >= TO_DATE(''' || P_START_DATE || ''', ''DD-Mon-YYYY'') AND AN_RAISED_DATE <= TO_DATE(''' || P_END_DATE || ''', ''DD-Mon-YYYY'')) 
--    AND (AN_STATUS <> 8453 AND AN_STATUS <> 8451))'); 
    V_SQL:=(V_SQL || 'SELECT * FROM V_TBL_ANOM_MAIN WHERE (('','' || RTRIM(NODE_GROUP) || '','') LIKE ''%,' || SUBSTR(L_ARRAY(i),2) || ',%'' 
    AND (AN_STATUS <> 8453 AND AN_STATUS <> 8451))'); 



    V_SQL:=(V_SQL || ' UNION ');
  END LOOP;

  V_SQL := SUBSTR(V_SQL, 0, LENGTH(V_SQL) - 6);

  V_SQL := 'SELECT AN_ID,NODE_DESC,AN_REF,AN_TITLE,AN_RAISED_DATE,AN_DATE_IDENT,AN_UPD_DATE,ANTYPE_NAME,AN_REVNO,AN_STATUS_SYS,AN_ATTACHMENTS,NODE_GROUP,
    AN_ACT_BY_DATE,AN_ORIG_CLASS_SYS,AN_CURR_CLASS_SYS,AN_ORIG_AVAIL_CLASS_SYS,AN_CURR_AVAIL_CLASS_SYS FROM (' ||
    V_SQL ||
    ')';

  OPEN V_RC FOR V_SQL;

  RETURN V_RC;
END SP_GET_ISR_ANOM_ACTIVE;

/
--------------------------------------------------------
--  DDL for Function SP_GET_ISR_ANOM_ACTIVITY
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE FUNCTION "IMSA"."SP_GET_ISR_ANOM_ACTIVITY" 
(
  P_EQUIP_TYPE IN VARCHAR2 DEFAULT NULL 
, P_START_DATE IN VARCHAR2 DEFAULT NULL 
, P_END_DATE IN VARCHAR2 DEFAULT NULL 
) 
  RETURN SYS_REFCURSOR AS 
  V_RC SYS_REFCURSOR;
  V_EQUIP_TYPE VARCHAR2(1000);
BEGIN
  V_EQUIP_TYPE:=REPLACE(P_EQUIP_TYPE, ',', ''',''');

OPEN V_RC FOR 'SELECT 
  LKP_ID, 
  LKP_DESC_B AS EQUIPMENT_TYPE, 
  (SELECT COUNT(1) FROM V_TBL_ANOM_MAIN WHERE 
    (NODE_GROUP LIKE (''%'' || LKP_DESC_A || ''%'')) AND 
    (AN_STATUS <> 8453 AND AN_STATUS <> 8451)  
  ) AS ACTIVE_ANOMALIES, 
  (SELECT COUNT(1) FROM V_TBL_ANOM_MAIN WHERE 
    (NODE_GROUP LIKE (''%'' || LKP_DESC_A || ''%'')) AND 
    (AN_RAISED_DATE >= TO_DATE(''' || P_START_DATE || ''', ''DD-Mon-YYYY'') AND AN_RAISED_DATE <= TO_DATE(''' || P_END_DATE || ''', ''DD-Mon-YYYY''))
  ) AS RAISED_ANOMALIES, 
  (SELECT COUNT(1) FROM V_TBL_ANOM_MAIN WHERE 
    (NODE_GROUP LIKE (''%'' || LKP_DESC_A || ''%'')) AND 
    (AN_UPD_DATE >= TO_DATE('''|| P_START_DATE|| ''', ''DD-Mon-YYYY'') AND AN_UPD_DATE <= TO_DATE(''' || P_END_DATE|| ''', ''DD-Mon-YYYY'')) AND 
    (AN_STATUS<>8453)
  ) AS UPDATED_ANOMALIES,
  (SELECT COUNT(1) FROM V_TBL_ANOM_MAIN WHERE 
    (NODE_GROUP LIKE (''%'' || LKP_DESC_A || ''%'')) AND 
    (AN_UPD_DATE >= TO_DATE(''' || P_START_DATE ||''', ''DD-Mon-YYYY'') AND AN_UPD_DATE <= TO_DATE(''' || P_END_DATE|| ''', ''DD-Mon-YYYY'')) AND 
    (AN_STATUS=8453)
  ) AS CLOSED_ANOMALIES  
  FROM SYS_LOOKUPS WHERE LKP_GRP_ID=8006 AND (LKP_DESC_A IN (''' || V_EQUIP_TYPE || '''))';

RETURN V_RC;
END SP_GET_ISR_ANOM_ACTIVITY;

/
--------------------------------------------------------
--  DDL for Function SP_GET_ISR_ANOM_CLOSED
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE FUNCTION "IMSA"."SP_GET_ISR_ANOM_CLOSED" 
(
  P_EQUIP_TYPE IN VARCHAR2 DEFAULT NULL 
, P_START_DATE IN VARCHAR2 DEFAULT NULL 
, P_END_DATE IN VARCHAR2 DEFAULT NULL 
) 
  RETURN SYS_REFCURSOR AS 
  V_RC SYS_REFCURSOR;
  V_EQUIP_TYPE VARCHAR2(1000);
  L_COUNT BINARY_INTEGER;
  L_ARRAY DBMS_UTILITY.lname_array;
  V_SQL VARCHAR2(4000):= '';
BEGIN
  --V_EQUIP_TYPE:=REPLACE(P_EQUIP_TYPE, ',', ''',''');
    V_EQUIP_TYPE:=P_EQUIP_TYPE;

  --Convert string to array.
  DBMS_UTILITY.COMMA_TO_TABLE(list => REGEXP_REPLACE(V_EQUIP_TYPE,'(^|,)','\1x'),tablen => L_COUNT,tab  => L_ARRAY);

  FOR i IN 1 .. L_COUNT LOOP
    V_SQL:=(V_SQL || 'SELECT * FROM V_TBL_ANOM_MAIN WHERE (('','' || RTRIM(NODE_GROUP) || '','') LIKE ''%,' || SUBSTR(L_ARRAY(i),2) || ',%'' 
    AND (AN_UPD_DATE >= TO_DATE(''' || P_START_DATE || ''', ''DD-Mon-YYYY'') AND AN_UPD_DATE <= TO_DATE(''' || P_END_DATE || ''', ''DD-Mon-YYYY'')) 
    AND (AN_STATUS = 8453))'); 

    V_SQL:=(V_SQL || ' UNION ');
  END LOOP;

  V_SQL := SUBSTR(V_SQL, 0, LENGTH(V_SQL) - 6);

  V_SQL := 'SELECT AN_ID,NODE_DESC,AN_REF,AN_TITLE,AN_RAISED_DATE,AN_DATE_IDENT,AN_UPD_DATE,ANTYPE_NAME,AN_REVNO,AN_STATUS_SYS,AN_ATTACHMENTS,NODE_GROUP,
    AN_ACT_BY_DATE,AN_ORIG_CLASS_SYS,AN_CURR_CLASS_SYS,AN_ORIG_AVAIL_CLASS_SYS,AN_CURR_AVAIL_CLASS_SYS FROM (' ||
    V_SQL ||
    ')';

  OPEN V_RC FOR V_SQL;

  RETURN V_RC;
END SP_GET_ISR_ANOM_CLOSED;

/
--------------------------------------------------------
--  DDL for Function SP_GET_ISR_ANOM_RAISED
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE FUNCTION "IMSA"."SP_GET_ISR_ANOM_RAISED" 
(
  P_EQUIP_TYPE IN VARCHAR2 DEFAULT NULL 
, P_START_DATE IN VARCHAR2 DEFAULT NULL 
, P_END_DATE IN VARCHAR2 DEFAULT NULL 
) 
  RETURN SYS_REFCURSOR AS 
  V_RC SYS_REFCURSOR;
  V_EQUIP_TYPE VARCHAR2(1000);
  L_COUNT BINARY_INTEGER;
  L_ARRAY DBMS_UTILITY.lname_array;
  V_SQL VARCHAR2(4000):= '';
BEGIN
  --V_EQUIP_TYPE:=REPLACE(P_EQUIP_TYPE, ',', ''',''');
  V_EQUIP_TYPE:=P_EQUIP_TYPE;

  --Convert string to array.
  DBMS_UTILITY.COMMA_TO_TABLE(list => REGEXP_REPLACE(V_EQUIP_TYPE,'(^|,)','\1x'),tablen => L_COUNT,tab  => L_ARRAY);

  FOR i IN 1 .. L_COUNT LOOP
    V_SQL:=(V_SQL || 'SELECT * FROM V_TBL_ANOM_MAIN WHERE (('','' || RTRIM(NODE_GROUP) || '','') LIKE ''%,' || SUBSTR(L_ARRAY(i),2) || ',%'' 
    AND (AN_RAISED_DATE >= TO_DATE(''' || P_START_DATE || ''', ''DD-Mon-YYYY'') AND AN_RAISED_DATE <= TO_DATE(''' || P_END_DATE || ''', ''DD-Mon-YYYY'')))'); 

    V_SQL:=(V_SQL || ' UNION ');
  END LOOP;

  V_SQL := SUBSTR(V_SQL, 0, LENGTH(V_SQL) - 6);

  V_SQL := 'SELECT AN_ID,NODE_DESC,AN_REF,AN_TITLE,AN_RAISED_DATE,AN_DATE_IDENT,AN_UPD_DATE,ANTYPE_NAME,AN_REVNO,AN_STATUS_SYS,AN_ATTACHMENTS,NODE_GROUP,
    AN_ACT_BY_DATE,AN_ORIG_CLASS_SYS,AN_CURR_CLASS_SYS,AN_ORIG_AVAIL_CLASS_SYS,AN_CURR_AVAIL_CLASS_SYS FROM (' ||
    V_SQL ||
    ')';

  OPEN V_RC FOR V_SQL;

  RETURN V_RC;
END SP_GET_ISR_ANOM_RAISED;

/
--------------------------------------------------------
--  DDL for Function SP_GET_ISR_ANOM_UPDATED
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE FUNCTION "IMSA"."SP_GET_ISR_ANOM_UPDATED" 
(
  P_EQUIP_TYPE IN VARCHAR2 DEFAULT NULL 
, P_START_DATE IN VARCHAR2 DEFAULT NULL 
, P_END_DATE IN VARCHAR2 DEFAULT NULL 
) 
  RETURN SYS_REFCURSOR AS 
  V_RC SYS_REFCURSOR;
  V_EQUIP_TYPE VARCHAR2(1000);
  L_COUNT BINARY_INTEGER;
  L_ARRAY DBMS_UTILITY.lname_array;
  V_SQL VARCHAR2(4000):= '';
BEGIN
  --V_EQUIP_TYPE:=REPLACE(P_EQUIP_TYPE, ',', ''',''');
    V_EQUIP_TYPE:=P_EQUIP_TYPE;

  --Convert string to array.
  DBMS_UTILITY.COMMA_TO_TABLE(list => REGEXP_REPLACE(V_EQUIP_TYPE,'(^|,)','\1x'),tablen => L_COUNT,tab  => L_ARRAY);

  FOR i IN 1 .. L_COUNT LOOP
    V_SQL:=(V_SQL || 'SELECT * FROM V_TBL_ANOM_MAIN WHERE (('','' || RTRIM(NODE_GROUP) || '','') LIKE ''%,' || SUBSTR(L_ARRAY(i),2) || ',%'' 
    AND (AN_UPD_DATE >= TO_DATE(''' || P_START_DATE || ''', ''DD-Mon-YYYY'') AND AN_UPD_DATE <= TO_DATE(''' || P_END_DATE || ''', ''DD-Mon-YYYY'')) 
    AND (AN_STATUS <> 8453))'); 

    V_SQL:=(V_SQL || ' UNION ');
  END LOOP;

  V_SQL := SUBSTR(V_SQL, 0, LENGTH(V_SQL) - 6);

  V_SQL := 'SELECT AN_ID,NODE_DESC,AN_REF,AN_TITLE,AN_RAISED_DATE,AN_DATE_IDENT,AN_UPD_DATE,ANTYPE_NAME,AN_REVNO,AN_STATUS_SYS,AN_ATTACHMENTS,NODE_GROUP,
    AN_ACT_BY_DATE,AN_ORIG_CLASS_SYS,AN_CURR_CLASS_SYS,AN_ORIG_AVAIL_CLASS_SYS,AN_CURR_AVAIL_CLASS_SYS FROM (' ||
    V_SQL ||
    ')';

  OPEN V_RC FOR V_SQL;

  RETURN V_RC;
END SP_GET_ISR_ANOM_UPDATED;

/
--------------------------------------------------------
--  DDL for Function SP_GET_RBI_RSK
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE FUNCTION "IMSA"."SP_GET_RBI_RSK" 
(
  P_DAT_TYPE IN NUMBER DEFAULT 1,  
  P_ASSET_ID IN NUMBER DEFAULT 8956,
  P_RBI_POF_STATUS IN VARCHAR2 DEFAULT 'C',
  P_RBI_COF_STATUS IN NUMBER DEFAULT 1,
  P_RBI_COF_STATUS_CAT IN VARCHAR2 DEFAULT 'ENV',
  P_RBI_FT_TYPE IN VARCHAR2 DEFAULT '8800,8801,8802,8803',
  P_RBI_FT_ID IN NUMBER DEFAULT -1,
  P_RBI_SCE IN NUMBER DEFAULT -1,
  P_RBI_RSK_SOURCE IN VARCHAR2 DEFAULT 'NPOF'
) RETURN SYS_REFCURSOR AS   
  V_RC SYS_REFCURSOR;
  V_WHERE_2 VARCHAR(1000):= '';
  V_SQL VARCHAR2(1000);
BEGIN
  IF (P_RBI_COF_STATUS_CAT = 'OVERALL') THEN
    V_WHERE_2 := V_WHERE_2 || ' AND RBI_COF_OVERALL = ' || P_RBI_COF_STATUS;
  ELSIF (P_RBI_COF_STATUS_CAT = 'HEALTH') THEN
    V_WHERE_2 := V_WHERE_2 || ' AND RBI_COF_HEALTH_SYS = ''' || P_RBI_COF_STATUS || '''';
  ELSIF (P_RBI_COF_STATUS_CAT = 'SAFETY') THEN
    V_WHERE_2 := V_WHERE_2 || ' AND RBI_COF_SAFETY_SYS = ''' || P_RBI_COF_STATUS || '''';
  ELSIF (P_RBI_COF_STATUS_CAT = 'ENV') THEN
    V_WHERE_2 := V_WHERE_2 || ' AND RBI_COF_ENV_SYS = ''' || P_RBI_COF_STATUS || '''';
  ELSIF (P_RBI_COF_STATUS_CAT = 'ASSETS') THEN
    V_WHERE_2 := V_WHERE_2 || ' AND RBI_COF_ASSETS_SYS = ''' || P_RBI_COF_STATUS || '''';
  ELSIF (P_RBI_COF_STATUS_CAT = 'REP') THEN
    V_WHERE_2 := V_WHERE_2 || ' AND RBI_COF_REP_SYS = ''' || P_RBI_COF_STATUS || '''';
  END IF;

  IF (P_RBI_FT_TYPE IS NOT NULL) THEN
    V_WHERE_2 := V_WHERE_2 || ' AND FT_TYPE IN (
      (SELECT REGEXP_SUBSTR(''' || P_RBI_FT_TYPE || ''',''[^,]+{1}'',1,LEVEL) FROM DUAL CONNECT BY LEVEL <= LENGTH(REGEXP_REPLACE(''' || P_RBI_FT_TYPE ||''',''[^,]*'')) + 1))';
  END IF;

  IF (P_RBI_FT_ID != -1) THEN
    V_WHERE_2 := V_WHERE_2 || ' AND RBI_POF_FT_ID = ' || P_RBI_FT_ID;
  END IF;

  IF (P_RBI_SCE != -1) THEN
    V_WHERE_2 := V_WHERE_2 || ' AND SCE = -1';
  END IF;

    V_SQL:=   'SELECT RBI_POF_ID  
    FROM
      (SELECT * 
      FROM V_TBL_RBI_RSK
    INNER JOIN
      (SELECT SYS_TREE_STRUC.TRE_DAT_TAG
      FROM SYS_TREE_STRUC
      INNER JOIN SYS_NODES_ATTRIB
      ON SYS_TREE_STRUC.TRE_DAT_TAG                 = SYS_NODES_ATTRIB.REC_TAG
      WHERE SYS_TREE_STRUC.TRE_DAT_TYPE             = ' || P_DAT_TYPE || '
        START WITH SYS_TREE_STRUC.TRE_DAT_TAG       = ' || P_ASSET_ID || '
        CONNECT BY Prior SYS_TREE_STRUC.TRE_NOD_TAG = SYS_TREE_STRUC.TRE_NOD_TAG_PAR
      ) T1 ON T1.TRE_DAT_TAG                        = V_TBL_RBI_RSK.RBI_POF_NODE_ID
      )
    WHERE RBI_POF_NPOF_SYS_1 = ''' || P_RBI_POF_STATUS || '''' || V_WHERE_2;
DBMS_OUTPUT.PUT_LINE(V_SQL);

  IF (P_RBI_RSK_SOURCE = 'NPOF') THEN
    OPEN V_RC FOR 
    'SELECT RBI_POF_ID  
    FROM
      (SELECT * 
      FROM V_TBL_RBI_RSK
    INNER JOIN
      (SELECT SYS_TREE_STRUC.TRE_DAT_TAG
      FROM SYS_TREE_STRUC
      INNER JOIN SYS_NODES_ATTRIB
      ON SYS_TREE_STRUC.TRE_DAT_TAG                 = SYS_NODES_ATTRIB.REC_TAG
      WHERE SYS_TREE_STRUC.TRE_DAT_TYPE             = ' || P_DAT_TYPE || '
        START WITH SYS_TREE_STRUC.TRE_DAT_TAG       = ' || P_ASSET_ID || '
        CONNECT BY Prior SYS_TREE_STRUC.TRE_NOD_TAG = SYS_TREE_STRUC.TRE_NOD_TAG_PAR
      ) T1 ON T1.TRE_DAT_TAG                        = V_TBL_RBI_RSK.RBI_POF_NODE_ID
      )
    WHERE RBI_POF_NPOF_SYS_1 = ''' || P_RBI_POF_STATUS || '''' || V_WHERE_2;
  ELSE
    OPEN V_RC FOR 
    'SELECT RBI_POF_ID  
    FROM
      (SELECT * 
      FROM V_TBL_RBI_RSK
    INNER JOIN
      (SELECT SYS_TREE_STRUC.TRE_DAT_TAG
      FROM SYS_TREE_STRUC
      INNER JOIN SYS_NODES_ATTRIB
      ON SYS_TREE_STRUC.TRE_DAT_TAG                 = SYS_NODES_ATTRIB.REC_TAG
      WHERE SYS_TREE_STRUC.TRE_DAT_TYPE             = ' || P_DAT_TYPE || '
        START WITH SYS_TREE_STRUC.TRE_DAT_TAG       = ' || P_ASSET_ID || '
        CONNECT BY Prior SYS_TREE_STRUC.TRE_NOD_TAG = SYS_TREE_STRUC.TRE_NOD_TAG_PAR
      ) T1 ON T1.TRE_DAT_TAG                        = V_TBL_RBI_RSK.RBI_POF_NODE_ID
      )
    WHERE RBI_POF_IPOF_SYS_1 = ''' || P_RBI_POF_STATUS || '''' || V_WHERE_2;
  END IF;
  --DBMS_OUTPUT.PUT_LINE(V_SQL);
  RETURN V_RC;
EXCEPTION
  WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('FAILED');
        DBMS_OUTPUT.PUT_LINE (SQLCODE || '-' || SQLERRM);
    RETURN NULL;

END SP_GET_RBI_RSK;

/
--------------------------------------------------------
--  DDL for Function SP_GET_TBL_SURV_DTL
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE FUNCTION "IMSA"."SP_GET_TBL_SURV_DTL" 
(
  P_HDR_ID IN NUMBER DEFAULT NULL
, P_HOST_ID IN NUMBER DEFAULT NULL
, P_DATE IN VARCHAR2 DEFAULT NULL  
) RETURN SYS_REFCURSOR AS 
  CUR SYS_REFCURSOR;
  V_HDR_ID NUMBER:=P_HDR_ID;
  V_COUNT NUMBER:=0;
BEGIN
  SELECT COUNT(1) INTO V_COUNT FROM TBL_SURV_HDR WHERE TBL_SURV_HDR.SURV_HDR_HOST_ID= P_HOST_ID AND 
  TBL_SURV_HDR.SURV_HDR_DATE = TO_DATE(P_DATE, 'dd-MM-yyyy');

  IF (V_COUNT > 0) THEN 
    SELECT TBL_SURV_HDR.SURV_HDR_ID INTO V_HDR_ID FROM TBL_SURV_HDR WHERE TBL_SURV_HDR.SURV_HDR_HOST_ID= P_HOST_ID AND 
    TBL_SURV_HDR.SURV_HDR_DATE = TO_DATE(P_DATE, 'dd-MM-yyyy');
  END IF;

  --GET SURVEILANCE DETAILS FOR POPUP FOR OVERVIEW HOME PAGE
  OPEN CUR FOR 
    SELECT NVL(Q1.SURV_HDR_ID,-1) SURV_HDR_ID, 
      V_TBL_SURV_TIEBACKS.TB_HOST_ID,
      SYS_NODES_ATTRIB.NODE_DESC,
      Q1.SURV_HDR_NOTES,
      Q1.SURV_HDR_DATE
    FROM V_TBL_SURV_TIEBACKS,
      (SELECT TBL_SURV_HDR.SURV_HDR_HOST_ID,
        TBL_SURV_HDR.SURV_HDR_NOTES,
        TBL_SURV_HDR.SURV_HDR_DATE,
        TBL_SURV_HDR.SURV_HDR_ID
      FROM TBL_SURV_HDR
      WHERE TBL_SURV_HDR.SURV_HDR_DATE = TO_DATE(P_DATE, 'dd-MM-yyyy')
      ) Q1,
      SYS_NODES_ATTRIB
    WHERE Q1.SURV_HDR_HOST_ID(+) = V_TBL_SURV_TIEBACKS.TB_HOST_ID
    AND SYS_NODES_ATTRIB.REC_TAG = V_TBL_SURV_TIEBACKS.TB_HOST_ID 
    AND NVL(Q1.SURV_HDR_ID, -1)  = V_HDR_ID 
    GROUP BY V_TBL_SURV_TIEBACKS.TB_HOST_ID,
      SYS_NODES_ATTRIB.NODE_ID,
      SYS_NODES_ATTRIB.NODE_DESC,
      Q1.SURV_HDR_NOTES,
      Q1.SURV_HDR_DATE,
      Q1.SURV_HDR_ID
    HAVING V_TBL_SURV_TIEBACKS.TB_HOST_ID = P_HOST_ID 
    ORDER BY V_TBL_SURV_TIEBACKS.TB_HOST_ID;

  RETURN CUR;
END SP_GET_TBL_SURV_DTL;

/
--------------------------------------------------------
--  DDL for Function SP_GET_TBL_SURV_DTL_AN
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE FUNCTION "IMSA"."SP_GET_TBL_SURV_DTL_AN" 
(
  P_TIEBACK_ID IN NUMBER DEFAULT NULL
, P_DATE IN VARCHAR2 DEFAULT NULL  
) RETURN SYS_REFCURSOR AS 
  CUR SYS_REFCURSOR;
BEGIN
  --GET SURVEILANCE DETAILS FOR POPUP FOR OVERVIEW HOME PAGE
  OPEN CUR FOR 
    SELECT 
      V_TBL_ANOM_MAIN.AN_ID, 
      V_TBL_ANOM_MAIN.AN_REF,
      V_TBL_ANOM_MAIN.AN_TITLE 
    FROM V_TBL_ANOM_MAIN
    INNER JOIN
      (SELECT Connect_By_Root SYS_TREE_STRUC.TRE_DAT_TAG TIEBACK_ID,
        SYS_TREE_STRUC.TRE_DAT_TAG
      FROM SYS_TREE_STRUC
      INNER JOIN SYS_NODES_ATTRIB
      ON SYS_TREE_STRUC.TRE_DAT_TAG                 = SYS_NODES_ATTRIB.REC_TAG
      WHERE SYS_TREE_STRUC.TRE_DAT_TYPE             = 1
        CONNECT BY Prior SYS_TREE_STRUC.TRE_NOD_TAG = SYS_TREE_STRUC.TRE_NOD_TAG_PAR
      ) Q1 ON Q1.TRE_DAT_TAG                        = V_TBL_ANOM_MAIN.AN_ASSET_ID
    WHERE Q1.TIEBACK_ID                             = P_TIEBACK_ID 
    AND V_TBL_ANOM_MAIN.AN_RAISED_DATE            >= TO_DATE(P_DATE || ' 00:00', 'dd-MM-yyyy HH24:MI') 
    AND V_TBL_ANOM_MAIN.AN_RAISED_DATE            <= TO_DATE(P_DATE || ' 23:59', 'dd-MM-yyyy HH24:MI');

  RETURN CUR;
END SP_GET_TBL_SURV_DTL_AN;

/
--------------------------------------------------------
--  DDL for Function SP_GET_TBL_SURV_DTL_SUB
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE FUNCTION "IMSA"."SP_GET_TBL_SURV_DTL_SUB" 
(
  P_HDR_ID IN NUMBER DEFAULT NULL 
, P_HOST_ID IN NUMBER DEFAULT NULL   
, P_DATE IN VARCHAR2 DEFAULT NULL 
) RETURN SYS_REFCURSOR AS 
  CUR SYS_REFCURSOR;
BEGIN
   --GET SURVEILANCE DETAILS HEADER FOR OVERVIEW HOME PAGE(DETAIL PART OF OVERVIEW)
  IF (P_HDR_ID<>-1) THEN --If Header id passed (record already exists), use hdr it to select.
    OPEN CUR FOR 
      SELECT V_TBL_SURV_TIEBACKS.TB_TIEBACK_ID,
        SYS_NODES_ATTRIB.NODE_DESC,
        NVL(Q2.AN_CNT, 0) AN_CNT,
        NVL(TBL_SURV_DTL.SURV_DTL_COMPLETED, 0) COMPLETED
      FROM
        (SELECT COUNT(1) AN_CNT,
          Q1.ROOT_ID
        FROM V_TBL_ANOM_MAIN
        INNER JOIN
          (SELECT Connect_By_Root SYS_TREE_STRUC.TRE_DAT_TAG ROOT_ID,
            SYS_TREE_STRUC.TRE_DAT_TAG
          FROM SYS_TREE_STRUC
          INNER JOIN SYS_NODES_ATTRIB
          ON SYS_TREE_STRUC.TRE_DAT_TAG                 = SYS_NODES_ATTRIB.REC_TAG
          WHERE SYS_TREE_STRUC.TRE_DAT_TYPE             = 1
            CONNECT BY Prior SYS_TREE_STRUC.TRE_NOD_TAG = SYS_TREE_STRUC.TRE_NOD_TAG_PAR
          ) Q1 ON Q1.TRE_DAT_TAG                        = V_TBL_ANOM_MAIN.AN_ASSET_ID
        WHERE V_TBL_ANOM_MAIN.AN_RAISED_DATE >= TO_DATE(P_DATE || ' 00:00', 'dd-MM-yyyy HH24:MI')
        AND V_TBL_ANOM_MAIN.AN_RAISED_DATE   <= TO_DATE(P_DATE || ' 23:59', 'dd-MM-yyyy HH24:MI')
        GROUP BY Q1.ROOT_ID
        ) Q2
      RIGHT JOIN V_TBL_SURV_TIEBACKS
      ON V_TBL_SURV_TIEBACKS.TB_TIEBACK_ID = Q2.ROOT_ID
      LEFT JOIN TBL_SURV_DTL
      ON V_TBL_SURV_TIEBACKS.TB_TIEBACK_ID = TBL_SURV_DTL.SURV_DTL_TIEBACK_ID
      INNER JOIN SYS_NODES_ATTRIB
      ON V_TBL_SURV_TIEBACKS.TB_TIEBACK_ID = SYS_NODES_ATTRIB.REC_TAG
      WHERE V_TBL_SURV_TIEBACKS.TB_HOST_ID = P_HOST_ID 
      AND (TBL_SURV_DTL.SURV_DTL_HDR_ID  = P_HDR_ID
      OR TBL_SURV_DTL.SURV_DTL_HDR_ID   IS NULL) 
      ORDER BY V_TBL_SURV_TIEBACKS.TB_TIEBACK_ID;
  ELSE-- Otherwise use host ID
    OPEN CUR FOR 
      SELECT  V_TBL_SURV_TIEBACKS.TB_TIEBACK_ID, 
        SYS_NODES_ATTRIB.NODE_DESC,
        NVL(Q2.AN_CNT, 0) AN_CNT,
        0 COMPLETED  
      FROM
        (SELECT COUNT(1) AN_CNT,
          Q1.ROOT_ID
        FROM V_TBL_ANOM_MAIN
        INNER JOIN
          (SELECT Connect_By_Root SYS_TREE_STRUC.TRE_DAT_TAG ROOT_ID,
            SYS_TREE_STRUC.TRE_DAT_TAG
          FROM SYS_TREE_STRUC
          INNER JOIN SYS_NODES_ATTRIB
          ON SYS_TREE_STRUC.TRE_DAT_TAG                 = SYS_NODES_ATTRIB.REC_TAG
          WHERE SYS_TREE_STRUC.TRE_DAT_TYPE             = 1
            CONNECT BY Prior SYS_TREE_STRUC.TRE_NOD_TAG = SYS_TREE_STRUC.TRE_NOD_TAG_PAR
          ) Q1 ON Q1.TRE_DAT_TAG                        = V_TBL_ANOM_MAIN.AN_ASSET_ID
        WHERE V_TBL_ANOM_MAIN.AN_RAISED_DATE >= TO_DATE(P_DATE || ' 00:00', 'dd-MM-yyyy HH24:MI')
        AND V_TBL_ANOM_MAIN.AN_RAISED_DATE   <= TO_DATE(P_DATE || ' 23:59', 'dd-MM-yyyy HH24:MI')
        GROUP BY Q1.ROOT_ID
        ) Q2
      RIGHT JOIN V_TBL_SURV_TIEBACKS
      ON V_TBL_SURV_TIEBACKS.TB_TIEBACK_ID = Q2.ROOT_ID
      INNER JOIN SYS_NODES_ATTRIB
      ON V_TBL_SURV_TIEBACKS.TB_TIEBACK_ID = SYS_NODES_ATTRIB.REC_TAG
      WHERE V_TBL_SURV_TIEBACKS.TB_HOST_ID = P_HOST_ID 
      ORDER BY V_TBL_SURV_TIEBACKS.TB_TIEBACK_ID;
  END IF;
--TO_DATE('16-01-2015 00:00', 'dd-MM-yyyy HH24:MI')
  RETURN CUR;
END SP_GET_TBL_SURV_DTL_SUB;

/
--------------------------------------------------------
--  DDL for Function SP_GET_TBL_SURV_HDR
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE FUNCTION "IMSA"."SP_GET_TBL_SURV_HDR" 
(
  P_DATE IN VARCHAR2 DEFAULT NULL  
) RETURN SYS_REFCURSOR AS 
  CUR SYS_REFCURSOR;
BEGIN
  --GET SURVEILANCE DETAILS HEADER FOR OVERVIEW HOME PAGE

  OPEN CUR FOR 
    SELECT Q1.SURV_HDR_ID, 
      V_TBL_SURV_TIEBACKS.TB_HOST_ID,
      SYS_NODES_ATTRIB.NODE_DESC,
      Q1.SURV_HDR_NOTES,
      Q1.SURV_HDR_DATE
    FROM V_TBL_SURV_TIEBACKS,
      (SELECT TBL_SURV_HDR.SURV_HDR_HOST_ID,
        TBL_SURV_HDR.SURV_HDR_NOTES,
        TBL_SURV_HDR.SURV_HDR_DATE,
        TBL_SURV_HDR.SURV_HDR_ID
      FROM TBL_SURV_HDR
      WHERE TBL_SURV_HDR.SURV_HDR_DATE = TO_DATE(P_DATE, 'dd-MM-yyyy')
      ) Q1,
      SYS_NODES_ATTRIB
    WHERE Q1.SURV_HDR_HOST_ID(+) = V_TBL_SURV_TIEBACKS.TB_HOST_ID
    AND SYS_NODES_ATTRIB.REC_TAG = V_TBL_SURV_TIEBACKS.TB_HOST_ID
    GROUP BY V_TBL_SURV_TIEBACKS.TB_HOST_ID,
      SYS_NODES_ATTRIB.NODE_ID,
      SYS_NODES_ATTRIB.NODE_DESC,
      Q1.SURV_HDR_NOTES,
      Q1.SURV_HDR_DATE,
      Q1.SURV_HDR_ID
    ORDER BY V_TBL_SURV_TIEBACKS.TB_HOST_ID;

  RETURN CUR;
END SP_GET_TBL_SURV_HDR;

/
--------------------------------------------------------
--  DDL for Function SP_GET_TBL_SURV_HDR_SUB
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE FUNCTION "IMSA"."SP_GET_TBL_SURV_HDR_SUB" 
(
  P_HDR_ID IN VARCHAR2 DEFAULT NULL 
, P_HOST_ID IN VARCHAR2 DEFAULT NULL   
, P_DATE IN VARCHAR2 DEFAULT NULL 
) RETURN SYS_REFCURSOR AS 
  V_RC SYS_REFCURSOR;

  L_INPUT_1 VARCHAR2(4000):=P_HDR_ID;
  L_COUNT_1 BINARY_INTEGER;
  L_ARRAY_1 DBMS_UTILITY.lname_array;

  L_INPUT_2 VARCHAR2(4000):=P_HOST_ID;
  L_COUNT_2 BINARY_INTEGER;
  L_ARRAY_2 DBMS_UTILITY.lname_array;

  V_WHERE VARCHAR2(4000):=' WHERE ';
  V_SQL  VARCHAR2(4000):='';

BEGIN
  --Convert string to array. HDR ID
  DBMS_UTILITY.COMMA_TO_TABLE
    (list   => REGEXP_REPLACE(L_INPUT_1,'(^|,)','\1x')
    ,tablen => L_COUNT_1
    ,tab    => L_ARRAY_1
    );

  --Convert string to array. HDR ID
  DBMS_UTILITY.COMMA_TO_TABLE
    (list   => REGEXP_REPLACE(L_INPUT_2,'(^|,)','\1x')
    ,tablen => L_COUNT_2
    ,tab    => L_ARRAY_2
    );

  FOR i IN 1 .. L_COUNT_1 LOOP
      V_WHERE:= (V_WHERE || '(SURV_DTL_HDR_ID=' || SUBSTR(L_ARRAY_1(i),2) || ' AND ' || 'TB_HOST_ID=' || SUBSTR(L_ARRAY_2(i),2) || ') OR ');
  END LOOP;  

  V_WHERE:=RTRIM(V_WHERE, ' OR ');
      --DBMS_OUTPUT.PUT_LINE(V_WHERE);
   --GET SURVEILANCE DETAILS HEADER FOR OVERVIEW HOME PAGE(DETAIL PART OF OVERVIEW)

    V_SQL :=
    'SELECT SURV_DTL_HDR_ID ,
      TB_HOST_ID,
      TB_INI,
      AN_CNT,
      COMPLETED
    FROM
      (SELECT TBL_SURV_DTL.SURV_DTL_HDR_ID,
        V_TBL_SURV_TIEBACKS.TB_HOST_ID,
        V_TBL_SURV_TIEBACKS.TB_INI,
        NVL(Q2.AN_CNT, 0) AN_CNT,
        NVL(TBL_SURV_DTL.SURV_DTL_COMPLETED, 0) COMPLETED
      FROM
        (SELECT COUNT(1) AN_CNT,
          Q1.ROOT_ID
        FROM V_TBL_ANOM_MAIN
        INNER JOIN
          (SELECT Connect_By_Root SYS_TREE_STRUC.TRE_DAT_TAG ROOT_ID,
            SYS_TREE_STRUC.TRE_DAT_TAG
          FROM SYS_TREE_STRUC
          INNER JOIN SYS_NODES_ATTRIB
          ON SYS_TREE_STRUC.TRE_DAT_TAG                 = SYS_NODES_ATTRIB.REC_TAG
          WHERE SYS_TREE_STRUC.TRE_DAT_TYPE             = 1
            CONNECT BY Prior SYS_TREE_STRUC.TRE_NOD_TAG = SYS_TREE_STRUC.TRE_NOD_TAG_PAR
          ) Q1 ON Q1.TRE_DAT_TAG                        = V_TBL_ANOM_MAIN.AN_ASSET_ID
        WHERE V_TBL_ANOM_MAIN.AN_RAISED_DATE >= TO_DATE(''' || P_DATE || ' 00:00'', ''dd-MM-yyyy HH24:MI'')
        AND V_TBL_ANOM_MAIN.AN_RAISED_DATE   <= TO_DATE(''' || P_DATE || ' 23:59'', ''dd-MM-yyyy HH24:MI'')
        GROUP BY Q1.ROOT_ID
        ) Q2
      RIGHT JOIN V_TBL_SURV_TIEBACKS
      ON V_TBL_SURV_TIEBACKS.TB_TIEBACK_ID = Q2.ROOT_ID
      LEFT JOIN TBL_SURV_DTL
      ON V_TBL_SURV_TIEBACKS.TB_TIEBACK_ID = TBL_SURV_DTL.SURV_DTL_TIEBACK_ID
      UNION ALL
      SELECT 0 SURV_DTL_HDR_ID,
        V_TBL_SURV_TIEBACKS.TB_HOST_ID,
        V_TBL_SURV_TIEBACKS.TB_INI,
        NVL(Q2.AN_CNT, 0) AN_CNT,
        0 COMPLETED
      FROM
        (SELECT COUNT(1) AN_CNT,
          Q1.ROOT_ID
        FROM V_TBL_ANOM_MAIN
        INNER JOIN
          (SELECT Connect_By_Root SYS_TREE_STRUC.TRE_DAT_TAG ROOT_ID,
            SYS_TREE_STRUC.TRE_DAT_TAG
          FROM SYS_TREE_STRUC
          INNER JOIN SYS_NODES_ATTRIB
          ON SYS_TREE_STRUC.TRE_DAT_TAG                 = SYS_NODES_ATTRIB.REC_TAG
          WHERE SYS_TREE_STRUC.TRE_DAT_TYPE             = 1
            CONNECT BY Prior SYS_TREE_STRUC.TRE_NOD_TAG = SYS_TREE_STRUC.TRE_NOD_TAG_PAR
          ) Q1 ON Q1.TRE_DAT_TAG                        = V_TBL_ANOM_MAIN.AN_ASSET_ID
        WHERE V_TBL_ANOM_MAIN.AN_RAISED_DATE >= TO_DATE(''' || P_DATE || ' 00:00'', ''dd-MM-yyyy HH24:MI'')
        AND V_TBL_ANOM_MAIN.AN_RAISED_DATE   <= TO_DATE(''' || P_DATE || ' 23:59'', ''dd-MM-yyyy HH24:MI'')
        GROUP BY Q1.ROOT_ID
        ) Q2
      RIGHT JOIN V_TBL_SURV_TIEBACKS
      ON V_TBL_SURV_TIEBACKS.TB_TIEBACK_ID = Q2.ROOT_ID) ' || V_WHERE || '
      ORDER BY SURV_DTL_HDR_ID,TB_HOST_ID,TB_INI DESC';

         OPEN V_RC FOR V_SQL;

  RETURN V_RC;
 -- RETURN V_SQL;
END SP_GET_TBL_SURV_HDR_SUB;

/
--------------------------------------------------------
--  DDL for Function SP_INSERT_TBL_ANOM_ACT_ITEMS
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE FUNCTION "IMSA"."SP_INSERT_TBL_ANOM_ACT_ITEMS" 
(
  P_AI_ID IN NUMBER DEFAULT NULL,
  P_AI_REF_NO IN VARCHAR2 DEFAULT NULL,
  P_AI_ACT_PARTY1 IN VARCHAR2 DEFAULT NULL,
  P_AI_ACT_PARTY2 IN VARCHAR2 DEFAULT NULL,
  P_AI_TARGET_DATE IN DATE DEFAULT NULL,
  P_AI_ACT_START_DATE IN DATE DEFAULT NULL,
  P_AI_ACT_END_DATE IN DATE DEFAULT NULL,
  P_AI_MHOURS IN NUMBER DEFAULT NULL,
  P_AI_STAT IN NUMBER DEFAULT NULL,
  P_AI_AN_ID IN NUMBER DEFAULT NULL,
  P_AI_DETAILS IN VARCHAR2 DEFAULT NULL,
  P_AI_NOTES IN VARCHAR2 DEFAULT NULL,
  P_AI_UPDATED_DATE IN DATE DEFAULT NULL,
  P_AI_RAISED_BY IN NUMBER DEFAULT NULL,
  P_AI_RAISED_DATE IN DATE DEFAULT NULL,
  P_AI_UPDATED_BY IN NUMBER DEFAULT NULL,
  P_AI_TITLE IN VARCHAR2 DEFAULT NULL,
  P_AI_PRIORITY IN NUMBER DEFAULT NULL,
  P_AI_UPDATED_BY_SYS IN VARCHAR2 DEFAULT NULL
)
  RETURN NUMBER AS 
  V_NEW_AI_ID NUMBER:=SP_NEW_TABLE_PK_NO('TBL_ANOM_ACT_ITEMS', 'AI_ID');

  V_RC SYS_REFCURSOR;

  V_AN_REF VARCHAR2(10);

  V_MAX_AI_REF_NO VARCHAR2(10);
  V_NEW_AI_REF_NO VARCHAR2(10);

  V_MAX_AI_NO NUMBER;
  V_NEW_AI_NO NUMBER;
  V_EVT_LOG NUMBER;
BEGIN
  --GET AN_REF FIRST FROM ANOMALY TABLE
  OPEN V_RC FOR 
    SELECT AN_REF FROM TBL_ANOM_MAIN WHERE AN_ID=P_AI_AN_ID;
  FETCH V_RC INTO V_AN_REF;
  CLOSE V_RC;

  -- GET NEW AI REF NO
  OPEN V_RC FOR 
    'SELECT MAX(SUBSTR(AI_REF_NO,9)) FROM TBL_ANOM_ACT_ITEMS WHERE AI_REF_NO LIKE ' || '''' || V_AN_REF || '-%''';  
  FETCH V_RC INTO V_MAX_AI_REF_NO;
  CLOSE V_RC;

  IF (V_MAX_AI_REF_NO IS NULL) THEN
    V_MAX_AI_REF_NO:='1';
  ELSE
    V_MAX_AI_REF_NO:=TO_NUMBER(V_MAX_AI_REF_NO) + 1;
  END IF;

  V_MAX_AI_REF_NO:=TO_CHAR(V_MAX_AI_REF_NO,'FM00');
  V_NEW_AI_REF_NO:=(V_AN_REF || '-' || V_MAX_AI_REF_NO);

  --GET NEW AI_NO;
  OPEN V_RC FOR 
    SELECT MAX(AI_NO) FROM TBL_ANOM_ACT_ITEMS WHERE AI_AN_ID=P_AI_AN_ID;
  FETCH V_RC INTO V_MAX_AI_NO;
  CLOSE V_RC;

  IF (V_MAX_AI_NO IS NULL) THEN
    V_NEW_AI_NO:=1;
  ELSE
    V_NEW_AI_NO:=(V_MAX_AI_NO) + 1;
  END IF;

  --INSERT
  INSERT INTO TBL_ANOM_ACT_ITEMS (
    AI_ID,
    AI_REF_NO,
    AI_ACT_PARTY1,
    AI_ACT_PARTY2,
    AI_TARGET_DATE,
    AI_ACT_START_DATE,
    AI_ACT_END_DATE,
    AI_MHOURS,
    AI_STAT,
    AI_NO,
    AI_AN_ID,
    AI_DETAILS,
    AI_NOTES,
    AI_UPDATED_DATE,
    AI_RAISED_BY,
    AI_RAISED_DATE,
    AI_UPDATED_BY,
    AI_TITLE,
    AI_PRIORITY
  ) VALUES (
    V_NEW_AI_ID,
    V_NEW_AI_REF_NO,
    P_AI_ACT_PARTY1,
    P_AI_ACT_PARTY2,
    P_AI_TARGET_DATE,
    P_AI_ACT_START_DATE,
    P_AI_ACT_END_DATE,
    P_AI_MHOURS,
    P_AI_STAT,
    V_NEW_AI_NO,
    P_AI_AN_ID,
    P_AI_DETAILS,
    P_AI_NOTES,
    P_AI_UPDATED_DATE,
    P_AI_RAISED_BY,
    P_AI_RAISED_DATE,
    P_AI_UPDATED_BY,
    P_AI_TITLE,
    P_AI_PRIORITY
  );

  COMMIT;

    V_EVT_LOG:=SP_INSERT_TBL_EVENT_LOG(P_AI_UPDATED_BY_SYS,'TBL_ANOM_ACT_ITEMS','INSERT SUCCESS: #' || V_NEW_AI_ID);

  RETURN V_NEW_AI_ID;
EXCEPTION
 WHEN OTHERS THEN
    ROLLBACK;
    V_EVT_LOG:=SP_INSERT_TBL_EVENT_LOG(P_AI_UPDATED_BY_SYS,'TBL_ANOM_ACT_ITEMS','INSERT FAIL: #' || V_NEW_AI_ID || '; ERR: ' || SQLCODE || '-' || SQLERRM);
    RETURN -1;
END SP_INSERT_TBL_ANOM_ACT_ITEMS;

/
--------------------------------------------------------
--  DDL for Function SP_INSERT_TBL_ANOM_FT
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE FUNCTION "IMSA"."SP_INSERT_TBL_ANOM_FT" 
(
  P_FT_ID IN NUMBER DEFAULT NULL
,  P_FT_CODE IN VARCHAR2 DEFAULT NULL
, P_FT_CORR_REL IN NUMBER DEFAULT NULL  
, P_FT_NAME IN VARCHAR2 DEFAULT NULL
, P_FT_DESC IN VARCHAR2 DEFAULT NULL
, P_FT_TYPE IN NUMBER DEFAULT NULL 
, P_FT_GROUP IN NUMBER DEFAULT NULL
, P_USER IN VARCHAR2 DEFAULT NULL
) RETURN NUMBER AS 
  NEW_FT_ID NUMBER:=SP_NEW_TABLE_PK_NO('TBL_ANOM_FT', 'FT_ID');
  V_EVT_LOG NUMBER;
BEGIN
  INSERT INTO TBL_ANOM_FT (
    FT_ID
  , FT_CODE
  , FT_CORR_REL
  , FT_NAME
  , FT_DESC
  , FT_TYPE
  , FT_GROUP
  ) VALUES (
    NEW_FT_ID
  , P_FT_CODE
  , P_FT_CORR_REL
  , P_FT_NAME
  , P_FT_DESC
  , P_FT_TYPE
  , P_FT_GROUP
  );

  V_EVT_LOG:=SP_INSERT_TBL_EVENT_LOG(P_USER,'TBL_ANOM_FT','INSERT SUCCESS: #' || NEW_FT_ID);

  RETURN NEW_FT_ID;
EXCEPTION
  WHEN OTHERS THEN
    ROLLBACK;
    --Record event log.
    V_EVT_LOG:=SP_INSERT_TBL_EVENT_LOG(P_USER, 'TBL_ANOM_FT', 'INSERT FAIL:  #' || NEW_FT_ID);
    RETURN -1;
END SP_INSERT_TBL_ANOM_FT;

/
--------------------------------------------------------
--  DDL for Function SP_INSERT_TBL_ANOM_MAIN
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE FUNCTION "IMSA"."SP_INSERT_TBL_ANOM_MAIN" 
(
  P_AN_ID IN NUMBER DEFAULT NULL
  , P_AN_REF IN VARCHAR2 DEFAULT NULL
  , P_AN_REVNO IN VARCHAR2 DEFAULT NULL
  , P_AN_ORIG_CLASS IN NUMBER DEFAULT NULL
  , P_AN_CURR_CLASS IN NUMBER DEFAULT NULL
  , P_AN_TYPE IN NUMBER DEFAULT NULL
  , P_AN_ORIG_AVAIL_CLASS IN NUMBER DEFAULT NULL
  , P_AN_CURR_AVAIL_CLASS IN NUMBER DEFAULT NULL
  , P_AN_ASSET_ID IN NUMBER DEFAULT NULL 
  , P_AN_ASSET_ID_M IN VARCHAR2 DEFAULT NULL 
  , P_AN_DATE_IDENT IN DATE DEFAULT NULL 
  , P_AN_STATUS IN NUMBER DEFAULT NULL
 -- Details Tab
  , P_AN_TITLE IN VARCHAR2 DEFAULT NULL 
  , P_AN_FNCR_REQUIRED IN NUMBER DEFAULT NULL
  , P_AN_FNCR IN VARCHAR2 DEFAULT NULL 
  , P_AN_DESC IN VARCHAR2 DEFAULT NULL 
  , P_AN_LIFE_TERM IN VARCHAR2 DEFAULT NULL
  , P_AN_ACT_BY_DATE IN DATE DEFAULT NULL
  , P_AN_ACT_PARTY IN VARCHAR2 DEFAULT NULL 
  , P_AN_MAINT_REQ IN NUMBER DEFAULT NULL
  , P_AN_START_NORTH IN NUMBER DEFAULT NULL 
  , P_AN_START_EAST IN NUMBER DEFAULT NULL 
  , P_AN_PORTFOLIO_APPL IN NUMBER DEFAULT NULL
  , P_AN_WO_REF IN VARCHAR2 DEFAULT NULL 
  , P_AN_END_NORTH IN NUMBER DEFAULT NULL 
  , P_AN_END_EAST IN NUMBER DEFAULT NULL 
  , P_AN_EQ_FAILURE IN NUMBER DEFAULT NULL
  , P_AN_WO_STATUS IN NUMBER DEFAULT NULL
  , P_AN_ASIS IN NUMBER DEFAULT NULL
  , P_AN_ASIS_STATUS IN NUMBER DEFAULT NULL 
  , P_AN_PT_SUPPORT IN NUMBER DEFAULT NULL 
  -- Assessment Tab
  , P_AN_ASSMNT IN VARCHAR2 DEFAULT NULL 
  , P_AN_RAISED_BY IN VARCHAR2 DEFAULT NULL 
  , P_AN_RAISED_DATE IN DATE DEFAULT NULL
  , P_AN_ASS_BY IN VARCHAR2 DEFAULT NULL 
  , P_AN_ASS_DATE IN DATE DEFAULT NULL
  , P_AN_UPD_BY IN VARCHAR2 DEFAULT NULL 
  , P_AN_UPD_DATE IN DATE DEFAULT NULL  
  -- Recommendation Tab
  , P_AN_RECCMD IN VARCHAR2 DEFAULT NULL 
  , P_AN_TA_APPROVED IN NUMBER DEFAULT NULL
  , P_AN_TA_NAME IN VARCHAR2 DEFAULT NULL 
  , P_AN_TA_APPR_DATE IN DATE DEFAULT NULL  
  -- Risk Tab
  , P_AN_RISK_RANK_COMMENTS IN VARCHAR2 DEFAULT NULL 
  , P_AN_RISK_RANK_SEVERITY IN NUMBER DEFAULT NULL
  , P_AN_RISK_RANK_LIKELIHOOD IN NUMBER DEFAULT NULL
  -- Intervention Tab
  , P_ITV_DATE_MOBIL IN DATE DEFAULT NULL 
  , P_ITV_TYPE IN NUMBER DEFAULT NULL
  , P_ITV_VESSEL_TYPE IN NUMBER DEFAULT NULL
  , P_ITV_VESSEL_NAME IN VARCHAR2 DEFAULT NULL 
  , P_ITV_SUMMARY IN VARCHAR2 DEFAULT NULL 
  , P_ITV_TIME_PLAN_PROC IN NUMBER DEFAULT NULL
  , P_ITV_AFE_COST IN NUMBER DEFAULT NULL
  , P_ITV_TIME_ACTUAL IN NUMBER DEFAULT NULL
  , P_ITV_AFE_SHELL_SHARE IN NUMBER DEFAULT NULL
  , P_ITV_TIME_MOBIL IN NUMBER DEFAULT NULL
  , P_ITV_ACTUAL_COST IN NUMBER DEFAULT NULL
  , P_ITV_LEARNING IN VARCHAR2 DEFAULT NULL 
  , P_ITV_VESSEL_DAY_RATE IN NUMBER DEFAULT NULL
  , P_ITV_WBS_NUMBER IN VARCHAR2 DEFAULT NULL 
  , P_AN_ASSET_CHANGED IN NUMBER DEFAULT 0 
  , P_DAT_TYPE IN NUMBER DEFAULT 1
  , P_COLOR_MODE IN VARCHAR2 DEFAULT 'ACTION_COLOR'
)
  RETURN NUMBER AS 
  L_INPUT VARCHAR2(4000):=P_AN_ASSET_ID_M;
  L_COUNT BINARY_INTEGER;
  L_ARRAY DBMS_UTILITY.lname_array;
  V_AN_ASSET_ID NUMBER;
  V_AN_ID NUMBER:=SP_NEW_TABLE_PK_NO('TBL_ANOM_MAIN', 'AN_ID');
  V_EVT_LOG NUMBER;
BEGIN

  INSERT INTO TBL_ANOM_MAIN (
    AN_ID
    ,AN_REF
    ,AN_REVNO
    ,AN_ORIG_CLASS
    ,AN_CURR_CLASS
    ,AN_TYPE
    ,AN_ORIG_AVAIL_CLASS
    ,AN_CURR_AVAIL_CLASS
    ,AN_ASSET_ID
    ,AN_DATE_IDENT
    ,AN_STATUS
    ,AN_ATTACHMENTS
   -- Details Tab
    ,AN_TITLE 
    ,AN_FNCR_REQUIRED
    ,AN_FNCR 
    ,AN_DESC 
    ,AN_LIFE_TERM
    ,AN_ACT_BY_DATE
    ,AN_ACT_PARTY 
    ,AN_MAINT_REQ
    ,AN_START_NORTH 
    ,AN_START_EAST 
    ,AN_PORTFOLIO_APPL
    ,AN_WO_REF 
    ,AN_END_NORTH 
    ,AN_END_EAST 
    ,AN_EQ_FAILURE
    ,AN_WO_STATUS 
    ,AN_ASIS
    ,AN_ASIS_STATUS
    ,AN_PT_SUPPORT
    -- Assessment Tab
    ,AN_ASSMNT 
    ,AN_RAISED_BY 
    ,AN_RAISED_DATE
    ,AN_ASS_BY 
    ,AN_ASS_DATE
    ,AN_UPD_BY 
    ,AN_UPD_DATE 
    -- Recommendation Tab
    ,AN_RECCMD 
    ,AN_TA_APPROVED
    ,AN_TA_NAME 
    ,AN_TA_APPR_DATE 
    -- Risk Tab
    ,AN_RISK_RANK_COMMENTS 
    ,AN_RISK_RANK_SEVERITY
    ,AN_RISK_RANK_LIKELIHOOD
    -- Intervention Tab
    ,ITV_DATE_MOBIL
    ,ITV_TYPE
    ,ITV_VESSEL_TYPE
    ,ITV_VESSEL_NAME 
    ,ITV_SUMMARY 
    ,ITV_TIME_PLAN_PROC
    ,ITV_AFE_COST
    ,ITV_TIME_ACTUAL
    ,ITV_AFE_SHELL_SHARE
    ,ITV_TIME_MOBIL
    ,ITV_ACTUAL_COST
    ,ITV_LEARNING 
    ,ITV_VESSEL_DAY_RATE
    ,ITV_WBS_NUMBER 
  ) VALUES (
    V_AN_ID
    ,SP_NEW_AN_REF_NO()
    ,P_AN_REVNO
    ,P_AN_ORIG_CLASS
    ,P_AN_CURR_CLASS
    ,P_AN_TYPE
    ,P_AN_ORIG_AVAIL_CLASS
    ,P_AN_CURR_AVAIL_CLASS
    ,P_AN_ASSET_ID
    ,P_AN_DATE_IDENT
    ,P_AN_STATUS
    ,0
   -- Details Tab
    ,P_AN_TITLE 
    ,P_AN_FNCR_REQUIRED
    ,P_AN_FNCR 
    ,P_AN_DESC 
    ,P_AN_LIFE_TERM
    ,P_AN_ACT_BY_DATE
    ,P_AN_ACT_PARTY 
    ,P_AN_MAINT_REQ
    ,P_AN_START_NORTH 
    ,P_AN_START_EAST 
    ,P_AN_PORTFOLIO_APPL
    ,P_AN_WO_REF 
    ,P_AN_END_NORTH 
    ,P_AN_END_EAST 
    ,P_AN_EQ_FAILURE
    ,P_AN_WO_STATUS
    ,P_AN_ASIS
    ,P_AN_ASIS_STATUS
    ,P_AN_PT_SUPPORT
    -- Assessment Tab
    ,P_AN_ASSMNT 
    ,P_AN_RAISED_BY 
    ,P_AN_RAISED_DATE
    ,P_AN_ASS_BY 
    ,P_AN_ASS_DATE
    ,P_AN_UPD_BY 
    ,P_AN_UPD_DATE 
    -- Recommendation Tab
    ,P_AN_RECCMD 
    ,P_AN_TA_APPROVED
    ,P_AN_TA_NAME 
    ,P_AN_TA_APPR_DATE 
    -- Risk Tab
    ,P_AN_RISK_RANK_COMMENTS 
    ,P_AN_RISK_RANK_SEVERITY
    ,P_AN_RISK_RANK_LIKELIHOOD
    -- Intervention Tab
    ,P_ITV_DATE_MOBIL
    ,P_ITV_TYPE
    ,P_ITV_VESSEL_TYPE
    ,P_ITV_VESSEL_NAME 
    ,P_ITV_SUMMARY 
    ,P_ITV_TIME_PLAN_PROC
    ,P_ITV_AFE_COST
    ,P_ITV_TIME_ACTUAL
    ,P_ITV_AFE_SHELL_SHARE
    ,P_ITV_TIME_MOBIL
    ,P_ITV_ACTUAL_COST
    ,P_ITV_LEARNING 
    ,P_ITV_VESSEL_DAY_RATE
    ,P_ITV_WBS_NUMBER 
  );

  --Convert string to array.
  DBMS_UTILITY.COMMA_TO_TABLE
    (list   => REGEXP_REPLACE(L_INPUT,'(^|,)','\1x')
    ,tablen => L_COUNT
    ,tab    => L_ARRAY
    );
    --DBMS_OUTPUT.PUT_LINE(L_COUNT);

    FOR i IN 1 .. L_COUNT LOOP
      V_AN_ASSET_ID:=SUBSTR(L_ARRAY(i),2);
      INSERT INTO LNK_AN_NODES (LNK_TAG_A,LNK_TAG_B) VALUES (V_AN_ID, V_AN_ASSET_ID);
    END LOOP;  
    COMMIT;

  V_EVT_LOG:=SP_INSERT_TBL_EVENT_LOG(P_AN_UPD_BY,'TBL_ANOM_MAIN','INSERT SUCCESS: #' || V_AN_ID);

  RETURN V_AN_ID;
EXCEPTION
  WHEN OTHERS THEN
    ROLLBACK;
    --Record event log.
    V_EVT_LOG:=SP_INSERT_TBL_EVENT_LOG(P_AN_UPD_BY, 'TBL_ANOM_MAIN', 'INSERT FAIL:  #' || P_AN_ID || '; ERR: ' || SQLCODE || '-' || SQLERRM);
    RETURN -1;
END SP_INSERT_TBL_ANOM_MAIN;

/
--------------------------------------------------------
--  DDL for Function SP_INSERT_TBL_CA
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE FUNCTION "IMSA"."SP_INSERT_TBL_CA" 
(
    P_CA_ID IN NUMBER DEFAULT NULL, 
    P_CA_REC_TAG IN NUMBER DEFAULT NULL, 
    P_CA_LAST_DATE IN DATE DEFAULT NULL, 
    P_CA_TASK_REF IN VARCHAR2 DEFAULT NULL, 
    P_CA_TASK_DESC IN VARCHAR2 DEFAULT NULL, 
    P_CA_TARGET_DATE IN DATE DEFAULT NULL, 
    P_CA_TASK_TYPE IN NUMBER DEFAULT NULL, 
    P_CA_TASK_FREQ IN NUMBER DEFAULT NULL, 
    P_CA_HRS_NEEDED IN NUMBER DEFAULT NULL, 
    P_CA_FREQ_JUST IN VARCHAR2 DEFAULT NULL, 
    P_CA_NEXT_TARGET_DATE IN DATE DEFAULT NULL, 
    P_CA_UPD_BY IN VARCHAR2 DEFAULT NULL, 
    P_CA_UPD_DATE IN DATE DEFAULT NULL, 
		
    P_CA_DEV_NEEDED IN NUMBER DEFAULT NULL, 
    P_CA_LAFD_DEV_1 IN DATE DEFAULT NULL, 
    P_CA_RSK_ASS IN VARCHAR2 DEFAULT NULL, 
    P_CA_DEV_MIT IN VARCHAR2 DEFAULT NULL, 
    P_CA_DEV_INITIATOR IN VARCHAR2 DEFAULT NULL, 
    P_CA_DEV_APPROVER IN VARCHAR2 DEFAULT NULL, 
		
    P_CA_LAFD_DEV_NEEDED IN NUMBER DEFAULT NULL, 
    P_CA_LAFD_DEV_2 IN DATE DEFAULT NULL, 
    P_CA_LAFD_RSK_ASS IN VARCHAR2 DEFAULT NULL, 
    P_CA_LAFD_MIT IN VARCHAR2 DEFAULT NULL, 
    P_CA_LAFD_DEV_INITIATOR IN VARCHAR2 DEFAULT NULL, 
    P_CA_LAFD_DEV_APPROVER IN VARCHAR2 DEFAULT NULL, 
    P_CA_SCE IN NUMBER DEFAULT NULL, 
    P_DAT_TYPE IN NUMBER DEFAULT 1, 
    P_COLOR_MODE IN VARCHAR2 DEFAULT 'ACTION_COLOR',
    P_USER IN VARCHAR2 DEFAULT 'IMSA ADMIN'
)   
RETURN NUMBER AS 
  NEW_CA_ID NUMBER:=SP_NEW_TABLE_PK_NO('TBL_CA', 'CA_ID');
  V_EVT_LOG NUMBER;
BEGIN
  INSERT INTO TBL_CA (
    CA_ID, 
    CA_REC_TAG,
    CA_LAST_DATE,
    CA_TASK_REF,
    CA_TASK_DESC,
    CA_TARGET_DATE,
    CA_TASK_TYPE,
    CA_TASK_FREQ,
    CA_HRS_NEEDED,
    CA_FREQ_JUST,
    CA_NEXT_TARGET_DATE,
    CA_UPD_BY,
    CA_UPD_DATE,
    CA_DEV_NEEDED,
    CA_LAFD_DEV_1,
    CA_RSK_ASS,
    CA_DEV_MIT,
    CA_DEV_INITIATOR,
    CA_DEV_APPROVER,
    CA_LAFD_DEV_NEEDED,
    CA_LAFD_DEV_2,
    CA_LAFD_RSK_ASS,
    CA_LAFD_MIT,
    CA_LAFD_DEV_INITIATOR,
    CA_LAFD_DEV_APPROVER, 
    CA_SCE
    ) VALUES (
    NEW_CA_ID,
    P_CA_REC_TAG,
    P_CA_LAST_DATE,
    P_CA_TASK_REF,
    P_CA_TASK_DESC,
    P_CA_TARGET_DATE,
    P_CA_TASK_TYPE,
    P_CA_TASK_FREQ,
    P_CA_HRS_NEEDED,
    P_CA_FREQ_JUST,
    P_CA_NEXT_TARGET_DATE,
    P_CA_UPD_BY,
    P_CA_UPD_DATE,
    P_CA_DEV_NEEDED,
    P_CA_LAFD_DEV_1,
    P_CA_RSK_ASS,
    P_CA_DEV_MIT,
    P_CA_DEV_INITIATOR,
    P_CA_DEV_APPROVER,
    P_CA_LAFD_DEV_NEEDED,
    P_CA_LAFD_DEV_2,
    P_CA_LAFD_RSK_ASS,
    P_CA_LAFD_MIT,
    P_CA_LAFD_DEV_INITIATOR,
    P_CA_LAFD_DEV_APPROVER, 
    P_CA_SCE
  );
  COMMIT;

  V_EVT_LOG:=SP_INSERT_TBL_EVENT_LOG(P_USER,'TBL_CA','INSERT SUCCESS: #' || NEW_CA_ID);

  RETURN NEW_CA_ID;
EXCEPTION
  WHEN OTHERS THEN
  V_EVT_LOG:=SP_INSERT_TBL_EVENT_LOG(P_USER,'TBL_CA','INSERT FAIL: #' || NEW_CA_ID || '; ERR: ' || SQLCODE || '-' || SQLERRM);
    ROLLBACK;
    RETURN -1;
END SP_INSERT_TBL_CA;

/
--------------------------------------------------------
--  DDL for Function SP_INSERT_TBL_CHD_HEADER
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE FUNCTION "IMSA"."SP_INSERT_TBL_CHD_HEADER" 
(
  P_MODULE IN  VARCHAR2 DEFAULT 'FS'
  , P_CHD_HDR_ID IN NUMBER DEFAULT NULL
  , P_CHD_HDR_ASSET_ID IN NUMBER DEFAULT NULL
  , P_CHD_HDR_SAMP_DATE IN DATE DEFAULT NULL
  , P_CHD_HDR_ANA_VEND IN NUMBER DEFAULT NULL
  , P_CHD_HDR_STATUS IN NUMBER DEFAULT NULL
  , P_CHD_HDR_COMMENTS IN VARCHAR2 DEFAULT NULL
  , P_DAT_TYPE IN NUMBER DEFAULT 1
  , P_COLOR_MODE IN VARCHAR2 DEFAULT 'ACTION_COLOR'
  , P_USER IN VARCHAR2 DEFAULT 'IMSA ADMIN'
)
  RETURN NUMBER AS 
  V_NEW_ID NUMBER;
  V_SUB_MODULE NUMBER;
  V_EVT_LOG NUMBER;
BEGIN
    V_SUB_MODULE:= SP_CH_SUB_MOD_NO(P_MODULE);
    V_NEW_ID:=SP_NEW_TABLE_PK_NO('TBL_CHD_HEADER', 'CHD_HDR_ID');

     INSERT INTO  TBL_CHD_HEADER (
        CHD_HDR_ID,
        CHD_HDR_ASSET_ID,
        CHD_HDR_SAMP_DATE,
        CHD_HDR_ANA_VEND,
        CHD_HDR_STATUS,
        CHD_HDR_COMMENTS,
        CHD_HDR_TYPE
     ) VALUES (
        V_NEW_ID,
        P_CHD_HDR_ASSET_ID,
        P_CHD_HDR_SAMP_DATE,
        P_CHD_HDR_ANA_VEND,
        P_CHD_HDR_STATUS,
        P_CHD_HDR_COMMENTS,
        V_SUB_MODULE
     );

  COMMIT;

  V_EVT_LOG:=SP_INSERT_TBL_EVENT_LOG(P_USER,'TBL_CHD_HEADER','INSERT SUCCESS: #' || V_NEW_ID);
  RETURN V_NEW_ID;
EXCEPTION
 WHEN OTHERS THEN
    ROLLBACK;
    V_EVT_LOG:=SP_INSERT_TBL_EVENT_LOG(P_USER,'TBL_CHD_HEADER','INSERT FAIL: #' || V_NEW_ID || '; ERR: ' || SQLCODE || '-' || SQLERRM);
    RETURN -1;
END SP_INSERT_TBL_CHD_HEADER;

/
--------------------------------------------------------
--  DDL for Function SP_INSERT_TBL_DESIGN_DATA_KP
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE FUNCTION "IMSA"."SP_INSERT_TBL_DESIGN_DATA_KP" 
(
  P_DD_KP_PARAM_ID IN NUMBER DEFAULT NULL, 
  P_DD_PARAM_ID IN NUMBER DEFAULT NULL,
  P_DD_KP_START IN NUMBER DEFAULT NULL, 
  P_DD_KP_END IN NUMBER DEFAULT NULL,
  P_DD_KP_PARAM_VALUE IN VARCHAR2 DEFAULT NULL,
  P_USER IN VARCHAR2 DEFAULT 'IMSA ADMIN'
) RETURN NUMBER AS 
  V_DD_KP_PARAM_UNIT NUMBER;
  V_NEW_DD_KP_PARAM_ID NUMBER:=SP_NEW_TABLE_PK_NO('TBL_DESIGN_DATA_KP', 'DD_KP_PARAM_ID');
  V_EVT_LOG NUMBER;
BEGIN
  SELECT DD_PARAM_UNIT 
  INTO V_DD_KP_PARAM_UNIT 
  FROM TBL_DESIGN_DATA_MAIN WHERE DD_ID=P_DD_PARAM_ID;

  INSERT INTO TBL_DESIGN_DATA_KP(
    DD_KP_PARAM_ID, DD_PARAM_ID,
    DD_KP_START, DD_KP_END,
    DD_KP_PARAM_VALUE, DD_KP_PARAM_UNIT
    ) VALUES (
    V_NEW_DD_KP_PARAM_ID, P_DD_PARAM_ID,
    P_DD_KP_START, P_DD_KP_END,
    P_DD_KP_PARAM_VALUE, V_DD_KP_PARAM_UNIT
    );
  COMMIT;

  V_EVT_LOG:=SP_INSERT_TBL_EVENT_LOG(P_USER,'TBL_ANOM_MAIN','INSERT SUCCESS: #' || V_NEW_DD_KP_PARAM_ID);
  RETURN V_NEW_DD_KP_PARAM_ID;
EXCEPTION
  WHEN OTHERS THEN
    ROLLBACK;
    V_EVT_LOG:=SP_INSERT_TBL_EVENT_LOG(P_USER,'TBL_ANOM_MAIN','INSERT FAIL: #' || V_NEW_DD_KP_PARAM_ID || '; ERR: ' || SQLCODE || '-' || SQLERRM);
    RETURN -1;
END SP_INSERT_TBL_DESIGN_DATA_KP;

/
--------------------------------------------------------
--  DDL for Function SP_INSERT_TBL_DESIGN_DATA_MAIN
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE FUNCTION "IMSA"."SP_INSERT_TBL_DESIGN_DATA_MAIN" 
(
  P_DD_ID IN NUMBER DEFAULT NULL
, P_DD_ASSET IN NUMBER DEFAULT NULL
, P_DD_PARAM IN NUMBER DEFAULT NULL
, P_DD_PARAM_VALUE IN VARCHAR2 DEFAULT NULL
, P_DD_PARAM_UNIT IN NUMBER DEFAULT NULL
, P_DD_PARAM_NOTES IN VARCHAR2 DEFAULT NULL
, P_DD_PARAM_REF IN VARCHAR2 DEFAULT NULL
, P_DD_UPDATE_DATE IN DATE DEFAULT NULL
  , P_DAT_TYPE IN NUMBER DEFAULT 1
  , P_COLOR_MODE IN VARCHAR2 DEFAULT 'ACTION_COLOR'
  ,P_USER IN VARCHAR2 DEFAULT 'IMSA ADMIN'
)   
RETURN NUMBER AS 
  NEW_DD_ID NUMBER:=SP_NEW_TABLE_PK_NO('TBL_DESIGN_DATA_MAIN', 'DD_ID');
  V_EVT_LOG NUMBER;
BEGIN
  INSERT INTO TBL_DESIGN_DATA_MAIN (
    DD_ID 
  , DD_ASSET 
  , DD_PARAM 
  , DD_PARAM_VALUE 
  , DD_PARAM_UNIT 
  , DD_PARAM_NOTES
  , DD_PARAM_REF 
  , DD_UPDATE_DATE
  ) VALUES (
    NEW_DD_ID 
  , P_DD_ASSET 
  , P_DD_PARAM 
  , P_DD_PARAM_VALUE 
  , P_DD_PARAM_UNIT 
  , P_DD_PARAM_NOTES
  , P_DD_PARAM_REF 
  , P_DD_UPDATE_DATE
  );
  COMMIT;

  V_EVT_LOG:=SP_INSERT_TBL_EVENT_LOG(P_USER,'TBL_DESIGN_DATA_MAIN','INSERT SUCCESS: #' || NEW_DD_ID);

  RETURN NEW_DD_ID;
EXCEPTION
  WHEN OTHERS THEN
  V_EVT_LOG:=SP_INSERT_TBL_EVENT_LOG(P_USER,'TBL_DESIGN_DATA_MAIN','INSERT FAIL: #' || NEW_DD_ID || '; ERR: ' || SQLCODE || '-' || SQLERRM);
    ROLLBACK;
    RETURN -1;
END SP_INSERT_TBL_DESIGN_DATA_MAIN;

/
--------------------------------------------------------
--  DDL for Function SP_INSERT_TBL_EVENT_LOG
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE FUNCTION "IMSA"."SP_INSERT_TBL_EVENT_LOG" 
(
  P_EVT_LOG_USER_ID IN VARCHAR2 DEFAULT NULL
, P_EVT_LOG_MODULE IN VARCHAR2 DEFAULT NULL
, P_EVT_LOG_DETAIL IN VARCHAR2 DEFAULT NULL
) RETURN NUMBER AS
BEGIN
  INSERT INTO TBL_EVENT_LOG (
    EVT_LOG_NO 
  , EVT_LOG_USER_ID 
  , EVT_LOG_DATE_TIME 
  , EVT_LOG_MODULE
  , EVT_LOG_DETAIL
  ) VALUES (
    SP_NEW_TABLE_PK_NO('TBL_EVENT_LOG', 'EVT_LOG_NO')
  , P_EVT_LOG_USER_ID 
  , CURRENT_DATE 
  , P_EVT_LOG_MODULE 
  , P_EVT_LOG_DETAIL 
  );
  COMMIT;
  RETURN 1;
EXCEPTION
  WHEN OTHERS THEN
    ROLLBACK;
    RETURN -1;
END SP_INSERT_TBL_EVENT_LOG;

/
--------------------------------------------------------
--  DDL for Function SP_INSERT_TBL_RBI_CB
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE FUNCTION "IMSA"."SP_INSERT_TBL_RBI_CB" 
(
  P_RBI_CB_ID IN NUMBER DEFAULT NULL
,  P_RBI_CB_NAME IN VARCHAR2 DEFAULT NULL
, P_USER IN VARCHAR2 DEFAULT NULL
) RETURN NUMBER AS 
  NEW_RBI_CB_ID NUMBER:=SP_NEW_TABLE_PK_NO('TBL_RBI_CB', 'RBI_CB_ID');
  V_EVT_LOG NUMBER;
BEGIN
  INSERT INTO TBL_RBI_CB (
    RBI_CB_ID
  , RBI_CB_NAME
  ) VALUES (
    NEW_RBI_CB_ID
  , P_RBI_CB_NAME
  );
  COMMIT;

  V_EVT_LOG:=SP_INSERT_TBL_EVENT_LOG(P_USER,'TBL_RBI_CB','INSERT SUCCESS: #' || NEW_RBI_CB_ID);

  RETURN NEW_RBI_CB_ID;
EXCEPTION
  WHEN OTHERS THEN
    ROLLBACK;
    --Record event log.
    V_EVT_LOG:=SP_INSERT_TBL_EVENT_LOG(P_USER, 'TBL_RBI_CB', 'INSERT FAIL:  #' || NEW_RBI_CB_ID || '; ERR: ' || SQLCODE || '-' || SQLERRM);
    RETURN -1;
END SP_INSERT_TBL_RBI_CB;

/
--------------------------------------------------------
--  DDL for Function SP_INSERT_TBL_RBI_CB_POF
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE FUNCTION "IMSA"."SP_INSERT_TBL_RBI_CB_POF" 
(
  P_RBI_CB_POF_POF_ID IN NUMBER DEFAULT NULL,
  P_RBI_CB_POF_CB_ID IN VARCHAR2 DEFAULT NULL,
  P_USER IN VARCHAR2 DEFAULT NULL
) RETURN NUMBER AS 
  TYPE TBL_RBI_CB_POF_TYPE IS TABLE OF TBL_RBI_CB_POF%ROWTYPE;TBL_RBI_CB_POF_TMP TBL_RBI_CB_POF_TYPE;
  V_RC SYS_REFCURSOR;
  --CURSOR C1 IS SELECT * FROM TBL_RBI_CB_POF WHERE RBI_CB_POF_POF_ID=P_RBI_CB_POF_POF_ID AND RBI_CB_POF_CB_ID IN (
  --  (SELECT REGEXP_SUBSTR(P_RBI_CB_POF_CB_ID,'[^,]+{1}',1,LEVEL) FROM DUAL CONNECT BY LEVEL <= LENGTH(REGEXP_REPLACE(P_RBI_CB_POF_CB_ID,'[^,]*')) + 1)
  --);

  TYPE V_CB_ID_EXISTING_TYPE IS TABLE OF NUMBER INDEX BY BINARY_INTEGER; V_CB_ID_EXISTING V_CB_ID_EXISTING_TYPE; 
  V_CB_ID_COUNT BINARY_INTEGER; V_CB_ID_ARRAY DBMS_UTILITY.lname_array; V_CB_ID NUMBER;  
  V_CB_ID_EXISTS NUMBER:=0;

  V_CB_POF_ID NUMBER:=-1;
  V_RBI_CB_POF_CB_ID VARCHAR2(4000):=P_RBI_CB_POF_CB_ID;
  V_EVT_LOG NUMBER;
  BEGIN
    OPEN V_RC FOR SELECT * FROM TBL_RBI_CB_POF WHERE RBI_CB_POF_POF_ID=P_RBI_CB_POF_POF_ID AND RBI_CB_POF_CB_ID IN (
      (SELECT REGEXP_SUBSTR(P_RBI_CB_POF_CB_ID,'[^,]+{1}',1,LEVEL) FROM DUAL CONNECT BY LEVEL <= LENGTH(REGEXP_REPLACE(P_RBI_CB_POF_CB_ID,'[^,]*')) + 1)
      );
    FETCH V_RC BULK COLLECT INTO TBL_RBI_CB_POF_TMP;
    CLOSE V_RC;

    DELETE FROM TBL_RBI_CB_POF WHERE RBI_CB_POF_POF_ID=P_RBI_CB_POF_POF_ID;

    FOR i IN 1 .. TBL_RBI_CB_POF_TMP.COUNT LOOP
      INSERT INTO TBL_RBI_CB_POF 
        (
          RBI_CB_POF_ID,
          RBI_CB_POF_POF_ID,
          RBI_CB_POF_CB_ID,
          RBI_CB_POF_LAST_CONFIRMED,
          RBI_CB_POF_CONFIRMED_BY,
          RBI_CB_POF_NOTES,
          RBI_CB_POF_CONFIRMED,
          RBI_CB_POF_PLACED
        ) 
        VALUES (
          TBL_RBI_CB_POF_TMP(i).RBI_CB_POF_ID,
          TBL_RBI_CB_POF_TMP(i).RBI_CB_POF_POF_ID,
          TBL_RBI_CB_POF_TMP(i).RBI_CB_POF_CB_ID,
          TBL_RBI_CB_POF_TMP(i).RBI_CB_POF_LAST_CONFIRMED,
          TBL_RBI_CB_POF_TMP(i).RBI_CB_POF_CONFIRMED_BY,
          TBL_RBI_CB_POF_TMP(i).RBI_CB_POF_NOTES,
          TBL_RBI_CB_POF_TMP(i).RBI_CB_POF_CONFIRMED,
          TBL_RBI_CB_POF_TMP(i).RBI_CB_POF_PLACED
          );   
          V_CB_ID_EXISTING(i):=TBL_RBI_CB_POF_TMP(i).RBI_CB_POF_CB_ID; --STORE EXISTING CT IDS.
    END LOOP;

    IF (V_RBI_CB_POF_CB_ID <> '-1') THEN
        --Convert string to array.
        DBMS_UTILITY.COMMA_TO_TABLE(list => REGEXP_REPLACE(V_RBI_CB_POF_CB_ID,'(^|,)','\1x'),tablen => V_CB_ID_COUNT, tab  => V_CB_ID_ARRAY);

        FOR i IN 1 .. V_CB_ID_COUNT LOOP
          V_CB_ID:=SUBSTR(V_CB_ID_ARRAY(i),2);

          --SEARCH ARRAY IF CB ITEM ALREADY EXISTS.
          V_CB_ID_EXISTS := 0;
          FOR J IN 1 .. V_CB_ID_EXISTING.COUNT LOOP
            IF V_CB_ID_EXISTING(J) =  V_CB_ID THEN
              V_CB_ID_EXISTS := 1;
            END IF;
          END LOOP;
            -- dbms_output.put_line(V_CB_ID_EXISTS || '-' || V_CB_ID);
          IF V_CB_ID_EXISTS=0 THEN
            --dbms_output.put_line('REINHARD');
            V_CB_POF_ID:=SP_NEW_TABLE_PK_NO('TBL_RBI_CB_POF', 'RBI_CB_POF_ID');
            INSERT INTO TBL_RBI_CB_POF 
            (
              RBI_CB_POF_ID,
              RBI_CB_POF_POF_ID,
              RBI_CB_POF_CB_ID
            ) 
            VALUES (
              V_CB_POF_ID,
              P_RBI_CB_POF_POF_ID,
              V_CB_ID
              );             
          END IF;
        END LOOP;
    END IF;      

  COMMIT;
  IF (V_CB_POF_ID <> -1) THEN 
    V_EVT_LOG:=SP_INSERT_TBL_EVENT_LOG(P_USER,'TBL_RBI_CB_POF','INSERT SUCCESS: #' || V_RBI_CB_POF_CB_ID);
  END IF;

  RETURN V_CB_POF_ID;
EXCEPTION
  WHEN OTHERS THEN
    ROLLBACK;
    V_EVT_LOG:=SP_INSERT_TBL_EVENT_LOG(P_USER,'TBL_RBI_CB_POF','INSERT FAIL: #' || V_RBI_CB_POF_CB_ID || '; ERR: ' || SQLCODE || '-' || SQLERRM);
        dbms_output.put_line('FAILED');
    RETURN -1;
END SP_INSERT_TBL_RBI_CB_POF;

/
--------------------------------------------------------
--  DDL for Function SP_INSERT_TBL_RBI_MIT
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE FUNCTION "IMSA"."SP_INSERT_TBL_RBI_MIT" 
(
  P_RBI_MIT_ID IN NUMBER DEFAULT NULL
,  P_RBI_MIT_CODE IN VARCHAR2 DEFAULT NULL
, P_RBI_MIT_DESC IN VARCHAR2 DEFAULT NULL
, P_RBI_MIT_TYPE_ID IN NUMBER DEFAULT NULL
, P_USER IN VARCHAR2 DEFAULT NULL
) RETURN NUMBER AS 
  NEW_RBI_MIT_ID NUMBER:=SP_NEW_TABLE_PK_NO('TBL_RBI_MIT', 'RBI_MIT_ID');
  V_EVT_LOG NUMBER;
BEGIN
  INSERT INTO TBL_RBI_MIT (
    RBI_MIT_ID
  , RBI_MIT_CODE
  , RBI_MIT_DESC
  , RBI_MIT_TYPE_ID
  ) VALUES (
    NEW_RBI_MIT_ID
  , P_RBI_MIT_CODE
  , P_RBI_MIT_DESC
  , P_RBI_MIT_TYPE_ID
  );
  COMMIT;
  V_EVT_LOG:=SP_INSERT_TBL_EVENT_LOG(P_USER,'TBL_RBI_MIT','INSERT SUCCESS: #' || NEW_RBI_MIT_ID);

  RETURN NEW_RBI_MIT_ID;
EXCEPTION
  WHEN OTHERS THEN
    ROLLBACK;
    --Record event log.
    V_EVT_LOG:=SP_INSERT_TBL_EVENT_LOG(P_USER, 'TBL_RBI_MIT', 'INSERT FAIL:  #' || NEW_RBI_MIT_ID || '; ERR: ' || SQLCODE || '-' || SQLERRM);
    RETURN -1;
END SP_INSERT_TBL_RBI_MIT;

/
--------------------------------------------------------
--  DDL for Function SP_INSERT_TBL_RBI_MIT_POF
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE FUNCTION "IMSA"."SP_INSERT_TBL_RBI_MIT_POF" 
(
  P_RBI_MIT_POF_POF_ID IN NUMBER DEFAULT NULL,
  P_RBI_MIT_POF_MIT_ID IN VARCHAR2 DEFAULT NULL,
  P_USER IN VARCHAR2 DEFAULT NULL
) RETURN NUMBER AS 
  TYPE TBL_RBI_MIT_POF_TYPE IS TABLE OF TBL_RBI_MIT_POF%ROWTYPE;TBL_RBI_MIT_POF_TMP TBL_RBI_MIT_POF_TYPE;
  V_RC SYS_REFCURSOR;

  TYPE V_MIT_ID_EXISTING_TYPE IS TABLE OF NUMBER INDEX BY BINARY_INTEGER; V_MIT_ID_EXISTING V_MIT_ID_EXISTING_TYPE; 
  V_MIT_ID_COUNT BINARY_INTEGER; V_MIT_ID_ARRAY DBMS_UTILITY.lname_array; V_MIT_ID NUMBER;  
  V_MIT_ID_EXISTS NUMBER:=0;

  V_MIT_POF_ID NUMBER:=-1;
  V_RBI_MIT_POF_MIT_ID VARCHAR2(4000):=P_RBI_MIT_POF_MIT_ID;
  V_EVT_LOG NUMBER;
  BEGIN
    OPEN V_RC FOR SELECT * FROM TBL_RBI_MIT_POF WHERE RBI_MIT_POF_POF_ID=P_RBI_MIT_POF_POF_ID AND RBI_MIT_POF_MIT_ID IN (
      (SELECT REGEXP_SUBSTR(P_RBI_MIT_POF_MIT_ID,'[^,]+{1}',1,LEVEL) FROM DUAL CONNECT BY LEVEL <= LENGTH(REGEXP_REPLACE(P_RBI_MIT_POF_MIT_ID,'[^,]*')) + 1)
      );
    FETCH V_RC BULK COLLECT INTO TBL_RBI_MIT_POF_TMP;
    CLOSE V_RC;

    DELETE FROM TBL_RBI_MIT_POF WHERE RBI_MIT_POF_POF_ID=P_RBI_MIT_POF_POF_ID;

    FOR i IN 1 .. TBL_RBI_MIT_POF_TMP.COUNT LOOP
      INSERT INTO TBL_RBI_MIT_POF 
        (
          RBI_MIT_POF_ID,
          RBI_MIT_POF_POF_ID,
          RBI_MIT_POF_MIT_ID,
          RBI_MIT_POF_FRT_ID,
          RBI_MIT_POF_E_INS,
          RBI_MIT_POF_L_INS,
          RBI_MIT_POF_UPD_DATE,
          RBI_MIT_POF_UPD_BY
        ) 
        VALUES (
          TBL_RBI_MIT_POF_TMP(i).RBI_MIT_POF_ID,
          TBL_RBI_MIT_POF_TMP(i).RBI_MIT_POF_POF_ID,
          TBL_RBI_MIT_POF_TMP(i).RBI_MIT_POF_MIT_ID,
          TBL_RBI_MIT_POF_TMP(i).RBI_MIT_POF_FRT_ID,
          TBL_RBI_MIT_POF_TMP(i).RBI_MIT_POF_E_INS,
          TBL_RBI_MIT_POF_TMP(i).RBI_MIT_POF_L_INS,
          TBL_RBI_MIT_POF_TMP(i).RBI_MIT_POF_UPD_DATE,
          TBL_RBI_MIT_POF_TMP(i).RBI_MIT_POF_UPD_BY
          );   
          V_MIT_ID_EXISTING(i):=TBL_RBI_MIT_POF_TMP(i).RBI_MIT_POF_MIT_ID; --STORE EXISTING CT IDS.
    END LOOP;

    IF (V_RBI_MIT_POF_MIT_ID <> '-1') THEN
        --Convert string to array.
        DBMS_UTILITY.COMMA_TO_TABLE(list => REGEXP_REPLACE(V_RBI_MIT_POF_MIT_ID,'(^|,)','\1x'),tablen => V_MIT_ID_COUNT, tab  => V_MIT_ID_ARRAY);

        FOR i IN 1 .. V_MIT_ID_COUNT LOOP
          V_MIT_ID:=SUBSTR(V_MIT_ID_ARRAY(i),2);

          --SEARCH ARRAY IF MIT ITEM ALREADY EXISTS.
          V_MIT_ID_EXISTS := 0;
          FOR J IN 1 .. V_MIT_ID_EXISTING.COUNT LOOP
            IF V_MIT_ID_EXISTING(J) =  V_MIT_ID THEN
              V_MIT_ID_EXISTS := 1;
            END IF;
          END LOOP;
            -- dbms_output.put_line(V_MIT_ID_EXISTS || '-' || V_MIT_ID);
          IF V_MIT_ID_EXISTS=0 THEN
            --dbms_output.put_line('REINHARD');
            V_MIT_POF_ID:=SP_NEW_TABLE_PK_NO('TBL_RBI_MIT_POF', 'RBI_MIT_POF_ID');
            INSERT INTO TBL_RBI_MIT_POF 
            (
              RBI_MIT_POF_ID,
              RBI_MIT_POF_POF_ID,
              RBI_MIT_POF_MIT_ID
            ) 
            VALUES (
              V_MIT_POF_ID,
              P_RBI_MIT_POF_POF_ID,
              V_MIT_ID
              );             
          END IF;
        END LOOP;
    END IF;      

  COMMIT;
  IF (V_MIT_POF_ID <> -1) THEN 
    V_EVT_LOG:=SP_INSERT_TBL_EVENT_LOG(P_USER,'TBL_RBI_MIT_POF','INSERT SUCCESS: #' || V_RBI_MIT_POF_MIT_ID);
  END IF;

  RETURN V_MIT_POF_ID;
EXCEPTION
  WHEN OTHERS THEN
    ROLLBACK;
    V_EVT_LOG:=SP_INSERT_TBL_EVENT_LOG(P_USER,'TBL_RBI_MIT_POF','INSERT FAIL: #' || V_RBI_MIT_POF_MIT_ID || '; ERR: ' || SQLCODE || '-' || SQLERRM);
        dbms_output.put_line('FAILED');
    RETURN -1;
END SP_INSERT_TBL_RBI_MIT_POF;

/
--------------------------------------------------------
--  DDL for Function SP_INSERT_TBL_RBI_POF
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE FUNCTION "IMSA"."SP_INSERT_TBL_RBI_POF" 
(
  P_RBI_POF_NODE_ID IN NUMBER DEFAULT NULL,
  P_RBI_POF_FT_ID IN VARCHAR2 DEFAULT NULL,
  P_RBI_POF_IPOF IN VARCHAR2 DEFAULT NULL,
  P_RBI_POF_IPOF_HEALTH IN VARCHAR2 DEFAULT NULL,
  P_RBI_POF_IPOF_SAFETY IN VARCHAR2 DEFAULT NULL,
  P_RBI_POF_IPOF_ENV IN VARCHAR2 DEFAULT NULL,
  P_RBI_POF_IPOF_ASSET IN VARCHAR2 DEFAULT NULL,
  P_RBI_POF_IPOF_REP IN VARCHAR2 DEFAULT NULL,
  P_USER IN VARCHAR2 DEFAULT NULL
) RETURN NUMBER AS 
  TYPE TBL_RBI_POF_TYPE IS TABLE OF TBL_RBI_POF%ROWTYPE;
  TBL_RBI_POF_TMP TBL_RBI_POF_TYPE;
  V_RC SYS_REFCURSOR;

  TYPE V_FT_ID_EXISTING_TYPE IS TABLE OF NUMBER INDEX BY BINARY_INTEGER; V_FT_ID_EXISTING V_FT_ID_EXISTING_TYPE; 
  V_FT_ID_EXISTS NUMBER:=0;

  V_FT_ID_COUNT BINARY_INTEGER; V_FT_ID_ARRAY DBMS_UTILITY.lname_array; V_FT_ID NUMBER:=-1;
  V_IPOF_COUNT BINARY_INTEGER; V_IPOF_ARRAY DBMS_UTILITY.lname_array; V_IPOF NUMBER:=-1;
  V_IPOF_HEALTH_COUNT BINARY_INTEGER; V_IPOF_HEALTH_ARRAY DBMS_UTILITY.lname_array; V_IPOF_HEALTH NUMBER:=-1;
  V_IPOF_SAFETY_COUNT BINARY_INTEGER; V_IPOF_SAFETY_ARRAY DBMS_UTILITY.lname_array; V_IPOF_SAFETY NUMBER:=-1;
  V_IPOF_ENV_COUNT BINARY_INTEGER; V_IPOF_ENV_ARRAY DBMS_UTILITY.lname_array; V_IPOF_ENV NUMBER:=-1;
  V_IPOF_ASSET_COUNT BINARY_INTEGER; V_IPOF_ASSET_ARRAY DBMS_UTILITY.lname_array; V_IPOF_ASSET NUMBER:=-1;
  V_IPOF_REP_COUNT BINARY_INTEGER; V_IPOF_REP_ARRAY DBMS_UTILITY.lname_array; V_IPOF_REP NUMBER:=-1;

  V_POF_ID NUMBER:=-1;
  V_RBI_POF_FT_ID VARCHAR2(4000):=P_RBI_POF_FT_ID;
  V_EVT_LOG NUMBER;
  BEGIN
    OPEN V_RC FOR SELECT * FROM TBL_RBI_POF WHERE RBI_POF_NODE_ID=P_RBI_POF_NODE_ID AND RBI_POF_FT_ID IN (
      (SELECT REGEXP_SUBSTR(P_RBI_POF_FT_ID,'[^,]+{1}',1,LEVEL) FROM DUAL CONNECT BY LEVEL <= LENGTH(REGEXP_REPLACE(P_RBI_POF_FT_ID,'[^,]*')) + 1)
      )  ORDER BY RBI_POF_FT_ID;
    FETCH V_RC BULK COLLECT INTO TBL_RBI_POF_TMP;
    CLOSE V_RC;
        --DBMS_OUTPUT.PUT_LINE(TBL_RBI_POF_TMP.COUNT);

    DELETE FROM TBL_RBI_POF WHERE RBI_POF_NODE_ID=P_RBI_POF_NODE_ID;

    IF (V_RBI_POF_FT_ID <> '-1') THEN
      --Convert string to array FIRST, coz IPOF values might be updated so use the passed parameter in Delete and INSERT old records routine.
      DBMS_UTILITY.COMMA_TO_TABLE (list   => REGEXP_REPLACE(V_RBI_POF_FT_ID,'(^|,)','\1x') ,tablen => V_FT_ID_COUNT ,tab => V_FT_ID_ARRAY);
      DBMS_UTILITY.COMMA_TO_TABLE (list   => REGEXP_REPLACE(P_RBI_POF_IPOF,'(^|,)','\1x') ,tablen => V_IPOF_COUNT ,tab => V_IPOF_ARRAY);
      DBMS_UTILITY.COMMA_TO_TABLE (list   => REGEXP_REPLACE(P_RBI_POF_IPOF_HEALTH,'(^|,)','\1x') ,tablen => V_IPOF_HEALTH_COUNT ,tab => V_IPOF_HEALTH_ARRAY);
      DBMS_UTILITY.COMMA_TO_TABLE (list   => REGEXP_REPLACE(P_RBI_POF_IPOF_SAFETY,'(^|,)','\1x') ,tablen => V_IPOF_SAFETY_COUNT ,tab => V_IPOF_SAFETY_ARRAY);
      DBMS_UTILITY.COMMA_TO_TABLE (list   => REGEXP_REPLACE(P_RBI_POF_IPOF_ENV,'(^|,)','\1x') ,tablen => V_IPOF_ENV_COUNT ,tab => V_IPOF_ENV_ARRAY);
      DBMS_UTILITY.COMMA_TO_TABLE (list   => REGEXP_REPLACE(P_RBI_POF_IPOF_ASSET,'(^|,)','\1x') ,tablen => V_IPOF_ASSET_COUNT ,tab => V_IPOF_ASSET_ARRAY);
      DBMS_UTILITY.COMMA_TO_TABLE (list   => REGEXP_REPLACE(P_RBI_POF_IPOF_REP,'(^|,)','\1x') ,tablen => V_IPOF_REP_COUNT ,tab => V_IPOF_REP_ARRAY);

      FOR i IN 1 .. TBL_RBI_POF_TMP.COUNT LOOP
        V_FT_ID_EXISTING(i):=TBL_RBI_POF_TMP(i).RBI_POF_FT_ID; --STORE EXISTING FT IDS.

        FOR j IN 1 .. V_FT_ID_COUNT LOOP
          -- FAILURE THREATS THAT already EXISTS FROM PASSED FAILURE TREATS.
            V_FT_ID:=SUBSTR(V_FT_ID_ARRAY(j),2);
            IF V_FT_ID = TBL_RBI_POF_TMP(i).RBI_POF_FT_ID THEN 
              V_FT_ID_EXISTS := j;
            END IF;
        END LOOP;

        IF V_FT_ID_EXISTS > 0 THEN --if EXISTS FROM PARAMETERS, USED UPDATED VALUES
          V_IPOF:=SUBSTR(V_IPOF_ARRAY(i),2);
          V_IPOF_HEALTH:=SUBSTR(V_IPOF_HEALTH_ARRAY(i),2);
          V_IPOF_SAFETY:=SUBSTR(V_IPOF_SAFETY_ARRAY(i),2);
          V_IPOF_ENV:=SUBSTR(V_IPOF_ENV_ARRAY(i),2);
          V_IPOF_ASSET:=SUBSTR(V_IPOF_ASSET_ARRAY(i),2);
          V_IPOF_REP:=SUBSTR(V_IPOF_REP_ARRAY(i),2);
        ELSE --OTHERWISE USE DATA FROM DATABASE
            V_IPOF:=TBL_RBI_POF_TMP(i).RBI_POF_IPOF;
            V_IPOF_HEALTH:=TBL_RBI_POF_TMP(i).RBI_POF_IPOF_HEALTH;
            V_IPOF_SAFETY:=TBL_RBI_POF_TMP(i).RBI_POF_IPOF_SAFETY;
            V_IPOF_ENV:= TBL_RBI_POF_TMP(i).RBI_POF_IPOF_ENV;
            V_IPOF_ASSET:=TBL_RBI_POF_TMP(i).RBI_POF_IPOF_ASSET;
            V_IPOF_REP:= TBL_RBI_POF_TMP(i).RBI_POF_IPOF_REP;
        END IF;

        INSERT INTO TBL_RBI_POF 
          (
            RBI_POF_ID,
            RBI_POF_NODE_ID,
            RBI_POF_FT_ID,
            RBI_POF_IPOF,
            RBI_POF_IPOF_HEALTH,
            RBI_POF_IPOF_SAFETY,
            RBI_POF_IPOF_ENV,
            RBI_POF_IPOF_ASSET,
            RBI_POF_IPOF_REP,
            RBI_POF_NPOF,
            RBI_POF_NPOF_A,
            RBI_POF_NPOF_B,
            RBI_POF_NPOF_C,
            RBI_POF_NPOF_D,
            RBI_POF_NPOF_E,
            RBI_POF_MIN_POF,
            RBI_POF_CONF_COMMENT,
            RBI_POF_CONF_STATUS,
            RBI_POF_CONF_BY,
            RBI_POF_CONF_DATE,
            RBI_POF_UPDATE_DATE,
            RBI_POF_POF_NOTES,
            RBI_POF_ASS_BY,
            RBI_POF_ASS_DATE,
            RBI_POF_CONF_PREV_INS,
            RBI_POF_ARL_YEARS,
            RBI_POF_AN_CNT
          ) 
          VALUES (
            TBL_RBI_POF_TMP(i).RBI_POF_ID,
            TBL_RBI_POF_TMP(i).RBI_POF_NODE_ID,
            TBL_RBI_POF_TMP(i).RBI_POF_FT_ID,
            V_IPOF,
            V_IPOF_HEALTH,
            V_IPOF_SAFETY,
            V_IPOF_ENV,
            V_IPOF_ASSET,
            V_IPOF_REP,
            TBL_RBI_POF_TMP(i).RBI_POF_NPOF,
            TBL_RBI_POF_TMP(i).RBI_POF_NPOF_A,
            TBL_RBI_POF_TMP(i).RBI_POF_NPOF_B,
            TBL_RBI_POF_TMP(i).RBI_POF_NPOF_C,
            TBL_RBI_POF_TMP(i).RBI_POF_NPOF_D,
            TBL_RBI_POF_TMP(i).RBI_POF_NPOF_E,
            TBL_RBI_POF_TMP(i).RBI_POF_MIN_POF,
            TBL_RBI_POF_TMP(i).RBI_POF_CONF_COMMENT,
            TBL_RBI_POF_TMP(i).RBI_POF_CONF_STATUS,
            TBL_RBI_POF_TMP(i).RBI_POF_CONF_BY,
            TBL_RBI_POF_TMP(i).RBI_POF_CONF_DATE,
            TBL_RBI_POF_TMP(i).RBI_POF_UPDATE_DATE,
            TBL_RBI_POF_TMP(i).RBI_POF_POF_NOTES,
            TBL_RBI_POF_TMP(i).RBI_POF_ASS_BY,
            TBL_RBI_POF_TMP(i).RBI_POF_ASS_DATE, 
            TBL_RBI_POF_TMP(i).RBI_POF_CONF_PREV_INS,
            TBL_RBI_POF_TMP(i).RBI_POF_ARL_YEARS,
            TBL_RBI_POF_TMP(i).RBI_POF_AN_CNT
            );   
      END LOOP;

    --INSERT REMAINING FT ID FROM PASSED PARAM
        FOR i IN 1 .. V_FT_ID_COUNT LOOP
        --ONLY ADD FAILURE THREATS THAT DONT EXISTS.
          V_FT_ID:=SUBSTR(V_FT_ID_ARRAY(i),2);
          --SEARCH ARRAY IF FT ITEM ALREADY EXISTS.
          V_FT_ID_EXISTS := 0;
          FOR J IN 1 .. V_FT_ID_EXISTING.COUNT LOOP
            IF V_FT_ID_EXISTING(J) =  V_FT_ID THEN
              V_FT_ID_EXISTS := 1;
            END IF;
          END LOOP;

          IF V_FT_ID_EXISTS=0 THEN
            V_IPOF:=SUBSTR(V_IPOF_ARRAY(i),2);
            V_IPOF_HEALTH:=SUBSTR(V_IPOF_HEALTH_ARRAY(i),2);
            V_IPOF_SAFETY:=SUBSTR(V_IPOF_SAFETY_ARRAY(i),2);
            V_IPOF_ENV:=SUBSTR(V_IPOF_ENV_ARRAY(i),2);
            V_IPOF_ASSET:=SUBSTR(V_IPOF_ASSET_ARRAY(i),2);
            V_IPOF_REP:=SUBSTR(V_IPOF_REP_ARRAY(i),2);
            V_POF_ID:=SP_NEW_TABLE_PK_NO('TBL_RBI_POF', 'RBI_POF_ID');

            INSERT INTO TBL_RBI_POF 
            (
              RBI_POF_ID,
              RBI_POF_NODE_ID,
              RBI_POF_FT_ID,
              RBI_POF_IPOF,
              RBI_POF_IPOF_HEALTH,
              RBI_POF_IPOF_SAFETY,
              RBI_POF_IPOF_ENV,
              RBI_POF_IPOF_ASSET,
              RBI_POF_IPOF_REP
            ) 
            VALUES (
              V_POF_ID,
              P_RBI_POF_NODE_ID,
              V_FT_ID,
              V_IPOF,
              V_IPOF_HEALTH,
              V_IPOF_SAFETY,
              V_IPOF_ENV,
              V_IPOF_ASSET,
              V_IPOF_REP
              );             
        END IF;
      END LOOP;
    END IF;      

  COMMIT;
  --dbms_output.put_line(V_RBI_POF_FT_ID);
  IF (V_FT_ID <> -1) THEN 
    V_EVT_LOG:=SP_INSERT_TBL_EVENT_LOG(P_USER,'TBL_RBI_POF','INSERT SUCCESS: #' || V_RBI_POF_FT_ID);
  END IF;

  RETURN V_FT_ID;
EXCEPTION
  WHEN OTHERS THEN
    ROLLBACK;
    V_EVT_LOG:=SP_INSERT_TBL_EVENT_LOG(P_USER,'TBL_RBI_POF','INSERT FAIL: #' || V_RBI_POF_FT_ID || '; ERR: ' || SQLCODE || '-' || SQLERRM);
        DBMS_OUTPUT.PUT_LINE('FAILED');
        DBMS_OUTPUT.PUT_LINE (SQLCODE || '-' || SQLERRM);
    RETURN -1;
END SP_INSERT_TBL_RBI_POF;

/
--------------------------------------------------------
--  DDL for Function SP_INSERT_TBL_REFERENCE_FILES
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE FUNCTION "IMSA"."SP_INSERT_TBL_REFERENCE_FILES" 
(
  P_RF_ID IN NUMBER DEFAULT NULL
  ,P_RF_DESC IN VARCHAR2 DEFAULT NULL
  ,P_RF_TYPE IN NUMBER DEFAULT NULL
  ,P_RF_CLASS IN NUMBER DEFAULT NULL
  ,P_RF_UPLDATE IN DATE DEFAULT NULL
  ,P_RF_REF_NO IN VARCHAR2 DEFAULT NULL
  ,P_RF_REVNO IN VARCHAR2 DEFAULT NULL
  ,P_RF_REVDATE IN DATE DEFAULT NULL
  ,P_RF_FILENAME IN VARCHAR2 DEFAULT NULL
  ,P_RF_PATH IN NUMBER DEFAULT NULL
  ,P_RF_REFNOX IN VARCHAR2 DEFAULT NULL
  ,P_RF_CONTRACTOR IN VARCHAR2 DEFAULT NULL
  ,P_RF_ASSET IN NUMBER DEFAULT NULL
  ,P_RF_LLID IN VARCHAR2 DEFAULT NULL
  ,P_RF_UPDBY IN VARCHAR2 DEFAULT NULL
  ,P_RF_UPDDATE IN DATE DEFAULT NULL
  ,P_RF_NOTES IN VARCHAR2 DEFAULT NULL
  ,P_LNK_PROC IN VARCHAR2 DEFAULT NULL
  ,P_HDR_ID IN NUMBER DEFAULT NULL
)
 RETURN NUMBER AS 
  V_SQL VARCHAR2(4000);
  V_NEW_RF_ID NUMBER:=SP_NEW_TABLE_PK_NO('TBL_REFERENCE_FILES', 'RF_ID');
  V_EVT_LOG NUMBER;
BEGIN
  INSERT INTO TBL_REFERENCE_FILES( 
    RF_ID
    ,RF_DESC
    ,RF_TYPE
    ,RF_CLASS
    ,RF_UPLDATE
    ,RF_REF_NO
    ,RF_REVNO
    ,RF_REVDATE
    ,RF_FILENAME
    ,RF_PATH
    ,RF_REFNOX
    ,RF_CONTRACTOR
    ,RF_ASSET
    ,RF_LLID
    ,RF_UPDBY
    ,RF_UPDDATE
    ,RF_NOTES  
  ) VALUES (
    V_NEW_RF_ID
    ,P_RF_DESC
    ,P_RF_TYPE
    ,P_RF_CLASS
    ,P_RF_UPLDATE
    ,P_RF_REF_NO
    ,P_RF_REVNO
    ,P_RF_REVDATE
    ,P_RF_FILENAME
    ,P_RF_PATH
    ,P_RF_REFNOX
    ,P_RF_CONTRACTOR
    ,P_RF_ASSET
    ,P_RF_LLID
    ,P_RF_UPDBY
    ,P_RF_UPDDATE
    ,P_RF_NOTES
  );

  IF (P_LNK_PROC IS NOT NULL) THEN
    EXECUTE IMMEDIATE 'INSERT INTO ' || P_LNK_PROC || ' (LNK_TAG_A,LNK_TAG_B) VALUES (' || V_NEW_RF_ID || ',' || P_HDR_ID || ')';
    IF (P_LNK_PROC='LNK_REF_ANOMMAIN') THEN
      UPDATE TBL_ANOM_MAIN SET AN_ATTACHMENTS=(AN_ATTACHMENTS+1) WHERE AN_ID=P_HDR_ID;    
    END IF;
  END IF;

  COMMIT;  

  V_EVT_LOG:=SP_INSERT_TBL_EVENT_LOG(P_RF_UPDBY,'TBL_REFERENCE_FILES','INSERT SUCCESS: #' || V_NEW_RF_ID);

  RETURN V_NEW_RF_ID;
EXCEPTION
 WHEN OTHERS THEN
    ROLLBACK;
  V_EVT_LOG:=SP_INSERT_TBL_EVENT_LOG(P_RF_UPDBY,'TBL_REFERENCE_FILES','INSERT FAIL: #' || V_NEW_RF_ID || '; ERR: ' || SQLCODE || '-' || SQLERRM);
    RETURN -1;
END SP_INSERT_TBL_REFERENCE_FILES;

/
--------------------------------------------------------
--  DDL for Function SP_INSERT_TBL_SURV_DTL
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE FUNCTION "IMSA"."SP_INSERT_TBL_SURV_DTL" 
(
  P_SURV_HDR_ID IN NUMBER DEFAULT NULL
  , P_SURV_DTL_TIEBACK_IDS IN VARCHAR2 DEFAULT NULL
  , P_SURV_DTL_COMPLETED IN VARCHAR2 DEFAULT NULL
  ,P_USER IN VARCHAR2 DEFAULT 'IMSA ADMIN'
)
  RETURN NUMBER AS 
  L_INPUT_1 VARCHAR2(4000):=P_SURV_DTL_TIEBACK_IDS;
  L_COUNT_1 BINARY_INTEGER;
  L_ARRAY_1 DBMS_UTILITY.lname_array;
  V_SURV_DTL_TIEBACK_ID NUMBER;

  L_INPUT_2 VARCHAR2(4000):=P_SURV_DTL_COMPLETED;
  L_COUNT_2 BINARY_INTEGER;
  L_ARRAY_2 DBMS_UTILITY.lname_array;
  V_SURV_DTL_COMPLETED NUMBER;
  V_EVT_LOG NUMBER;
BEGIN
  --Convert string to array.
  DBMS_UTILITY.COMMA_TO_TABLE
    (list   => REGEXP_REPLACE(L_INPUT_1,'(^|,)','\1x')
    ,tablen => L_COUNT_1
    ,tab    => L_ARRAY_1
    );

  DBMS_UTILITY.COMMA_TO_TABLE
    (list   => REGEXP_REPLACE(L_INPUT_2,'(^|,)','\1x')
    ,tablen => L_COUNT_2
    ,tab    => L_ARRAY_2
    );

    FOR i IN 1 .. L_COUNT_1 LOOP
      V_SURV_DTL_TIEBACK_ID:=SUBSTR(L_ARRAY_1(i),2);
      V_SURV_DTL_COMPLETED:=SUBSTR(L_ARRAY_2(i),2); 
      INSERT INTO TBL_SURV_DTL (SURV_DTL_HDR_ID,SURV_DTL_TIEBACK_ID,SURV_DTL_COMPLETED) VALUES (P_SURV_HDR_ID, V_SURV_DTL_TIEBACK_ID,V_SURV_DTL_COMPLETED);
    END LOOP;  

    V_EVT_LOG:=SP_INSERT_TBL_EVENT_LOG(P_USER,'TBL_SURV_DTL','INSERT SUCCESS: #' || P_SURV_HDR_ID);

  RETURN P_SURV_HDR_ID;
EXCEPTION
 WHEN OTHERS THEN
    ROLLBACK;
    V_EVT_LOG:=SP_INSERT_TBL_EVENT_LOG(P_USER,'TBL_SURV_DTL','INSERT FAIL: #' || P_SURV_HDR_ID || '; ERR: ' || SQLCODE || '-' || SQLERRM);
    RETURN -1;  
END SP_INSERT_TBL_SURV_DTL;

/
--------------------------------------------------------
--  DDL for Function SP_INSERT_TBL_SURV_HDR
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE FUNCTION "IMSA"."SP_INSERT_TBL_SURV_HDR" 
(
  P_SURV_HDR_ID IN NUMBER DEFAULT NULL
  , P_SURV_HDR_HOST_ID IN NUMBER DEFAULT NULL
  , P_SURV_HDR_NOTES IN VARCHAR2 DEFAULT NULL
  , P_SURV_HDR_DATE IN DATE DEFAULT NULL 
  , P_SURV_DTL_TIEBACK_IDS IN VARCHAR2 DEFAULT NULL
  , P_SURV_DTL_COMPLETED IN VARCHAR2 DEFAULT NULL
  ,P_USER IN VARCHAR2 DEFAULT 'IMSA ADMIN'
)
  RETURN NUMBER AS 
  V_SURV_HDR_ID NUMBER:=SP_NEW_TABLE_PK_NO('TBL_SURV_HDR', 'SURV_HDR_ID');
  V_EVT_LOG NUMBER;
BEGIN
  INSERT INTO TBL_SURV_HDR (
    SURV_HDR_ID
    ,SURV_HDR_HOST_ID
    ,SURV_HDR_NOTES
    ,SURV_HDR_DATE
  ) VALUES (
    V_SURV_HDR_ID
    ,P_SURV_HDR_HOST_ID
    ,P_SURV_HDR_NOTES
    ,P_SURV_HDR_DATE
  ); 

  V_SURV_HDR_ID:=SP_INSERT_TBL_SURV_DTL(V_SURV_HDR_ID,P_SURV_DTL_TIEBACK_IDS,P_SURV_DTL_COMPLETED,P_USER);

  COMMIT;
    V_EVT_LOG:=SP_INSERT_TBL_EVENT_LOG(P_USER,'TBL_SURV_HDR','INSERT SUCCESS: #' || V_SURV_HDR_ID);

  RETURN V_SURV_HDR_ID;
EXCEPTION
  WHEN OTHERS THEN
    ROLLBACK;
    V_EVT_LOG:=SP_INSERT_TBL_EVENT_LOG(P_USER,'TBL_SURV_HDR','INSERT FAIL: #' || V_SURV_HDR_ID || '; ERR: ' || SQLCODE || '-' || SQLERRM);
    RETURN -1;
END SP_INSERT_TBL_SURV_HDR;

/
--------------------------------------------------------
--  DDL for Function SP_INSERT_TBL_SVY_HEADER
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE FUNCTION "IMSA"."SP_INSERT_TBL_SVY_HEADER" 
(
  P_SVY_HDR_ID IN NUMBER DEFAULT NULL
  ,P_SVY_HDR_MAIN_ID IN NUMBER DEFAULT NULL
  ,P_SVY_HDR_EVT_ID IN NUMBER DEFAULT NULL
  ,P_SVY_HDR_EVT_NUM IN NUMBER DEFAULT NULL
  ,P_SVY_HDR_NOD_ID IN NUMBER DEFAULT NULL
  ,P_SVY_HDR_START_POS_ID IN NUMBER DEFAULT NULL
  ,P_SVY_HDR_END_POS_ID IN NUMBER DEFAULT NULL
  ,P_SVY_HDR_RECORDER IN VARCHAR2 DEFAULT NULL
  ,P_SVY_HDR_COMMENT IN VARCHAR2 DEFAULT NULL
  ,P_SVY_HDR_UPDATE_DATE IN DATE DEFAULT NULL
  ,P_SVY_HDR_UPDATE_BY IN VARCHAR2 DEFAULT NULL
  ,P_SVY_HDR_COLOUR IN NUMBER DEFAULT NULL
  ,P_SVY_HDR_ASS_DATE IN DATE DEFAULT NULL
  ,P_SVY_HDR_ASS_BY IN VARCHAR2 DEFAULT NULL
  ,P_SVY_HDR_ANOM_ID IN NUMBER DEFAULT NULL
  ,P_SVY_YESNO_A IN NUMBER DEFAULT NULL
  ,P_SVY_YESNO_B IN NUMBER DEFAULT NULL
  ,P_SVY_YESNO_C IN NUMBER DEFAULT NULL
  ,P_SVY_YESNO_D IN NUMBER DEFAULT NULL
  ,P_SVY_YESNO_E IN NUMBER DEFAULT NULL
  ,P_SVY_YESNO_F IN NUMBER DEFAULT NULL
  ,P_SVY_YESNO_G IN NUMBER DEFAULT NULL
  ,P_SVY_YESNO_H IN NUMBER DEFAULT NULL
  ,P_SVY_YESNO_I IN NUMBER DEFAULT NULL
  ,P_SVY_YESNO_J IN NUMBER DEFAULT NULL
  ,P_SVY_TEXT_A IN VARCHAR2 DEFAULT NULL
  ,P_SVY_TEXT_B IN VARCHAR2 DEFAULT NULL
  ,P_SVY_TEXT_C IN VARCHAR2 DEFAULT NULL
  ,P_SVY_TEXT_D IN VARCHAR2 DEFAULT NULL
  ,P_SVY_TEXT_E IN VARCHAR2 DEFAULT NULL
  ,P_SVY_TEXT_F IN VARCHAR2 DEFAULT NULL
  ,P_SVY_TEXT_G IN VARCHAR2 DEFAULT NULL
  ,P_SVY_TEXT_H IN VARCHAR2 DEFAULT NULL
  ,P_SVY_TEXT_I IN VARCHAR2 DEFAULT NULL
  ,P_SVY_TEXT_J IN VARCHAR2 DEFAULT NULL
  ,P_SVY_TEXT_K IN VARCHAR2 DEFAULT NULL
  ,P_SVY_TEXT_L IN VARCHAR2 DEFAULT NULL
  ,P_SVY_TEXT_M IN VARCHAR2 DEFAULT NULL
  ,P_SVY_TEXT_N IN VARCHAR2 DEFAULT NULL
  ,P_SVY_TEXT_O IN VARCHAR2 DEFAULT NULL
  ,P_SVY_TEXT_P IN VARCHAR2 DEFAULT NULL
  ,P_SVY_TEXT_Q IN VARCHAR2 DEFAULT NULL
  ,P_SVY_MEMO_A IN VARCHAR2 DEFAULT NULL
  ,P_SVY_MEMO_B IN VARCHAR2 DEFAULT NULL
  ,P_SVY_MEMO_C IN VARCHAR2 DEFAULT NULL
  ,P_SVY_MEMO_D IN VARCHAR2 DEFAULT NULL
  ,P_SVY_DATETIME_A IN DATE DEFAULT NULL
  ,P_SVY_DATETIME_B IN DATE DEFAULT NULL
  ,P_SVY_DATETIME_C IN DATE DEFAULT NULL
  ,P_SVY_DATETIME_D IN DATE DEFAULT NULL
  ,P_SVY_DATETIME_E IN DATE DEFAULT NULL
  ,P_SVY_DATETIME_F IN DATE DEFAULT NULL
  ,P_SVY_INTEGER_A IN NUMBER DEFAULT NULL
  ,P_SVY_INTEGER_B IN NUMBER DEFAULT NULL
  ,P_SVY_INTEGER_C IN NUMBER DEFAULT NULL
  ,P_SVY_INTEGER_D IN NUMBER DEFAULT NULL
  ,P_SVY_INTEGER_E IN NUMBER DEFAULT NULL
  ,P_SVY_INTEGER_F IN NUMBER DEFAULT NULL
  ,P_SVY_HDR_ASS_DETAILS IN VARCHAR2 DEFAULT NULL
  ,P_AB_HDR_ID IN NUMBER DEFAULT NULL
  ,P_SVY_HDR_PAR_ID IN NUMBER DEFAULT NULL
  ,P_SVY_HDR_ANOM_CODE IN VARCHAR2 DEFAULT NULL
  ,P_SVY_HDR_ANOM_COMMENT IN VARCHAR2 DEFAULT NULL
  ,P_SVY_SINGLE_F IN NUMBER DEFAULT NULL
  ,P_SVY_SINGLE_G IN NUMBER DEFAULT NULL
  ,P_SVY_SINGLE_H IN NUMBER DEFAULT NULL
  ,P_SVY_SINGLE_I IN NUMBER DEFAULT NULL
  ,P_SVY_SINGLE_J IN NUMBER DEFAULT NULL
  ,P_SVY_SINGLE_K IN NUMBER DEFAULT NULL
  ,P_SVY_SINGLE_L IN NUMBER DEFAULT NULL
  ,P_SVY_SINGLE_A IN NUMBER DEFAULT NULL
  ,P_SVY_SINGLE_B IN NUMBER DEFAULT NULL
  ,P_SVY_SINGLE_C IN NUMBER DEFAULT NULL
  ,P_SVY_SINGLE_D IN NUMBER DEFAULT NULL
  ,P_SVY_SINGLE_E IN NUMBER DEFAULT NULL
  ,P_SVY_SINGLE_M IN NUMBER DEFAULT NULL
  ,P_SVY_SINGLE_N IN NUMBER DEFAULT NULL
  --START POSITIONS DATA
  ,P_S_SVY_POS_DATE_TIME IN DATE DEFAULT NULL
  ,P_S_SVY_POS_KP IN NUMBER DEFAULT NULL
  ,P_S_SVY_POS_DEPTH IN NUMBER DEFAULT NULL
  ,P_S_SVY_POS_EASTING IN NUMBER DEFAULT NULL
  ,P_S_SVY_POS_NORTHING IN NUMBER DEFAULT NULL
  ,P_S_SVY_POS_VID_TAG IN NUMBER DEFAULT NULL
  ,P_S_SVY_POS_OFFSET IN NUMBER DEFAULT NULL
  ,P_S_SVY_POS_HEADING IN NUMBER DEFAULT NULL
  ,P_S_SVY_POS_PITCH IN NUMBER DEFAULT NULL
  ,P_S_SVY_POS_ROLL IN NUMBER DEFAULT NULL
  ,P_S_SVY_POS_ALTITUDE IN NUMBER DEFAULT NULL
  ,P_S_SVY_POS_TEMPERATURE IN NUMBER DEFAULT NULL
  ,P_S_SVY_POS_LONGITUDE IN NUMBER DEFAULT NULL
  ,P_S_SVY_POS_LATITUDE IN NUMBER DEFAULT NULL
  ,P_S_SVY_POS_XCOORD IN NUMBER DEFAULT NULL
  ,P_S_SVY_POS_YCOORD IN NUMBER DEFAULT NULL
  ,P_S_SVY_POS_ZCOORD IN NUMBER DEFAULT NULL
  ,P_S_SVY_POS_UPDATE_DATE IN DATE DEFAULT NULL
  ,P_S_SVY_POS_VIDEO_CTR  IN NUMBER DEFAULT NULL
  --END POSITIONS DATA
  ,P_E_SVY_POS_DATE_TIME IN DATE DEFAULT NULL
  ,P_E_SVY_POS_KP IN NUMBER DEFAULT NULL
  ,P_E_SVY_POS_DEPTH IN NUMBER DEFAULT NULL
  ,P_E_SVY_POS_EASTING IN NUMBER DEFAULT NULL
  ,P_E_SVY_POS_NORTHING IN NUMBER DEFAULT NULL
  ,P_E_SVY_POS_VID_TAG IN NUMBER DEFAULT NULL
  ,P_E_SVY_POS_OFFSET IN NUMBER DEFAULT NULL
  ,P_E_SVY_POS_HEADING IN NUMBER DEFAULT NULL
  ,P_E_SVY_POS_PITCH IN NUMBER DEFAULT NULL
  ,P_E_SVY_POS_ROLL IN NUMBER DEFAULT NULL
  ,P_E_SVY_POS_ALTITUDE IN NUMBER DEFAULT NULL
  ,P_E_SVY_POS_TEMPERATURE IN NUMBER DEFAULT NULL
  ,P_E_SVY_POS_LONGITUDE IN NUMBER DEFAULT NULL
  ,P_E_SVY_POS_LATITUDE IN NUMBER DEFAULT NULL
  ,P_E_SVY_POS_XCOORD IN NUMBER DEFAULT NULL
  ,P_E_SVY_POS_YCOORD IN NUMBER DEFAULT NULL
  ,P_E_SVY_POS_ZCOORD IN NUMBER DEFAULT NULL
  ,P_E_SVY_POS_UPDATE_DATE IN DATE DEFAULT NULL
  ,P_E_SVY_POS_VIDEO_CTR  IN NUMBER DEFAULT NULL
  
  ,P_DAT_TYPE IN NUMBER DEFAULT 1
  ,P_COLOR_MODE IN VARCHAR2 DEFAULT 'ACTION_COLOR'
)   
RETURN NUMBER AS 
  NEW_SVY_HDR_ID NUMBER:=SP_NEW_TABLE_PK_NO('TBL_SVY_HEADER', 'SVY_HDR_ID');
  NEW_S_SVY_POS_ID NUMBER:=SP_NEW_TABLE_PK_NO('TBL_SVY_POSITION', 'SVY_POS_ID');
  NEW_E_SVY_POS_ID NUMBER:=SP_NEW_TABLE_PK_NO('TBL_SVY_POSITION', 'SVY_POS_ID',1);
  V_POS_EVT NUMBER;
  V_EVT_LOG NUMBER;
BEGIN
  --INSERT SURVEY POSITION (START).
  V_POS_EVT:=SP_INSERT_TBL_SVY_POSITION
    (
      NEW_S_SVY_POS_ID,
      P_S_SVY_POS_DATE_TIME,
      P_S_SVY_POS_KP,
      P_S_SVY_POS_DEPTH,
      P_S_SVY_POS_EASTING,
      P_S_SVY_POS_NORTHING,
      P_S_SVY_POS_VID_TAG,
      P_S_SVY_POS_OFFSET,
      P_S_SVY_POS_HEADING,
      P_S_SVY_POS_PITCH,
      P_S_SVY_POS_ROLL,
      P_S_SVY_POS_ALTITUDE,
      P_S_SVY_POS_TEMPERATURE,
      P_S_SVY_POS_LONGITUDE,
      P_S_SVY_POS_LATITUDE,
      P_S_SVY_POS_XCOORD,
      P_S_SVY_POS_YCOORD,
      P_S_SVY_POS_ZCOORD,
      P_S_SVY_POS_UPDATE_DATE,
      P_S_SVY_POS_VIDEO_CTR
    );

  IF (V_POS_EVT = -1) THEN --IF START POSITION IS FAILED RETURN NULL
    RETURN NULL;
  ELSE
   --INSERT SURVEY POSITION (END).
    V_POS_EVT:=SP_INSERT_TBL_SVY_POSITION
      (
        NEW_E_SVY_POS_ID,
        P_E_SVY_POS_DATE_TIME,
        P_E_SVY_POS_KP,
        P_E_SVY_POS_DEPTH,
        P_E_SVY_POS_EASTING,
        P_E_SVY_POS_NORTHING,
        P_E_SVY_POS_VID_TAG,
        P_E_SVY_POS_OFFSET,
        P_E_SVY_POS_HEADING,
        P_E_SVY_POS_PITCH,
        P_E_SVY_POS_ROLL,
        P_E_SVY_POS_ALTITUDE,
        P_E_SVY_POS_TEMPERATURE,
        P_E_SVY_POS_LONGITUDE,
        P_E_SVY_POS_LATITUDE,
        P_E_SVY_POS_XCOORD,
        P_E_SVY_POS_YCOORD,
        P_E_SVY_POS_ZCOORD,
        P_E_SVY_POS_UPDATE_DATE,
        P_E_SVY_POS_VIDEO_CTR
      );
    IF (V_POS_EVT=-1) THEN --IF END POSITION INSERT FAILED
      RETURN NULL;
    END IF;
  END IF;

  INSERT INTO TBL_SVY_HEADER (
    SVY_HDR_ID,
    SVY_HDR_MAIN_ID,
    SVY_HDR_EVT_ID,
    SVY_HDR_EVT_NUM,
    SVY_HDR_NOD_ID,
    SVY_HDR_START_POS_ID,
    SVY_HDR_END_POS_ID,
    SVY_HDR_RECORDER,
    SVY_HDR_COMMENT,
    SVY_HDR_UPDATE_DATE,
    SVY_HDR_UPDATE_BY,
    SVY_HDR_COLOUR,
    SVY_HDR_ASS_DATE,
    SVY_HDR_ASS_BY,
    SVY_HDR_ANOM_ID,
    SVY_YESNO_A,
    SVY_YESNO_B,
    SVY_YESNO_C,
    SVY_YESNO_D,
    SVY_YESNO_E,
    SVY_YESNO_F,
    SVY_YESNO_G,
    SVY_YESNO_H,
    SVY_YESNO_I,
    SVY_YESNO_J,
    SVY_TEXT_A,
    SVY_TEXT_B,
    SVY_TEXT_C,
    SVY_TEXT_D,
    SVY_TEXT_E,
    SVY_TEXT_F,
    SVY_TEXT_G,
    SVY_TEXT_H,
    SVY_TEXT_I,
    SVY_TEXT_J,
    SVY_TEXT_K,
    SVY_TEXT_L,
    SVY_TEXT_M,
    SVY_TEXT_N,
    SVY_TEXT_O,
    SVY_TEXT_P,
    SVY_TEXT_Q,
    SVY_MEMO_A,
    SVY_MEMO_B,
    SVY_MEMO_C,
    SVY_MEMO_D,
    SVY_DATETIME_A,
    SVY_DATETIME_B,
    SVY_DATETIME_C,
    SVY_DATETIME_D,
    SVY_DATETIME_E,
    SVY_DATETIME_F,
    SVY_INTEGER_A,
    SVY_INTEGER_B,
    SVY_INTEGER_C,
    SVY_INTEGER_D,
    SVY_INTEGER_E,
    SVY_INTEGER_F,
    SVY_HDR_ASS_DETAILS,
    AB_HDR_ID,
    SVY_HDR_PAR_ID,
    SVY_HDR_ANOM_CODE,
    SVY_HDR_ANOM_COMMENT,
    SVY_SINGLE_F,
    SVY_SINGLE_G,
    SVY_SINGLE_H,
    SVY_SINGLE_I,
    SVY_SINGLE_J,
    SVY_SINGLE_K,
    SVY_SINGLE_L,
    SVY_SINGLE_A,
    SVY_SINGLE_B,
    SVY_SINGLE_C,
    SVY_SINGLE_D,
    SVY_SINGLE_E, 
    SVY_SINGLE_M,
    SVY_SINGLE_N
  ) VALUES (
    NEW_SVY_HDR_ID,
    P_SVY_HDR_MAIN_ID,
    P_SVY_HDR_EVT_ID,
    P_SVY_HDR_EVT_NUM,
    P_SVY_HDR_NOD_ID,
    NEW_S_SVY_POS_ID,
    NEW_E_SVY_POS_ID,
    P_SVY_HDR_RECORDER,
    P_SVY_HDR_COMMENT,
    P_SVY_HDR_UPDATE_DATE,
    P_SVY_HDR_UPDATE_BY,
    P_SVY_HDR_COLOUR,
    P_SVY_HDR_ASS_DATE,
    P_SVY_HDR_ASS_BY,
    P_SVY_HDR_ANOM_ID,
    P_SVY_YESNO_A,
    P_SVY_YESNO_B,
    P_SVY_YESNO_C,
    P_SVY_YESNO_D,
    P_SVY_YESNO_E,
    P_SVY_YESNO_F,
    P_SVY_YESNO_G,
    P_SVY_YESNO_H,
    P_SVY_YESNO_I,
    P_SVY_YESNO_J,
    P_SVY_TEXT_A,
    P_SVY_TEXT_B,
    P_SVY_TEXT_C,
    P_SVY_TEXT_D,
    P_SVY_TEXT_E,
    P_SVY_TEXT_F,
    P_SVY_TEXT_G,
    P_SVY_TEXT_H,
    P_SVY_TEXT_I,
    P_SVY_TEXT_J,
    P_SVY_TEXT_K,
    P_SVY_TEXT_L,
    P_SVY_TEXT_M,
    P_SVY_TEXT_N,
    P_SVY_TEXT_O,
    P_SVY_TEXT_P,
    P_SVY_TEXT_Q,
    P_SVY_MEMO_A,
    P_SVY_MEMO_B,
    P_SVY_MEMO_C,
    P_SVY_MEMO_D,
    P_SVY_DATETIME_A,
    P_SVY_DATETIME_B,
    P_SVY_DATETIME_C,
    P_SVY_DATETIME_D,
    P_SVY_DATETIME_E,
    P_SVY_DATETIME_F,
    P_SVY_INTEGER_A,
    P_SVY_INTEGER_B,
    P_SVY_INTEGER_C,
    P_SVY_INTEGER_D,
    P_SVY_INTEGER_E,
    P_SVY_INTEGER_F,
    P_SVY_HDR_ASS_DETAILS,
    P_AB_HDR_ID,
    P_SVY_HDR_PAR_ID,
    P_SVY_HDR_ANOM_CODE,
    P_SVY_HDR_ANOM_COMMENT,
    P_SVY_SINGLE_F,
    P_SVY_SINGLE_G,
    P_SVY_SINGLE_H,
    P_SVY_SINGLE_I,
    P_SVY_SINGLE_J,
    P_SVY_SINGLE_K,
    P_SVY_SINGLE_L,
    P_SVY_SINGLE_A,
    P_SVY_SINGLE_B,
    P_SVY_SINGLE_C,
    P_SVY_SINGLE_D,
    P_SVY_SINGLE_E, 
    P_SVY_SINGLE_M,
    P_SVY_SINGLE_N 
  );

  COMMIT;

  --After updating return new colors of asset tree
  --V_RC:=SP_TREE_COLOR_BY_TAG(P_DAT_TYPE, P_SVY_HDR_NOD_ID, 'V_TBL_SVY_HEADER_TREE',P_COLOR_MODE);

  RETURN NEW_SVY_HDR_ID;
EXCEPTION
  WHEN OTHERS THEN
    ROLLBACK;
  V_EVT_LOG:=SP_INSERT_TBL_EVENT_LOG(P_SVY_HDR_UPDATE_BY,'TBL_SVY_HEADER','INSERT FAIL: #' || NEW_SVY_HDR_ID || '; ERR: ' || SQLCODE || '-' || SQLERRM);
    RETURN -1;
END SP_INSERT_TBL_SVY_HEADER;

/
--------------------------------------------------------
--  DDL for Function SP_INSERT_TBL_SVY_POSITION
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE FUNCTION "IMSA"."SP_INSERT_TBL_SVY_POSITION" 
(
  P_SVY_POS_ID IN NUMBER DEFAULT -1,
  P_SVY_POS_DATE_TIME IN DATE DEFAULT NULL,
  P_SVY_POS_KP IN NUMBER DEFAULT NULL,
  P_SVY_POS_DEPTH IN NUMBER DEFAULT NULL,
  P_SVY_POS_EASTING IN NUMBER DEFAULT NULL,
  P_SVY_POS_NORTHING IN NUMBER DEFAULT NULL,
  P_SVY_POS_VID_TAG IN NUMBER DEFAULT NULL,
  P_SVY_POS_OFFSET IN NUMBER DEFAULT NULL,
  P_SVY_POS_HEADING IN NUMBER DEFAULT NULL,
  P_SVY_POS_PITCH IN NUMBER DEFAULT NULL,
  P_SVY_POS_ROLL IN NUMBER DEFAULT NULL,
  P_SVY_POS_ALTITUDE IN NUMBER DEFAULT NULL,
  P_SVY_POS_TEMPERATURE IN NUMBER DEFAULT NULL,
  P_SVY_POS_LONGITUDE IN NUMBER DEFAULT NULL,
  P_SVY_POS_LATITUDE IN NUMBER DEFAULT NULL,
  P_SVY_POS_XCOORD IN NUMBER DEFAULT NULL,
  P_SVY_POS_YCOORD IN NUMBER DEFAULT NULL,
  P_SVY_POS_ZCOORD IN NUMBER DEFAULT NULL,
  P_SVY_POS_UPDATE_DATE IN DATE DEFAULT NULL,
  P_SVY_POS_VIDEO_CTR  IN NUMBER DEFAULT NULL
)
  RETURN NUMBER AS 
BEGIN
  INSERT INTO TBL_SVY_POSITION (
      SVY_POS_ID,
      SVY_POS_DATE_TIME,
      SVY_POS_KP,
      SVY_POS_DEPTH,
      SVY_POS_EASTING,
      SVY_POS_NORTHING,
      SVY_POS_VID_TAG,
      SVY_POS_OFFSET,
      SVY_POS_HEADING,
      SVY_POS_PITCH,
      SVY_POS_ROLL,
      SVY_POS_ALTITUDE,
      SVY_POS_TEMPERATURE,
      SVY_POS_LONGITUDE,
      SVY_POS_LATITUDE,
      SVY_POS_XCOORD,
      SVY_POS_YCOORD,
      SVY_POS_ZCOORD,
      SVY_POS_UPDATE_DATE,
      SVY_POS_VIDEO_CTR
    ) VALUES (
      P_SVY_POS_ID,
      P_SVY_POS_DATE_TIME,
      P_SVY_POS_KP,
      P_SVY_POS_DEPTH,
      P_SVY_POS_EASTING,
      P_SVY_POS_NORTHING,
      P_SVY_POS_VID_TAG,
      P_SVY_POS_OFFSET,
      P_SVY_POS_HEADING,
      P_SVY_POS_PITCH,
      P_SVY_POS_ROLL,
      P_SVY_POS_ALTITUDE,
      P_SVY_POS_TEMPERATURE,
      P_SVY_POS_LONGITUDE,
      P_SVY_POS_LATITUDE,
      P_SVY_POS_XCOORD,
      P_SVY_POS_YCOORD,
      P_SVY_POS_ZCOORD,
      P_SVY_POS_UPDATE_DATE,
      P_SVY_POS_VIDEO_CTR
  );

  RETURN 1;
EXCEPTION
  WHEN OTHERS THEN
    RETURN -1;
END SP_INSERT_TBL_SVY_POSITION;

/
--------------------------------------------------------
--  DDL for Function SP_INSERT_TBL_USER_COMMENTS
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE FUNCTION "IMSA"."SP_INSERT_TBL_USER_COMMENTS" 
(
  P_UC_FORM_NAME IN VARCHAR2 DEFAULT NULL
, P_UC_DATE_STAMP IN DATE DEFAULT NULL 
, P_UC_RAISED_BY IN VARCHAR2 DEFAULT NULL
, P_UC_COMPANY IN VARCHAR2 DEFAULT NULL
, P_UC_STATUS IN VARCHAR2 DEFAULT NULL
, P_UC_NOTES IN VARCHAR2 DEFAULT NULL
) RETURN NUMBER AS 
  NEW_UC_ID NUMBER:=SP_NEW_TABLE_PK_NO('TBL_USER_COMMENTS', 'UC_ID');
BEGIN
  INSERT INTO TBL_USER_COMMENTS (
    UC_ID
  , UC_FORM_NAME
  , UC_DATE_STAMP
  , UC_RAISED_BY
  , UC_COMPANY
  , UC_STATUS
  , UC_NOTES
  , UC_RESPONSE
  , UC_CLASSIFICATION
  , UC_PRIORITY
  ) VALUES (
    NEW_UC_ID
  , P_UC_FORM_NAME
  , P_UC_DATE_STAMP
  , P_UC_RAISED_BY
  , P_UC_COMPANY
  , P_UC_STATUS
  , P_UC_NOTES
  , null
  , null
  , null
  );
  COMMIT;
  RETURN NEW_UC_ID;
EXCEPTION
  WHEN OTHERS THEN
    ROLLBACK;
    RETURN -1;
END SP_INSERT_TBL_USER_COMMENTS;

/
--------------------------------------------------------
--  DDL for Function SP_LOG_USER
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE FUNCTION "IMSA"."SP_LOG_USER" 
(
 P_USER IN VARCHAR2 DEFAULT 'IMSA ADMIN'
) RETURN NUMBER AS 
  V_EVT_LOG NUMBER;
BEGIN
  V_EVT_LOG:=SP_INSERT_TBL_EVENT_LOG(P_USER,'IMSA','LOGIN');
  RETURN V_EVT_LOG;
END SP_LOG_USER;

/
--------------------------------------------------------
--  DDL for Function SP_LOGOUT_USER
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE FUNCTION "IMSA"."SP_LOGOUT_USER" 
(
  P_USER IN VARCHAR2 DEFAULT 'IMSA ADMIN'
) RETURN VARCHAR2 AS 
  V_EVT_LOG NUMBER;
BEGIN
  V_EVT_LOG:=SP_INSERT_TBL_EVENT_LOG(P_USER,'IMSA','LOGOUT');
  RETURN V_EVT_LOG;
END SP_LOGOUT_USER;

/
--------------------------------------------------------
--  DDL for Function SP_NEW_AN_REF_NO
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE FUNCTION "IMSA"."SP_NEW_AN_REF_NO" 
  RETURN VARCHAR2 AS 
  V_MAX_REF_NO VARCHAR2(10);
  V_SUFFIX VARCHAR2(2):=TO_CHAR(SYSDATE,'YY');
  CUR SYS_REFCURSOR;
BEGIN
  OPEN CUR FOR 
    SELECT MAX(SUBSTR(AN_REF, 4)) FROM TBL_ANOM_MAIN WHERE SUBSTR(AN_REF, 0,2)=V_SUFFIX ORDER BY 1 DESC;
  FETCH CUR INTO V_MAX_REF_NO;

  IF (V_MAX_REF_NO IS NULL) THEN
    V_MAX_REF_NO:='1';
  ELSE
    V_MAX_REF_NO:=TO_NUMBER(V_MAX_REF_NO) + 1;
  END IF;

  V_MAX_REF_NO:=TO_CHAR(V_MAX_REF_NO,'FM0000');
  CLOSE CUR;

  RETURN V_SUFFIX || '-' || V_MAX_REF_NO;
EXCEPTION
  WHEN NO_DATA_FOUND THEN 
    RETURN V_SUFFIX || '-0001';

  RETURN V_MAX_REF_NO;
END SP_NEW_AN_REF_NO;

/
--------------------------------------------------------
--  DDL for Function SP_NEW_TABLE_PK_NO
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE FUNCTION "IMSA"."SP_NEW_TABLE_PK_NO" 
(
  P_TABLE IN VARCHAR2 DEFAULT 'TBL_ANOM_MAIN' 
, P_COL IN VARCHAR2 DEFAULT 'AN_ID' 
, P_ADD IN NUMBER DEFAULT 0
) 
  RETURN NUMBER AS 
  V_MAX_NO NUMBER;
  V_RC SYS_REFCURSOR;
BEGIN
  OPEN V_RC FOR 'SELECT MAX(' || P_COL || ')  FROM ' || P_TABLE || '';
  FETCH V_RC INTO V_MAX_NO;
  CLOSE V_RC;
  IF (V_MAX_NO IS NULL) THEN
    RETURN 1;
  ELSE 
    RETURN V_MAX_NO + 1 + P_ADD;
  END IF;
EXCEPTION
  WHEN NO_DATA_FOUND THEN 
    RETURN 1;
  WHEN OTHERS THEN 
    RETURN 1;
END SP_NEW_TABLE_PK_NO;

/
--------------------------------------------------------
--  DDL for Function SP_REC_EXISTS
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE FUNCTION "IMSA"."SP_REC_EXISTS" 
(
  P_TABLE IN VARCHAR2 DEFAULT NULL,
  P_PK_COL IN VARCHAR2 DEFAULT NULL,
  P_WHERE IN VARCHAR2 DEFAULT NULL 
)  RETURN NUMBER AS 
  V_CNT NUMBER;
  V_RC SYS_REFCURSOR;
BEGIN
  OPEN V_RC FOR 'SELECT ' || P_PK_COL || ' FROM ' || P_TABLE || ' WHERE ' || P_WHERE;
  FETCH V_RC INTO V_CNT;
  CLOSE V_RC;

  IF V_CNT IS NULL THEN
    RETURN -1;
  ELSE 
    RETURN V_CNT;
  END IF;
  RETURN V_CNT;
EXCEPTION
  WHEN NO_DATA_FOUND THEN 
    RETURN -1;
  WHEN OTHERS THEN 
    RETURN -1;
END SP_REC_EXISTS;

/
--------------------------------------------------------
--  DDL for Function SP_REPORT_BY_TREE
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE FUNCTION "IMSA"."SP_REPORT_BY_TREE" 
(
  P_DAT_TYPE IN NUMBER DEFAULT 1,  
  P_DTL_VIEW IN VARCHAR2 DEFAULT 'SYS_Q_RPT_AN_01',
  P_COLS IN VARCHAR2 DEFAULT '*',
  P_ASSET_COL IN VARCHAR2 DEFAULT 'ASSETID',
  P_ASSET_ID IN NUMBER DEFAULT 8956,
  P_WHERE IN CLOB DEFAULT NULL, 
  P_ORDER_BY IN VARCHAR DEFAULT NULL, 
  P_GROUP_BY IN VARCHAR2 DEFAULT NULL
) 
  RETURN SYS_REFCURSOR AS 
  V_RC SYS_REFCURSOR;
  V_WHERE CLOB:='';
  V_ORDER_BY VARCHAR2(1000):='';
  V_GROUP_BY VARCHAR2(1000):='';
BEGIN
  V_WHERE :=' WHERE DATTYPE=' || P_DAT_TYPE; 
  IF P_WHERE IS NOT NULL THEN
    V_WHERE:=' WHERE DATTYPE=' || P_DAT_TYPE || ' AND ' || P_WHERE;
  END IF;

  IF P_ORDER_BY IS NOT NULL THEN
    V_ORDER_BY:=(' ORDER BY ' || P_ORDER_BY);
  END IF;

  IF P_GROUP_BY IS NOT NULL THEN
    V_GROUP_BY:=(' GROUP BY ' || P_GROUP_BY);
  END IF;

  --ADDITIONAL WHERE STATMENTS FOR SPECIFIC REPORTS IF ANY. 
  IF P_DTL_VIEW = 'SYS_Q_RPT_AN_10' THEN
    V_WHERE:=V_WHERE || ' AND PAR_ASSETID=' || P_ASSET_ID;
    V_ORDER_BY:=' ORDER BY TRE_NOD_ORDER ';
  END IF;

  OPEN V_RC FOR 
          'SELECT ' || P_COLS || ' FROM ' || P_DTL_VIEW || ' 
          INNER JOIN
            (SELECT SYS_TREE_STRUC.TRE_DAT_TAG
            FROM SYS_TREE_STRUC
            INNER JOIN SYS_NODES_ATTRIB
            ON SYS_TREE_STRUC.TRE_DAT_TAG                 = SYS_NODES_ATTRIB.REC_TAG
            WHERE SYS_TREE_STRUC.TRE_DAT_TYPE             = ' || P_DAT_TYPE || ' 
              START WITH SYS_TREE_STRUC.TRE_DAT_TAG       = ' || P_ASSET_ID || ' 
              CONNECT BY Prior SYS_TREE_STRUC.TRE_NOD_TAG = SYS_TREE_STRUC.TRE_NOD_TAG_PAR ORDER SIBLINGS BY TRE_NOD_ORDER ASC 
            ) T1 ON T1.TRE_DAT_TAG                        = ' || P_ASSET_COL || ' '         
            || V_WHERE || V_GROUP_BY || V_ORDER_BY || '';

--              CONNECT BY Prior SYS_TREE_STRUC.TRE_NOD_TAG = SYS_TREE_STRUC.TRE_NOD_TAG_PAR ORDER SIBLINGS BY TRE_NOD_ORDER ASC 


  RETURN V_RC;
END SP_REPORT_BY_TREE;

/
--------------------------------------------------------
--  DDL for Function SP_REPORT_BY_TREE_FILTER
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE FUNCTION "IMSA"."SP_REPORT_BY_TREE_FILTER" 
(
  P_DAT_TYPE IN NUMBER DEFAULT 1,  
  P_DTL_VIEW IN VARCHAR2 DEFAULT 'SYS_Q_RPT_AN_01',
  P_COLS IN VARCHAR2 DEFAULT '*',
  P_ASSET_COL IN VARCHAR2 DEFAULT 'ASSETID',
  P_ASSET_ID IN NUMBER DEFAULT 45488,
  P_WHERE IN CLOB DEFAULT NULL, 
  P_ORDER_BY IN VARCHAR DEFAULT NULL, 
  P_ROW_NO_MAX IN NUMBER DEFAULT 100,
  P_ROW_NO_MIN IN NUMBER DEFAULT 0, 
  P_GROUP_BY IN VARCHAR2 DEFAULT NULL
 ,P_AFTER_FILTER_CNT OUT NUMBER
 ,P_BEFORE_FILTER_CNT OUT NUMBER
) 
  RETURN SYS_REFCURSOR AS 
  V_RC SYS_REFCURSOR;
  V_WHERE CLOB:='';
  V_ORDER_BY VARCHAR2(1000):='';
  V_GROUP_BY VARCHAR2(1000):='';
BEGIN
  P_BEFORE_FILTER_CNT:=SP_TABLE_BY_TREE_COUNT_DIST(P_DAT_TYPE,P_DTL_VIEW,P_ASSET_COL,P_ASSET_ID,P_COLS,P_WHERE);
  P_AFTER_FILTER_CNT:=P_BEFORE_FILTER_CNT;-- Since no filtering done, also use before filter count.

  V_WHERE :=' WHERE DATTYPE=' || P_DAT_TYPE; 
  IF P_WHERE IS NOT NULL THEN
    V_WHERE:=' WHERE DATTYPE=' || P_DAT_TYPE || ' AND ' || P_WHERE;
  END IF;

  IF P_ORDER_BY IS NOT NULL THEN
    V_ORDER_BY:=(' ORDER BY ' || P_ORDER_BY);
  END IF;

  IF P_GROUP_BY IS NOT NULL THEN
    V_GROUP_BY:=(' GROUP BY ' || P_GROUP_BY);
  END IF;
  --P_ROW_NO_MAX := 100;
  IF (P_ROW_NO_MAX = -1) THEN
  OPEN V_RC FOR 
    'SELECT * 
        FROM 
        (
          SELECT ROWNUM ROW_NUM,
          T2.* 
          FROM
          (
          SELECT ' || P_COLS || ' FROM ' || P_DTL_VIEW || ' 
          INNER JOIN
            (SELECT SYS_TREE_STRUC.TRE_DAT_TAG
            FROM SYS_TREE_STRUC
            INNER JOIN SYS_NODES_ATTRIB
            ON SYS_TREE_STRUC.TRE_DAT_TAG                 = SYS_NODES_ATTRIB.REC_TAG
            WHERE SYS_TREE_STRUC.TRE_DAT_TYPE             = ' || P_DAT_TYPE || ' 
              START WITH SYS_TREE_STRUC.TRE_DAT_TAG       = ' || P_ASSET_ID || ' 
              CONNECT BY Prior SYS_TREE_STRUC.TRE_NOD_TAG = SYS_TREE_STRUC.TRE_NOD_TAG_PAR
            ) T1 ON T1.TRE_DAT_TAG                        = ' || P_ASSET_COL || ' '         
            || V_WHERE || V_GROUP_BY || V_ORDER_BY || ' 
          ) T2 WHERE ROWNUM <= 100000
      ) WHERE ROW_NUM >= ' || P_ROW_NO_MIN;
  ELSE
    OPEN V_RC FOR 
    'SELECT * 
        FROM 
        (
          SELECT ROWNUM ROW_NUM,
          T2.* 
          FROM
          (
          SELECT ' || P_COLS || ' FROM ' || P_DTL_VIEW || ' 
          INNER JOIN
            (SELECT SYS_TREE_STRUC.TRE_DAT_TAG
            FROM SYS_TREE_STRUC
            INNER JOIN SYS_NODES_ATTRIB
            ON SYS_TREE_STRUC.TRE_DAT_TAG                 = SYS_NODES_ATTRIB.REC_TAG
            WHERE SYS_TREE_STRUC.TRE_DAT_TYPE             = ' || P_DAT_TYPE || ' 
              START WITH SYS_TREE_STRUC.TRE_DAT_TAG       = ' || P_ASSET_ID || ' 
              CONNECT BY Prior SYS_TREE_STRUC.TRE_NOD_TAG = SYS_TREE_STRUC.TRE_NOD_TAG_PAR
            ) T1 ON T1.TRE_DAT_TAG                        = ' || P_ASSET_COL || ' '         
            || V_WHERE || V_GROUP_BY || V_ORDER_BY || ' 
          ) T2 WHERE ROWNUM <= ' || P_ROW_NO_MAX || '
      ) WHERE ROW_NUM >= ' || P_ROW_NO_MIN;
    END IF;

        --|| V_WHERE || V_ORDER_BY || V_GROUP_BY || ' 

  RETURN V_RC;
END SP_REPORT_BY_TREE_FILTER;

/
--------------------------------------------------------
--  DDL for Function SP_SPAN_DETAILS
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE FUNCTION "IMSA"."SP_SPAN_DETAILS" 
(
  SVY IN VARCHAR2 DEFAULT '61,63,59',
  LOC IN NUMBER DEFAULT 9640
)   
RETURN SYS_REFCURSOR AS 
V_RC SYS_REFCURSOR;
V_SUB_Q_WHERE VARCHAR(1000);
BEGIN
 IF (SVY IS NOT NULL AND SVY != '*') THEN
    V_SUB_Q_WHERE:='WHERE SVY_MAIN_ID IN (' ||SVY || ')';
  ELSE 
    V_SUB_Q_WHERE:='';
  END IF;
  --SUBSTR(L.LKP_DESC_A,1) AS C,
  OPEN V_RC FOR 
    'SELECT DISTINCT H.SVY_HDR_MAIN_ID AS sv, 
      (CASE WHEN SP.SVY_POS_KP<=EP.SVY_POS_KP THEN SP.SVY_POS_KP ELSE EP.SVY_POS_KP END) AS ks,
      (CASE WHEN SP.SVY_POS_KP<=EP.SVY_POS_KP THEN EP.SVY_POS_KP ELSE SP.SVY_POS_KP END) AS ke,
      SUBSTR(L.LKP_DESC_A,1,1) AS C,
      H.SVY_INTEGER_A AS h, 
      H.SVY_SINGLE_A AS l, 
      H.SVY_TEXT_A AS sts, 
      H.SVY_TEXT_B AS ste, 
      H.SVY_TEXT_C AS sti, 
      H.SVY_HDR_EVT_ID AS t 
      FROM 
      (  
        SELECT * FROM TBL_SVY_MAIN ' || V_SUB_Q_WHERE || ' ORDER BY TBL_SVY_MAIN.SVY_MAIN_DATE_START DESC
      ) SP_SPAN_SVYSEL 
      INNER JOIN 
      ((((TBL_SVY_HEADER H INNER JOIN TBL_SVY_POSITION SP ON H.SVY_HDR_START_POS_ID = SP.SVY_POS_ID) 
      INNER JOIN TBL_SVY_POSITION EP ON H.SVY_HDR_END_POS_ID = EP.SVY_POS_ID) INNER JOIN SYS_LOOKUPS L ON H.SVY_HDR_COLOUR = L.LKP_ID) 
      INNER JOIN SYS_NODES_ATTRIB ON H.SVY_HDR_NOD_ID = SYS_NODES_ATTRIB.REC_TAG) ON SP_SPAN_SVYSEL.SVY_MAIN_ID = H.SVY_HDR_MAIN_ID
      WHERE ((H.SVY_HDR_EVT_ID=25 Or H.SVY_HDR_EVT_ID=26 Or H.SVY_HDR_EVT_ID=5 Or H.SVY_HDR_EVT_ID=41 Or (H.SVY_HDR_EVT_ID=1 AND UPPER(SVY_TEXT_A) LIKE ''STRAKE%'')) AND 
      (SP.SVY_POS_KP Is Not Null AND EP.SVY_POS_KP Is Not Null) AND    
      (H.SVY_HDR_NOD_ID=' || LOC || '))
      ORDER BY H.SVY_HDR_MAIN_ID DESC, CASE WHEN SP.SVY_POS_KP<=EP.SVY_POS_KP THEN SP.SVY_POS_KP ELSE EP.SVY_POS_KP END';

  RETURN V_RC;
END SP_SPAN_DETAILS;

/
--------------------------------------------------------
--  DDL for Function SP_SPAN_SVYSEL
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE FUNCTION "IMSA"."SP_SPAN_SVYSEL" 
(
  SVY IN VARCHAR2 DEFAULT '61,63,59'
)   
RETURN SYS_REFCURSOR AS 
V_RC SYS_REFCURSOR;
V_SUB_Q_WHERE VARCHAR(1000);
BEGIN
 IF (SVY IS NOT NULL AND SVY != '*') THEN
    V_SUB_Q_WHERE:='WHERE SVY_MAIN_ID IN (' ||SVY || ')';
  ELSE 
    V_SUB_Q_WHERE:='';
  END IF;

  OPEN V_RC FOR 
    'SELECT * FROM TBL_SVY_MAIN ' || V_SUB_Q_WHERE || ' ORDER BY TBL_SVY_MAIN.SVY_MAIN_DATE_START DESC';

  RETURN V_RC;
END SP_SPAN_SVYSEL;

/
--------------------------------------------------------
--  DDL for Function SP_SYS_Q_RPT_DS_01
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE FUNCTION "IMSA"."SP_SYS_Q_RPT_DS_01" 
(
  M IN VARCHAR2 
, Y IN VARCHAR2 
) RETURN SYS_REFCURSOR AS 
  V_RC SYS_REFCURSOR;
BEGIN
  IF (M='JAN' OR M='MAR' OR M='MAY' OR M='JUL' OR M='AUG' OR M='OCT' OR M='DEC') THEN
    RETURN SP_SYS_Q_RPT_DS_01_SUB_1(M,Y);
  ELSIF (M='APR' OR M='JUN' OR M='SEP' OR M='NOV') THEN
    RETURN SP_SYS_Q_RPT_DS_01_SUB_2(M,Y);
  ELSIF (M='FEB') THEN
    IF (Y='08' OR Y='12' OR Y='16' OR Y='20' OR Y='24' OR Y='28' OR Y='32') THEN
      RETURN SP_SYS_Q_RPT_DS_01_SUB_3(M,Y);
    ELSE 
      RETURN SP_SYS_Q_RPT_DS_01_SUB_4(M,Y);
    END IF;
  END IF;
END SP_SYS_Q_RPT_DS_01;

/
--------------------------------------------------------
--  DDL for Function SP_SYS_Q_RPT_DS_01_SUB_1
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE FUNCTION "IMSA"."SP_SYS_Q_RPT_DS_01_SUB_1" 
(
  M IN VARCHAR2 
, Y IN VARCHAR2 
) RETURN SYS_REFCURSOR AS 
  V_RC SYS_REFCURSOR;
BEGIN
  OPEN V_RC FOR 
    SELECT SYS_NODES_ATTRIB_HOST.NODE_DESC HOST,
      SYS_NODES_ATTRIB_TIEBACK.NODE_DESC TIEBACKS,
      NVL(
      (SELECT NVL(TBL_SURV_DTL.SURV_DTL_COMPLETED, 0)
        || '-'
        || TO_CHAR(TO_DATE('01-' || M || '-' || Y, 'DD-MON-YY'), 'D') || '-' || TO_CHAR(TO_DATE('01' || M || Y, 'DDMMYY'), 'YYYYMMDD') COMPLETED
      FROM TBL_SURV_DTL
      LEFT JOIN TBL_SURV_HDR
      ON TBL_SURV_DTL.SURV_DTL_HDR_ID         = TBL_SURV_HDR.SURV_HDR_ID
      WHERE (TBL_SURV_DTL.SURV_DTL_TIEBACK_ID = MAINQRY.TB_TIEBACK_ID
      AND TBL_SURV_HDR.SURV_HDR_DATE          = '01-' || M || '-' || Y)
      OR (TBL_SURV_HDR.SURV_HDR_DATE         IS NULL)
      ), 0
      || '-'
      || TO_CHAR(TO_DATE('01-' || M || '-' || Y, 'DD-MON-YY'), 'D') || '-' || TO_CHAR(TO_DATE('01' || M || Y, 'DDMMYY'), 'YYYYMMDD')) D1,
      NVL(
      (SELECT NVL(TBL_SURV_DTL.SURV_DTL_COMPLETED, 0)
        || '-'
        || TO_CHAR(TO_DATE('02-' || M || '-' || Y, 'DD-MON-YY'), 'D') || '-' || TO_CHAR(TO_DATE('02' || M || Y, 'DDMMYY'), 'YYYYMMDD') COMPLETED
      FROM TBL_SURV_DTL
      LEFT JOIN TBL_SURV_HDR
      ON TBL_SURV_DTL.SURV_DTL_HDR_ID         = TBL_SURV_HDR.SURV_HDR_ID
      WHERE (TBL_SURV_DTL.SURV_DTL_TIEBACK_ID = MAINQRY.TB_TIEBACK_ID
      AND TBL_SURV_HDR.SURV_HDR_DATE          = '02-' || M || '-' || Y)
      OR (TBL_SURV_HDR.SURV_HDR_DATE         IS NULL)
      ), 0
      || '-'
      || TO_CHAR(TO_DATE('02-' || M || '-' || Y, 'DD-MON-YY'), 'D') || '-' || TO_CHAR(TO_DATE('02' || M || Y, 'DDMMYY'), 'YYYYMMDD')) D2,
      NVL(
      (SELECT NVL(TBL_SURV_DTL.SURV_DTL_COMPLETED, 0)
        || '-'
        || TO_CHAR(TO_DATE('03-' || M || '-' || Y, 'DD-MON-YY'), 'D') || '-' || TO_CHAR(TO_DATE('03' || M || Y, 'DDMMYY'), 'YYYYMMDD') COMPLETED
      FROM TBL_SURV_DTL
      LEFT JOIN TBL_SURV_HDR
      ON TBL_SURV_DTL.SURV_DTL_HDR_ID         = TBL_SURV_HDR.SURV_HDR_ID
      WHERE (TBL_SURV_DTL.SURV_DTL_TIEBACK_ID = MAINQRY.TB_TIEBACK_ID
      AND TBL_SURV_HDR.SURV_HDR_DATE          = '03-' || M || '-' || Y)
      OR (TBL_SURV_HDR.SURV_HDR_DATE         IS NULL)
      ), 0
      || '-'
      || TO_CHAR(TO_DATE('03-' || M || '-' || Y, 'DD-MON-YY'), 'D') || '-' || TO_CHAR(TO_DATE('03' || M || Y, 'DDMMYY'), 'YYYYMMDD')) D3,
      NVL(
      (SELECT NVL(TBL_SURV_DTL.SURV_DTL_COMPLETED, 0)
        || '-'
        || TO_CHAR(TO_DATE('04-' || M || '-' || Y, 'DD-MON-YY'), 'D') || '-' || TO_CHAR(TO_DATE('04' || M || Y, 'DDMMYY'), 'YYYYMMDD') COMPLETED
      FROM TBL_SURV_DTL
      LEFT JOIN TBL_SURV_HDR
      ON TBL_SURV_DTL.SURV_DTL_HDR_ID         = TBL_SURV_HDR.SURV_HDR_ID
      WHERE (TBL_SURV_DTL.SURV_DTL_TIEBACK_ID = MAINQRY.TB_TIEBACK_ID
      AND TBL_SURV_HDR.SURV_HDR_DATE          = '04-' || M || '-' || Y)
      OR (TBL_SURV_HDR.SURV_HDR_DATE         IS NULL)
      ), 0
      || '-'
      || TO_CHAR(TO_DATE('04-' || M || '-' || Y, 'DD-MON-YY'), 'D') || '-' || TO_CHAR(TO_DATE('04' || M || Y, 'DDMMYY'), 'YYYYMMDD')) D4,
      NVL(
      (SELECT NVL(TBL_SURV_DTL.SURV_DTL_COMPLETED, 0)
        || '-'
        || TO_CHAR(TO_DATE('05-' || M || '-' || Y, 'DD-MON-YY'), 'D') || '-' || TO_CHAR(TO_DATE('05' || M || Y, 'DDMMYY'), 'YYYYMMDD') COMPLETED
      FROM TBL_SURV_DTL
      LEFT JOIN TBL_SURV_HDR
      ON TBL_SURV_DTL.SURV_DTL_HDR_ID         = TBL_SURV_HDR.SURV_HDR_ID
      WHERE (TBL_SURV_DTL.SURV_DTL_TIEBACK_ID = MAINQRY.TB_TIEBACK_ID
      AND TBL_SURV_HDR.SURV_HDR_DATE          = '05-' || M || '-' || Y)
      OR (TBL_SURV_HDR.SURV_HDR_DATE         IS NULL)
      ), 0
      || '-'
      || TO_CHAR(TO_DATE('05-' || M || '-' || Y, 'DD-MON-YY'), 'D') || '-' || TO_CHAR(TO_DATE('05' || M || Y, 'DDMMYY'), 'YYYYMMDD')) D5,
      NVL(
      (SELECT NVL(TBL_SURV_DTL.SURV_DTL_COMPLETED, 0)
        || '-'
        || TO_CHAR(TO_DATE('06-' || M || '-' || Y, 'DD-MON-YY'), 'D') || '-' || TO_CHAR(TO_DATE('06' || M || Y, 'DDMMYY'), 'YYYYMMDD') COMPLETED
      FROM TBL_SURV_DTL
      LEFT JOIN TBL_SURV_HDR
      ON TBL_SURV_DTL.SURV_DTL_HDR_ID         = TBL_SURV_HDR.SURV_HDR_ID
      WHERE (TBL_SURV_DTL.SURV_DTL_TIEBACK_ID = MAINQRY.TB_TIEBACK_ID
      AND TBL_SURV_HDR.SURV_HDR_DATE          = '06-' || M || '-' || Y)
      OR (TBL_SURV_HDR.SURV_HDR_DATE         IS NULL)
      ), 0
      || '-'
      || TO_CHAR(TO_DATE('06-' || M || '-' || Y, 'DD-MON-YY'), 'D') || '-' || TO_CHAR(TO_DATE('06' || M || Y, 'DDMMYY'), 'YYYYMMDD')) D6,
      NVL(
      (SELECT NVL(TBL_SURV_DTL.SURV_DTL_COMPLETED, 0)
        || '-'
        || TO_CHAR(TO_DATE('07-' || M || '-' || Y, 'DD-MON-YY'), 'D') || '-' || TO_CHAR(TO_DATE('07' || M || Y, 'DDMMYY'), 'YYYYMMDD') COMPLETED
      FROM TBL_SURV_DTL
      LEFT JOIN TBL_SURV_HDR
      ON TBL_SURV_DTL.SURV_DTL_HDR_ID         = TBL_SURV_HDR.SURV_HDR_ID
      WHERE (TBL_SURV_DTL.SURV_DTL_TIEBACK_ID = MAINQRY.TB_TIEBACK_ID
      AND TBL_SURV_HDR.SURV_HDR_DATE          = '07-' || M || '-' || Y)
      OR (TBL_SURV_HDR.SURV_HDR_DATE         IS NULL)
      ), 0
      || '-'
      || TO_CHAR(TO_DATE('07-' || M || '-' || Y, 'DD-MON-YY'), 'D') || '-' || TO_CHAR(TO_DATE('07' || M || Y, 'DDMMYY'), 'YYYYMMDD')) D7,
      NVL(
      (SELECT NVL(TBL_SURV_DTL.SURV_DTL_COMPLETED, 0)
        || '-'
        || TO_CHAR(TO_DATE('08-' || M || '-' || Y, 'DD-MON-YY'), 'D') || '-' || TO_CHAR(TO_DATE('08' || M || Y, 'DDMMYY'), 'YYYYMMDD') COMPLETED
      FROM TBL_SURV_DTL
      LEFT JOIN TBL_SURV_HDR
      ON TBL_SURV_DTL.SURV_DTL_HDR_ID         = TBL_SURV_HDR.SURV_HDR_ID
      WHERE (TBL_SURV_DTL.SURV_DTL_TIEBACK_ID = MAINQRY.TB_TIEBACK_ID
      AND TBL_SURV_HDR.SURV_HDR_DATE          = '08-' || M || '-' || Y)
      OR (TBL_SURV_HDR.SURV_HDR_DATE         IS NULL)
      ), 0
      || '-'
      || TO_CHAR(TO_DATE('08-' || M || '-' || Y, 'DD-MON-YY'), 'D') || '-' || TO_CHAR(TO_DATE('08' || M || Y, 'DDMMYY'), 'YYYYMMDD')) D8,
      NVL(
      (SELECT NVL(TBL_SURV_DTL.SURV_DTL_COMPLETED, 0)
        || '-'
        || TO_CHAR(TO_DATE('09-' || M || '-' || Y, 'DD-MON-YY'), 'D') || '-' || TO_CHAR(TO_DATE('09' || M || Y, 'DDMMYY'), 'YYYYMMDD') COMPLETED
      FROM TBL_SURV_DTL
      LEFT JOIN TBL_SURV_HDR
      ON TBL_SURV_DTL.SURV_DTL_HDR_ID         = TBL_SURV_HDR.SURV_HDR_ID
      WHERE (TBL_SURV_DTL.SURV_DTL_TIEBACK_ID = MAINQRY.TB_TIEBACK_ID
      AND TBL_SURV_HDR.SURV_HDR_DATE          = '09-' || M || '-' || Y)
      OR (TBL_SURV_HDR.SURV_HDR_DATE         IS NULL)
      ), 0
      || '-'
      || TO_CHAR(TO_DATE('09-' || M || '-' || Y, 'DD-MON-YY'), 'D') || '-' || TO_CHAR(TO_DATE('09' || M || Y, 'DDMMYY'), 'YYYYMMDD')) D9,
      NVL(
      (SELECT NVL(TBL_SURV_DTL.SURV_DTL_COMPLETED, 0)
        || '-'
        || TO_CHAR(TO_DATE('10-' || M || '-' || Y, 'DD-MON-YY'), 'D') || '-' || TO_CHAR(TO_DATE('10' || M || Y, 'DDMMYY'), 'YYYYMMDD') COMPLETED
      FROM TBL_SURV_DTL
      LEFT JOIN TBL_SURV_HDR
      ON TBL_SURV_DTL.SURV_DTL_HDR_ID         = TBL_SURV_HDR.SURV_HDR_ID
      WHERE (TBL_SURV_DTL.SURV_DTL_TIEBACK_ID = MAINQRY.TB_TIEBACK_ID
      AND TBL_SURV_HDR.SURV_HDR_DATE          = '10-' || M || '-' || Y)
      OR (TBL_SURV_HDR.SURV_HDR_DATE         IS NULL)
      ), 0
      || '-'
      || TO_CHAR(TO_DATE('10-' || M || '-' || Y, 'DD-MON-YY'), 'D') || '-' || TO_CHAR(TO_DATE('10' || M || Y, 'DDMMYY'), 'YYYYMMDD')) D10,
      NVL(
      (SELECT NVL(TBL_SURV_DTL.SURV_DTL_COMPLETED, 0)
        || '-'
        || TO_CHAR(TO_DATE('11-' || M || '-' || Y, 'DD-MON-YY'), 'D') || '-' || TO_CHAR(TO_DATE('11' || M || Y, 'DDMMYY'), 'YYYYMMDD') COMPLETED
      FROM TBL_SURV_DTL
      LEFT JOIN TBL_SURV_HDR
      ON TBL_SURV_DTL.SURV_DTL_HDR_ID         = TBL_SURV_HDR.SURV_HDR_ID
      WHERE (TBL_SURV_DTL.SURV_DTL_TIEBACK_ID = MAINQRY.TB_TIEBACK_ID
      AND TBL_SURV_HDR.SURV_HDR_DATE          = '11-' || M || '-' || Y)
      OR (TBL_SURV_HDR.SURV_HDR_DATE         IS NULL)
      ), 0
      || '-'
      || TO_CHAR(TO_DATE('11-' || M || '-' || Y, 'DD-MON-YY'), 'D') || '-' || TO_CHAR(TO_DATE('11' || M || Y, 'DDMMYY'), 'YYYYMMDD')) D11,
      NVL(
      (SELECT NVL(TBL_SURV_DTL.SURV_DTL_COMPLETED, 0)
        || '-'
        || TO_CHAR(TO_DATE('12-' || M || '-' || Y, 'DD-MON-YY'), 'D') || '-' || TO_CHAR(TO_DATE('12' || M || Y, 'DDMMYY'), 'YYYYMMDD') COMPLETED
      FROM TBL_SURV_DTL
      LEFT JOIN TBL_SURV_HDR
      ON TBL_SURV_DTL.SURV_DTL_HDR_ID         = TBL_SURV_HDR.SURV_HDR_ID
      WHERE (TBL_SURV_DTL.SURV_DTL_TIEBACK_ID = MAINQRY.TB_TIEBACK_ID
      AND TBL_SURV_HDR.SURV_HDR_DATE          = '12-' || M || '-' || Y)
      OR (TBL_SURV_HDR.SURV_HDR_DATE         IS NULL)
      ), 0
      || '-'
      || TO_CHAR(TO_DATE('12-' || M || '-' || Y, 'DD-MON-YY'), 'D') || '-' || TO_CHAR(TO_DATE('12' || M || Y, 'DDMMYY'), 'YYYYMMDD')) D12,
      NVL(
      (SELECT NVL(TBL_SURV_DTL.SURV_DTL_COMPLETED, 0)
        || '-'
        || TO_CHAR(TO_DATE('13-' || M || '-' || Y, 'DD-MON-YY'), 'D') || '-' || TO_CHAR(TO_DATE('13' || M || Y, 'DDMMYY'), 'YYYYMMDD') COMPLETED
      FROM TBL_SURV_DTL
      LEFT JOIN TBL_SURV_HDR
      ON TBL_SURV_DTL.SURV_DTL_HDR_ID         = TBL_SURV_HDR.SURV_HDR_ID
      WHERE (TBL_SURV_DTL.SURV_DTL_TIEBACK_ID = MAINQRY.TB_TIEBACK_ID
      AND TBL_SURV_HDR.SURV_HDR_DATE          = '13-' || M || '-' || Y)
      OR (TBL_SURV_HDR.SURV_HDR_DATE         IS NULL)
      ), 0
      || '-'
      || TO_CHAR(TO_DATE('13-' || M || '-' || Y, 'DD-MON-YY'), 'D') || '-' || TO_CHAR(TO_DATE('13' || M || Y, 'DDMMYY'), 'YYYYMMDD')) D13,
      NVL(
      (SELECT NVL(TBL_SURV_DTL.SURV_DTL_COMPLETED, 0)
        || '-'
        || TO_CHAR(TO_DATE('14-' || M || '-' || Y, 'DD-MON-YY'), 'D') || '-' || TO_CHAR(TO_DATE('14' || M || Y, 'DDMMYY'), 'YYYYMMDD') COMPLETED
      FROM TBL_SURV_DTL
      LEFT JOIN TBL_SURV_HDR
      ON TBL_SURV_DTL.SURV_DTL_HDR_ID         = TBL_SURV_HDR.SURV_HDR_ID
      WHERE (TBL_SURV_DTL.SURV_DTL_TIEBACK_ID = MAINQRY.TB_TIEBACK_ID
      AND TBL_SURV_HDR.SURV_HDR_DATE          = '14-' || M || '-' || Y)
      OR (TBL_SURV_HDR.SURV_HDR_DATE         IS NULL)
      ), 0
      || '-'
      || TO_CHAR(TO_DATE('14-' || M || '-' || Y, 'DD-MON-YY'), 'D') || '-' || TO_CHAR(TO_DATE('14' || M || Y, 'DDMMYY'), 'YYYYMMDD')) D14,
      NVL(
      (SELECT NVL(TBL_SURV_DTL.SURV_DTL_COMPLETED, 0)
        || '-'
        || TO_CHAR(TO_DATE('15-' || M || '-' || Y, 'DD-MON-YY'), 'D') || '-' || TO_CHAR(TO_DATE('15' || M || Y, 'DDMMYY'), 'YYYYMMDD') COMPLETED
      FROM TBL_SURV_DTL
      LEFT JOIN TBL_SURV_HDR
      ON TBL_SURV_DTL.SURV_DTL_HDR_ID         = TBL_SURV_HDR.SURV_HDR_ID
      WHERE (TBL_SURV_DTL.SURV_DTL_TIEBACK_ID = MAINQRY.TB_TIEBACK_ID
      AND TBL_SURV_HDR.SURV_HDR_DATE          = '15-' || M || '-' || Y)
      OR (TBL_SURV_HDR.SURV_HDR_DATE         IS NULL)
      ), 0
      || '-'
      || TO_CHAR(TO_DATE('15-' || M || '-' || Y, 'DD-MON-YY'), 'D') || '-' || TO_CHAR(TO_DATE('15' || M || Y, 'DDMMYY'), 'YYYYMMDD')) D15,
      NVL(
      (SELECT NVL(TBL_SURV_DTL.SURV_DTL_COMPLETED, 0)
        || '-'
        || TO_CHAR(TO_DATE('16-' || M || '-' || Y, 'DD-MON-YY'), 'D') || '-' || TO_CHAR(TO_DATE('16' || M || Y, 'DDMMYY'), 'YYYYMMDD') COMPLETED
      FROM TBL_SURV_DTL
      LEFT JOIN TBL_SURV_HDR
      ON TBL_SURV_DTL.SURV_DTL_HDR_ID         = TBL_SURV_HDR.SURV_HDR_ID
      WHERE (TBL_SURV_DTL.SURV_DTL_TIEBACK_ID = MAINQRY.TB_TIEBACK_ID
      AND TBL_SURV_HDR.SURV_HDR_DATE          = '16-' || M || '-' || Y)
      OR (TBL_SURV_HDR.SURV_HDR_DATE         IS NULL)
      ), 0
      || '-'
      || TO_CHAR(TO_DATE('16-' || M || '-' || Y, 'DD-MON-YY'), 'D') || '-' || TO_CHAR(TO_DATE('16' || M || Y, 'DDMMYY'), 'YYYYMMDD')) D16,
      NVL(
      (SELECT NVL(TBL_SURV_DTL.SURV_DTL_COMPLETED, 0)
        || '-'
        || TO_CHAR(TO_DATE('17-' || M || '-' || Y, 'DD-MON-YY'), 'D') || '-' || TO_CHAR(TO_DATE('17' || M || Y, 'DDMMYY'), 'YYYYMMDD') COMPLETED
      FROM TBL_SURV_DTL
      LEFT JOIN TBL_SURV_HDR
      ON TBL_SURV_DTL.SURV_DTL_HDR_ID         = TBL_SURV_HDR.SURV_HDR_ID
      WHERE (TBL_SURV_DTL.SURV_DTL_TIEBACK_ID = MAINQRY.TB_TIEBACK_ID
      AND TBL_SURV_HDR.SURV_HDR_DATE          = '17-' || M || '-' || Y)
      OR (TBL_SURV_HDR.SURV_HDR_DATE         IS NULL)
      ), 0
      || '-'
      || TO_CHAR(TO_DATE('17-' || M || '-' || Y, 'DD-MON-YY'), 'D') || '-' || TO_CHAR(TO_DATE('17' || M || Y, 'DDMMYY'), 'YYYYMMDD')) D17,
      NVL(
      (SELECT NVL(TBL_SURV_DTL.SURV_DTL_COMPLETED, 0)
        || '-'
        || TO_CHAR(TO_DATE('18-' || M || '-' || Y, 'DD-MON-YY'), 'D') || '-' || TO_CHAR(TO_DATE('18' || M || Y, 'DDMMYY'), 'YYYYMMDD') COMPLETED
      FROM TBL_SURV_DTL
      LEFT JOIN TBL_SURV_HDR
      ON TBL_SURV_DTL.SURV_DTL_HDR_ID         = TBL_SURV_HDR.SURV_HDR_ID
      WHERE (TBL_SURV_DTL.SURV_DTL_TIEBACK_ID = MAINQRY.TB_TIEBACK_ID
      AND TBL_SURV_HDR.SURV_HDR_DATE          = '18-' || M || '-' || Y)
      OR (TBL_SURV_HDR.SURV_HDR_DATE         IS NULL)
      ), 0
      || '-'
      || TO_CHAR(TO_DATE('18-' || M || '-' || Y, 'DD-MON-YY'), 'D') || '-' || TO_CHAR(TO_DATE('18' || M || Y, 'DDMMYY'), 'YYYYMMDD')) D18,
      NVL(
      (SELECT NVL(TBL_SURV_DTL.SURV_DTL_COMPLETED, 0)
        || '-'
        || TO_CHAR(TO_DATE('19-' || M || '-' || Y, 'DD-MON-YY'), 'D') || '-' || TO_CHAR(TO_DATE('19' || M || Y, 'DDMMYY'), 'YYYYMMDD') COMPLETED
      FROM TBL_SURV_DTL
      LEFT JOIN TBL_SURV_HDR
      ON TBL_SURV_DTL.SURV_DTL_HDR_ID         = TBL_SURV_HDR.SURV_HDR_ID
      WHERE (TBL_SURV_DTL.SURV_DTL_TIEBACK_ID = MAINQRY.TB_TIEBACK_ID
      AND TBL_SURV_HDR.SURV_HDR_DATE          = '19-' || M || '-' || Y)
      OR (TBL_SURV_HDR.SURV_HDR_DATE         IS NULL)
      ), 0
      || '-'
      || TO_CHAR(TO_DATE('19-' || M || '-' || Y, 'DD-MON-YY'), 'D') || '-' || TO_CHAR(TO_DATE('19' || M || Y, 'DDMMYY'), 'YYYYMMDD')) D19,
      NVL(
      (SELECT NVL(TBL_SURV_DTL.SURV_DTL_COMPLETED, 0)
        || '-'
        || TO_CHAR(TO_DATE('20-' || M || '-' || Y, 'DD-MON-YY'), 'D') || '-' || TO_CHAR(TO_DATE('20' || M || Y, 'DDMMYY'), 'YYYYMMDD') COMPLETED
      FROM TBL_SURV_DTL
      LEFT JOIN TBL_SURV_HDR
      ON TBL_SURV_DTL.SURV_DTL_HDR_ID         = TBL_SURV_HDR.SURV_HDR_ID
      WHERE (TBL_SURV_DTL.SURV_DTL_TIEBACK_ID = MAINQRY.TB_TIEBACK_ID
      AND TBL_SURV_HDR.SURV_HDR_DATE          = '20-' || M || '-' || Y)
      OR (TBL_SURV_HDR.SURV_HDR_DATE         IS NULL)
      ), 0
      || '-'
      || TO_CHAR(TO_DATE('20-' || M || '-' || Y, 'DD-MON-YY'), 'D') || '-' || TO_CHAR(TO_DATE('20' || M || Y, 'DDMMYY'), 'YYYYMMDD')) D20,
      NVL(
      (SELECT NVL(TBL_SURV_DTL.SURV_DTL_COMPLETED, 0)
        || '-'
        || TO_CHAR(TO_DATE('21-' || M || '-' || Y, 'DD-MON-YY'), 'D') || '-' || TO_CHAR(TO_DATE('21' || M || Y, 'DDMMYY'), 'YYYYMMDD') COMPLETED
      FROM TBL_SURV_DTL
      LEFT JOIN TBL_SURV_HDR
      ON TBL_SURV_DTL.SURV_DTL_HDR_ID         = TBL_SURV_HDR.SURV_HDR_ID
      WHERE (TBL_SURV_DTL.SURV_DTL_TIEBACK_ID = MAINQRY.TB_TIEBACK_ID
      AND TBL_SURV_HDR.SURV_HDR_DATE          = '21-' || M || '-' || Y)
      OR (TBL_SURV_HDR.SURV_HDR_DATE         IS NULL)
      ), 0
      || '-'
      || TO_CHAR(TO_DATE('21-' || M || '-' || Y, 'DD-MON-YY'), 'D') || '-' || TO_CHAR(TO_DATE('21' || M || Y, 'DDMMYY'), 'YYYYMMDD')) D21,
      NVL(
      (SELECT NVL(TBL_SURV_DTL.SURV_DTL_COMPLETED, 0)
        || '-'
        || TO_CHAR(TO_DATE('22-' || M || '-' || Y, 'DD-MON-YY'), 'D') || '-' || TO_CHAR(TO_DATE('22' || M || Y, 'DDMMYY'), 'YYYYMMDD') COMPLETED
      FROM TBL_SURV_DTL
      LEFT JOIN TBL_SURV_HDR
      ON TBL_SURV_DTL.SURV_DTL_HDR_ID         = TBL_SURV_HDR.SURV_HDR_ID
      WHERE (TBL_SURV_DTL.SURV_DTL_TIEBACK_ID = MAINQRY.TB_TIEBACK_ID
      AND TBL_SURV_HDR.SURV_HDR_DATE          = '22-' || M || '-' || Y)
      OR (TBL_SURV_HDR.SURV_HDR_DATE         IS NULL)
      ), 0
      || '-'
      || TO_CHAR(TO_DATE('22-' || M || '-' || Y, 'DD-MON-YY'), 'D') || '-' || TO_CHAR(TO_DATE('22' || M || Y, 'DDMMYY'), 'YYYYMMDD')) D22,
      NVL(
      (SELECT NVL(TBL_SURV_DTL.SURV_DTL_COMPLETED, 0)
        || '-'
        || TO_CHAR(TO_DATE('23-' || M || '-' || Y, 'DD-MON-YY'), 'D') || '-' || TO_CHAR(TO_DATE('23' || M || Y, 'DDMMYY'), 'YYYYMMDD') COMPLETED
      FROM TBL_SURV_DTL
      LEFT JOIN TBL_SURV_HDR
      ON TBL_SURV_DTL.SURV_DTL_HDR_ID         = TBL_SURV_HDR.SURV_HDR_ID
      WHERE (TBL_SURV_DTL.SURV_DTL_TIEBACK_ID = MAINQRY.TB_TIEBACK_ID
      AND TBL_SURV_HDR.SURV_HDR_DATE          = '23-' || M || '-' || Y)
      OR (TBL_SURV_HDR.SURV_HDR_DATE         IS NULL)
      ), 0
      || '-'
      || TO_CHAR(TO_DATE('23-' || M || '-' || Y, 'DD-MON-YY'), 'D') || '-' || TO_CHAR(TO_DATE('23' || M || Y, 'DDMMYY'), 'YYYYMMDD')) D23,
      NVL(
      (SELECT NVL(TBL_SURV_DTL.SURV_DTL_COMPLETED, 0)
        || '-'
        || TO_CHAR(TO_DATE('24-' || M || '-' || Y, 'DD-MON-YY'), 'D') || '-' || TO_CHAR(TO_DATE('24' || M || Y, 'DDMMYY'), 'YYYYMMDD') COMPLETED
      FROM TBL_SURV_DTL
      LEFT JOIN TBL_SURV_HDR
      ON TBL_SURV_DTL.SURV_DTL_HDR_ID         = TBL_SURV_HDR.SURV_HDR_ID
      WHERE (TBL_SURV_DTL.SURV_DTL_TIEBACK_ID = MAINQRY.TB_TIEBACK_ID
      AND TBL_SURV_HDR.SURV_HDR_DATE          = '24-' || M || '-' || Y)
      OR (TBL_SURV_HDR.SURV_HDR_DATE         IS NULL)
      ), 0
      || '-'
      || TO_CHAR(TO_DATE('24-' || M || '-' || Y, 'DD-MON-YY'), 'D') || '-' || TO_CHAR(TO_DATE('24' || M || Y, 'DDMMYY'), 'YYYYMMDD')) D24,
      NVL(
      (SELECT NVL(TBL_SURV_DTL.SURV_DTL_COMPLETED, 0)
        || '-'
        || TO_CHAR(TO_DATE('25-' || M || '-' || Y, 'DD-MON-YY'), 'D') || '-' || TO_CHAR(TO_DATE('25' || M || Y, 'DDMMYY'), 'YYYYMMDD') COMPLETED
      FROM TBL_SURV_DTL
      LEFT JOIN TBL_SURV_HDR
      ON TBL_SURV_DTL.SURV_DTL_HDR_ID         = TBL_SURV_HDR.SURV_HDR_ID
      WHERE (TBL_SURV_DTL.SURV_DTL_TIEBACK_ID = MAINQRY.TB_TIEBACK_ID
      AND TBL_SURV_HDR.SURV_HDR_DATE          = '25-' || M || '-' || Y)
      OR (TBL_SURV_HDR.SURV_HDR_DATE         IS NULL)
      ), 0
      || '-'
      || TO_CHAR(TO_DATE('25-' || M || '-' || Y, 'DD-MON-YY'), 'D') || '-' || TO_CHAR(TO_DATE('25' || M || Y, 'DDMMYY'), 'YYYYMMDD')) D25,
      NVL(
      (SELECT NVL(TBL_SURV_DTL.SURV_DTL_COMPLETED, 0)
        || '-'
        || TO_CHAR(TO_DATE('26-' || M || '-' || Y, 'DD-MON-YY'), 'D') || '-' || TO_CHAR(TO_DATE('26' || M || Y, 'DDMMYY'), 'YYYYMMDD') COMPLETED
      FROM TBL_SURV_DTL
      LEFT JOIN TBL_SURV_HDR
      ON TBL_SURV_DTL.SURV_DTL_HDR_ID         = TBL_SURV_HDR.SURV_HDR_ID
      WHERE (TBL_SURV_DTL.SURV_DTL_TIEBACK_ID = MAINQRY.TB_TIEBACK_ID
      AND TBL_SURV_HDR.SURV_HDR_DATE          = '26-' || M || '-' || Y)
      OR (TBL_SURV_HDR.SURV_HDR_DATE         IS NULL)
      ), 0
      || '-'
      || TO_CHAR(TO_DATE('26-' || M || '-' || Y, 'DD-MON-YY'), 'D') || '-' || TO_CHAR(TO_DATE('26' || M || Y, 'DDMMYY'), 'YYYYMMDD')) D26,
      NVL(
      (SELECT NVL(TBL_SURV_DTL.SURV_DTL_COMPLETED, 0)
        || '-'
        || TO_CHAR(TO_DATE('27-' || M || '-' || Y, 'DD-MON-YY'), 'D') || '-' || TO_CHAR(TO_DATE('27' || M || Y, 'DDMMYY'), 'YYYYMMDD') COMPLETED
      FROM TBL_SURV_DTL
      LEFT JOIN TBL_SURV_HDR
      ON TBL_SURV_DTL.SURV_DTL_HDR_ID         = TBL_SURV_HDR.SURV_HDR_ID
      WHERE (TBL_SURV_DTL.SURV_DTL_TIEBACK_ID = MAINQRY.TB_TIEBACK_ID
      AND TBL_SURV_HDR.SURV_HDR_DATE          = '27-' || M || '-' || Y)
      OR (TBL_SURV_HDR.SURV_HDR_DATE         IS NULL)
      ), 0
      || '-'
      || TO_CHAR(TO_DATE('27-' || M || '-' || Y, 'DD-MON-YY'), 'D') || '-' || TO_CHAR(TO_DATE('27' || M || Y, 'DDMMYY'), 'YYYYMMDD')) D27,
      NVL(
      (SELECT NVL(TBL_SURV_DTL.SURV_DTL_COMPLETED, 0)
        || '-'
        || TO_CHAR(TO_DATE('28-' || M || '-' || Y, 'DD-MON-YY'), 'D') || '-' || TO_CHAR(TO_DATE('28' || M || Y, 'DDMMYY'), 'YYYYMMDD') COMPLETED
      FROM TBL_SURV_DTL
      LEFT JOIN TBL_SURV_HDR
      ON TBL_SURV_DTL.SURV_DTL_HDR_ID         = TBL_SURV_HDR.SURV_HDR_ID
      WHERE (TBL_SURV_DTL.SURV_DTL_TIEBACK_ID = MAINQRY.TB_TIEBACK_ID
      AND TBL_SURV_HDR.SURV_HDR_DATE          = '28-' || M || '-' || Y)
      OR (TBL_SURV_HDR.SURV_HDR_DATE         IS NULL)
      ), 0
      || '-'
      || TO_CHAR(TO_DATE('28-' || M || '-' || Y, 'DD-MON-YY'), 'D') || '-' || TO_CHAR(TO_DATE('28' || M || Y, 'DDMMYY'), 'YYYYMMDD')) D28,
      NVL(
      (SELECT NVL(TBL_SURV_DTL.SURV_DTL_COMPLETED, 0)
        || '-'
        || TO_CHAR(TO_DATE('29-' || M || '-' || Y, 'DD-MON-YY'), 'D') || '-' || TO_CHAR(TO_DATE('29' || M || Y, 'DDMMYY'), 'YYYYMMDD') COMPLETED
      FROM TBL_SURV_DTL
      LEFT JOIN TBL_SURV_HDR
      ON TBL_SURV_DTL.SURV_DTL_HDR_ID         = TBL_SURV_HDR.SURV_HDR_ID
      WHERE (TBL_SURV_DTL.SURV_DTL_TIEBACK_ID = MAINQRY.TB_TIEBACK_ID
      AND TBL_SURV_HDR.SURV_HDR_DATE          = '29-' || M || '-' || Y)
      OR (TBL_SURV_HDR.SURV_HDR_DATE         IS NULL)
      ), 0
      || '-'
      || TO_CHAR(TO_DATE('29-' || M || '-' || Y, 'DD-MON-YY'), 'D') || '-' || TO_CHAR(TO_DATE('29' || M || Y, 'DDMMYY'), 'YYYYMMDD')) D29,
      NVL(
      (SELECT NVL(TBL_SURV_DTL.SURV_DTL_COMPLETED, 0)
        || '-'
        || TO_CHAR(TO_DATE('30-' || M || '-' || Y, 'DD-MON-YY'), 'D') || '-' || TO_CHAR(TO_DATE('30' || M || Y, 'DDMMYY'), 'YYYYMMDD') COMPLETED
      FROM TBL_SURV_DTL
      LEFT JOIN TBL_SURV_HDR
      ON TBL_SURV_DTL.SURV_DTL_HDR_ID         = TBL_SURV_HDR.SURV_HDR_ID
      WHERE (TBL_SURV_DTL.SURV_DTL_TIEBACK_ID = MAINQRY.TB_TIEBACK_ID
      AND TBL_SURV_HDR.SURV_HDR_DATE          = '30-' || M || '-' || Y)
      OR (TBL_SURV_HDR.SURV_HDR_DATE         IS NULL)
      ), 0
      || '-'
      || TO_CHAR(TO_DATE('30-' || M || '-' || Y, 'DD-MON-YY'), 'D') || '-' || TO_CHAR(TO_DATE('30' || M || Y, 'DDMMYY'), 'YYYYMMDD')) D30,
      NVL(
      (SELECT NVL(TBL_SURV_DTL.SURV_DTL_COMPLETED, 0)
        || '-'
        || TO_CHAR(TO_DATE('31-' || M || '-' || Y, 'DD-MON-YY'), 'D') || '-' || TO_CHAR(TO_DATE('31' || M || Y, 'DDMMYY'), 'YYYYMMDD') COMPLETED
      FROM TBL_SURV_DTL
      LEFT JOIN TBL_SURV_HDR
      ON TBL_SURV_DTL.SURV_DTL_HDR_ID         = TBL_SURV_HDR.SURV_HDR_ID
      WHERE (TBL_SURV_DTL.SURV_DTL_TIEBACK_ID = MAINQRY.TB_TIEBACK_ID
      AND TBL_SURV_HDR.SURV_HDR_DATE          = '31-' || M || '-' || Y)
      OR (TBL_SURV_HDR.SURV_HDR_DATE         IS NULL)
      ), 0
      || '-'
      || TO_CHAR(TO_DATE('31-' || M || '-' || Y, 'DD-MON-YY'), 'D') || '-' || TO_CHAR(TO_DATE('31' || M || Y, 'DDMMYY'), 'YYYYMMDD')) D31
    FROM V_TBL_SURV_TIEBACKS MAINQRY
    INNER JOIN SYS_NODES_ATTRIB SYS_NODES_ATTRIB_HOST
    ON MAINQRY.TB_HOST_ID = SYS_NODES_ATTRIB_HOST.REC_TAG
    INNER JOIN SYS_NODES_ATTRIB SYS_NODES_ATTRIB_TIEBACK
    ON MAINQRY.TB_TIEBACK_ID = SYS_NODES_ATTRIB_TIEBACK.REC_TAG
    ORDER BY HOST;
  RETURN V_RC;
END SP_SYS_Q_RPT_DS_01_SUB_1;

/
--------------------------------------------------------
--  DDL for Function SP_SYS_Q_RPT_DS_01_SUB_2
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE FUNCTION "IMSA"."SP_SYS_Q_RPT_DS_01_SUB_2" 
(
  M IN VARCHAR2 
, Y IN VARCHAR2 
) RETURN SYS_REFCURSOR AS 
  V_RC SYS_REFCURSOR;
BEGIN
  OPEN V_RC FOR 
    SELECT SYS_NODES_ATTRIB_HOST.NODE_DESC HOST,
      SYS_NODES_ATTRIB_TIEBACK.NODE_DESC TIEBACKS,
      NVL(
      (SELECT NVL(TBL_SURV_DTL.SURV_DTL_COMPLETED, 0)
        || '-'
        || TO_CHAR(TO_DATE('01-' || M || '-' || Y, 'DD-MON-YY'), 'D') || '-' || TO_CHAR(TO_DATE('01' || M || Y, 'DDMMYY'), 'YYYYMMDD') COMPLETED
      FROM TBL_SURV_DTL
      LEFT JOIN TBL_SURV_HDR
      ON TBL_SURV_DTL.SURV_DTL_HDR_ID         = TBL_SURV_HDR.SURV_HDR_ID
      WHERE (TBL_SURV_DTL.SURV_DTL_TIEBACK_ID = MAINQRY.TB_TIEBACK_ID
      AND TBL_SURV_HDR.SURV_HDR_DATE          = '01-' || M || '-' || Y)
      OR (TBL_SURV_HDR.SURV_HDR_DATE         IS NULL)
      ), 0
      || '-'
      || TO_CHAR(TO_DATE('01-' || M || '-' || Y, 'DD-MON-YY'), 'D') || '-' || TO_CHAR(TO_DATE('01' || M || Y, 'DDMMYY'), 'YYYYMMDD')) D1,
      NVL(
      (SELECT NVL(TBL_SURV_DTL.SURV_DTL_COMPLETED, 0)
        || '-'
        || TO_CHAR(TO_DATE('02-' || M || '-' || Y, 'DD-MON-YY'), 'D') || '-' || TO_CHAR(TO_DATE('02' || M || Y, 'DDMMYY'), 'YYYYMMDD') COMPLETED
      FROM TBL_SURV_DTL
      LEFT JOIN TBL_SURV_HDR
      ON TBL_SURV_DTL.SURV_DTL_HDR_ID         = TBL_SURV_HDR.SURV_HDR_ID
      WHERE (TBL_SURV_DTL.SURV_DTL_TIEBACK_ID = MAINQRY.TB_TIEBACK_ID
      AND TBL_SURV_HDR.SURV_HDR_DATE          = '02-' || M || '-' || Y)
      OR (TBL_SURV_HDR.SURV_HDR_DATE         IS NULL)
      ), 0
      || '-'
      || TO_CHAR(TO_DATE('02-' || M || '-' || Y, 'DD-MON-YY'), 'D') || '-' || TO_CHAR(TO_DATE('02' || M || Y, 'DDMMYY'), 'YYYYMMDD')) D2,
      NVL(
      (SELECT NVL(TBL_SURV_DTL.SURV_DTL_COMPLETED, 0)
        || '-'
        || TO_CHAR(TO_DATE('03-' || M || '-' || Y, 'DD-MON-YY'), 'D') || '-' || TO_CHAR(TO_DATE('03' || M || Y, 'DDMMYY'), 'YYYYMMDD') COMPLETED
      FROM TBL_SURV_DTL
      LEFT JOIN TBL_SURV_HDR
      ON TBL_SURV_DTL.SURV_DTL_HDR_ID         = TBL_SURV_HDR.SURV_HDR_ID
      WHERE (TBL_SURV_DTL.SURV_DTL_TIEBACK_ID = MAINQRY.TB_TIEBACK_ID
      AND TBL_SURV_HDR.SURV_HDR_DATE          = '03-' || M || '-' || Y)
      OR (TBL_SURV_HDR.SURV_HDR_DATE         IS NULL)
      ), 0
      || '-'
      || TO_CHAR(TO_DATE('03-' || M || '-' || Y, 'DD-MON-YY'), 'D') || '-' || TO_CHAR(TO_DATE('03' || M || Y, 'DDMMYY'), 'YYYYMMDD')) D3,
      NVL(
      (SELECT NVL(TBL_SURV_DTL.SURV_DTL_COMPLETED, 0)
        || '-'
        || TO_CHAR(TO_DATE('04-' || M || '-' || Y, 'DD-MON-YY'), 'D') || '-' || TO_CHAR(TO_DATE('04' || M || Y, 'DDMMYY'), 'YYYYMMDD') COMPLETED
      FROM TBL_SURV_DTL
      LEFT JOIN TBL_SURV_HDR
      ON TBL_SURV_DTL.SURV_DTL_HDR_ID         = TBL_SURV_HDR.SURV_HDR_ID
      WHERE (TBL_SURV_DTL.SURV_DTL_TIEBACK_ID = MAINQRY.TB_TIEBACK_ID
      AND TBL_SURV_HDR.SURV_HDR_DATE          = '04-' || M || '-' || Y)
      OR (TBL_SURV_HDR.SURV_HDR_DATE         IS NULL)
      ), 0
      || '-'
      || TO_CHAR(TO_DATE('04-' || M || '-' || Y, 'DD-MON-YY'), 'D') || '-' || TO_CHAR(TO_DATE('04' || M || Y, 'DDMMYY'), 'YYYYMMDD')) D4,
      NVL(
      (SELECT NVL(TBL_SURV_DTL.SURV_DTL_COMPLETED, 0)
        || '-'
        || TO_CHAR(TO_DATE('05-' || M || '-' || Y, 'DD-MON-YY'), 'D') || '-' || TO_CHAR(TO_DATE('05' || M || Y, 'DDMMYY'), 'YYYYMMDD') COMPLETED
      FROM TBL_SURV_DTL
      LEFT JOIN TBL_SURV_HDR
      ON TBL_SURV_DTL.SURV_DTL_HDR_ID         = TBL_SURV_HDR.SURV_HDR_ID
      WHERE (TBL_SURV_DTL.SURV_DTL_TIEBACK_ID = MAINQRY.TB_TIEBACK_ID
      AND TBL_SURV_HDR.SURV_HDR_DATE          = '05-' || M || '-' || Y)
      OR (TBL_SURV_HDR.SURV_HDR_DATE         IS NULL)
      ), 0
      || '-'
      || TO_CHAR(TO_DATE('05-' || M || '-' || Y, 'DD-MON-YY'), 'D') || '-' || TO_CHAR(TO_DATE('05' || M || Y, 'DDMMYY'), 'YYYYMMDD')) D5,
      NVL(
      (SELECT NVL(TBL_SURV_DTL.SURV_DTL_COMPLETED, 0)
        || '-'
        || TO_CHAR(TO_DATE('06-' || M || '-' || Y, 'DD-MON-YY'), 'D') || '-' || TO_CHAR(TO_DATE('06' || M || Y, 'DDMMYY'), 'YYYYMMDD') COMPLETED
      FROM TBL_SURV_DTL
      LEFT JOIN TBL_SURV_HDR
      ON TBL_SURV_DTL.SURV_DTL_HDR_ID         = TBL_SURV_HDR.SURV_HDR_ID
      WHERE (TBL_SURV_DTL.SURV_DTL_TIEBACK_ID = MAINQRY.TB_TIEBACK_ID
      AND TBL_SURV_HDR.SURV_HDR_DATE          = '06-' || M || '-' || Y)
      OR (TBL_SURV_HDR.SURV_HDR_DATE         IS NULL)
      ), 0
      || '-'
      || TO_CHAR(TO_DATE('06-' || M || '-' || Y, 'DD-MON-YY'), 'D') || '-' || TO_CHAR(TO_DATE('06' || M || Y, 'DDMMYY'), 'YYYYMMDD')) D6,
      NVL(
      (SELECT NVL(TBL_SURV_DTL.SURV_DTL_COMPLETED, 0)
        || '-'
        || TO_CHAR(TO_DATE('07-' || M || '-' || Y, 'DD-MON-YY'), 'D') || '-' || TO_CHAR(TO_DATE('07' || M || Y, 'DDMMYY'), 'YYYYMMDD') COMPLETED
      FROM TBL_SURV_DTL
      LEFT JOIN TBL_SURV_HDR
      ON TBL_SURV_DTL.SURV_DTL_HDR_ID         = TBL_SURV_HDR.SURV_HDR_ID
      WHERE (TBL_SURV_DTL.SURV_DTL_TIEBACK_ID = MAINQRY.TB_TIEBACK_ID
      AND TBL_SURV_HDR.SURV_HDR_DATE          = '07-' || M || '-' || Y)
      OR (TBL_SURV_HDR.SURV_HDR_DATE         IS NULL)
      ), 0
      || '-'
      || TO_CHAR(TO_DATE('07-' || M || '-' || Y, 'DD-MON-YY'), 'D') || '-' || TO_CHAR(TO_DATE('07' || M || Y, 'DDMMYY'), 'YYYYMMDD')) D7,
      NVL(
      (SELECT NVL(TBL_SURV_DTL.SURV_DTL_COMPLETED, 0)
        || '-'
        || TO_CHAR(TO_DATE('08-' || M || '-' || Y, 'DD-MON-YY'), 'D') || '-' || TO_CHAR(TO_DATE('08' || M || Y, 'DDMMYY'), 'YYYYMMDD') COMPLETED
      FROM TBL_SURV_DTL
      LEFT JOIN TBL_SURV_HDR
      ON TBL_SURV_DTL.SURV_DTL_HDR_ID         = TBL_SURV_HDR.SURV_HDR_ID
      WHERE (TBL_SURV_DTL.SURV_DTL_TIEBACK_ID = MAINQRY.TB_TIEBACK_ID
      AND TBL_SURV_HDR.SURV_HDR_DATE          = '08-' || M || '-' || Y)
      OR (TBL_SURV_HDR.SURV_HDR_DATE         IS NULL)
      ), 0
      || '-'
      || TO_CHAR(TO_DATE('08-' || M || '-' || Y, 'DD-MON-YY'), 'D') || '-' || TO_CHAR(TO_DATE('08' || M || Y, 'DDMMYY'), 'YYYYMMDD')) D8,
      NVL(
      (SELECT NVL(TBL_SURV_DTL.SURV_DTL_COMPLETED, 0)
        || '-'
        || TO_CHAR(TO_DATE('09-' || M || '-' || Y, 'DD-MON-YY'), 'D') || '-' || TO_CHAR(TO_DATE('09' || M || Y, 'DDMMYY'), 'YYYYMMDD') COMPLETED
      FROM TBL_SURV_DTL
      LEFT JOIN TBL_SURV_HDR
      ON TBL_SURV_DTL.SURV_DTL_HDR_ID         = TBL_SURV_HDR.SURV_HDR_ID
      WHERE (TBL_SURV_DTL.SURV_DTL_TIEBACK_ID = MAINQRY.TB_TIEBACK_ID
      AND TBL_SURV_HDR.SURV_HDR_DATE          = '09-' || M || '-' || Y)
      OR (TBL_SURV_HDR.SURV_HDR_DATE         IS NULL)
      ), 0
      || '-'
      || TO_CHAR(TO_DATE('09-' || M || '-' || Y, 'DD-MON-YY'), 'D') || '-' || TO_CHAR(TO_DATE('09' || M || Y, 'DDMMYY'), 'YYYYMMDD')) D9,
      NVL(
      (SELECT NVL(TBL_SURV_DTL.SURV_DTL_COMPLETED, 0)
        || '-'
        || TO_CHAR(TO_DATE('10-' || M || '-' || Y, 'DD-MON-YY'), 'D') || '-' || TO_CHAR(TO_DATE('10' || M || Y, 'DDMMYY'), 'YYYYMMDD') COMPLETED
      FROM TBL_SURV_DTL
      LEFT JOIN TBL_SURV_HDR
      ON TBL_SURV_DTL.SURV_DTL_HDR_ID         = TBL_SURV_HDR.SURV_HDR_ID
      WHERE (TBL_SURV_DTL.SURV_DTL_TIEBACK_ID = MAINQRY.TB_TIEBACK_ID
      AND TBL_SURV_HDR.SURV_HDR_DATE          = '10-' || M || '-' || Y)
      OR (TBL_SURV_HDR.SURV_HDR_DATE         IS NULL)
      ), 0
      || '-'
      || TO_CHAR(TO_DATE('10-' || M || '-' || Y, 'DD-MON-YY'), 'D') || '-' || TO_CHAR(TO_DATE('10' || M || Y, 'DDMMYY'), 'YYYYMMDD')) D10,
      NVL(
      (SELECT NVL(TBL_SURV_DTL.SURV_DTL_COMPLETED, 0)
        || '-'
        || TO_CHAR(TO_DATE('11-' || M || '-' || Y, 'DD-MON-YY'), 'D') || '-' || TO_CHAR(TO_DATE('11' || M || Y, 'DDMMYY'), 'YYYYMMDD') COMPLETED
      FROM TBL_SURV_DTL
      LEFT JOIN TBL_SURV_HDR
      ON TBL_SURV_DTL.SURV_DTL_HDR_ID         = TBL_SURV_HDR.SURV_HDR_ID
      WHERE (TBL_SURV_DTL.SURV_DTL_TIEBACK_ID = MAINQRY.TB_TIEBACK_ID
      AND TBL_SURV_HDR.SURV_HDR_DATE          = '11-' || M || '-' || Y)
      OR (TBL_SURV_HDR.SURV_HDR_DATE         IS NULL)
      ), 0
      || '-'
      || TO_CHAR(TO_DATE('11-' || M || '-' || Y, 'DD-MON-YY'), 'D') || '-' || TO_CHAR(TO_DATE('11' || M || Y, 'DDMMYY'), 'YYYYMMDD')) D11,
      NVL(
      (SELECT NVL(TBL_SURV_DTL.SURV_DTL_COMPLETED, 0)
        || '-'
        || TO_CHAR(TO_DATE('12-' || M || '-' || Y, 'DD-MON-YY'), 'D') || '-' || TO_CHAR(TO_DATE('12' || M || Y, 'DDMMYY'), 'YYYYMMDD') COMPLETED
      FROM TBL_SURV_DTL
      LEFT JOIN TBL_SURV_HDR
      ON TBL_SURV_DTL.SURV_DTL_HDR_ID         = TBL_SURV_HDR.SURV_HDR_ID
      WHERE (TBL_SURV_DTL.SURV_DTL_TIEBACK_ID = MAINQRY.TB_TIEBACK_ID
      AND TBL_SURV_HDR.SURV_HDR_DATE          = '12-' || M || '-' || Y)
      OR (TBL_SURV_HDR.SURV_HDR_DATE         IS NULL)
      ), 0
      || '-'
      || TO_CHAR(TO_DATE('12-' || M || '-' || Y, 'DD-MON-YY'), 'D') || '-' || TO_CHAR(TO_DATE('12' || M || Y, 'DDMMYY'), 'YYYYMMDD')) D12,
      NVL(
      (SELECT NVL(TBL_SURV_DTL.SURV_DTL_COMPLETED, 0)
        || '-'
        || TO_CHAR(TO_DATE('13-' || M || '-' || Y, 'DD-MON-YY'), 'D') || '-' || TO_CHAR(TO_DATE('13' || M || Y, 'DDMMYY'), 'YYYYMMDD') COMPLETED
      FROM TBL_SURV_DTL
      LEFT JOIN TBL_SURV_HDR
      ON TBL_SURV_DTL.SURV_DTL_HDR_ID         = TBL_SURV_HDR.SURV_HDR_ID
      WHERE (TBL_SURV_DTL.SURV_DTL_TIEBACK_ID = MAINQRY.TB_TIEBACK_ID
      AND TBL_SURV_HDR.SURV_HDR_DATE          = '13-' || M || '-' || Y)
      OR (TBL_SURV_HDR.SURV_HDR_DATE         IS NULL)
      ), 0
      || '-'
      || TO_CHAR(TO_DATE('13-' || M || '-' || Y, 'DD-MON-YY'), 'D') || '-' || TO_CHAR(TO_DATE('13' || M || Y, 'DDMMYY'), 'YYYYMMDD')) D13,
      NVL(
      (SELECT NVL(TBL_SURV_DTL.SURV_DTL_COMPLETED, 0)
        || '-'
        || TO_CHAR(TO_DATE('14-' || M || '-' || Y, 'DD-MON-YY'), 'D') || '-' || TO_CHAR(TO_DATE('14' || M || Y, 'DDMMYY'), 'YYYYMMDD') COMPLETED
      FROM TBL_SURV_DTL
      LEFT JOIN TBL_SURV_HDR
      ON TBL_SURV_DTL.SURV_DTL_HDR_ID         = TBL_SURV_HDR.SURV_HDR_ID
      WHERE (TBL_SURV_DTL.SURV_DTL_TIEBACK_ID = MAINQRY.TB_TIEBACK_ID
      AND TBL_SURV_HDR.SURV_HDR_DATE          = '14-' || M || '-' || Y)
      OR (TBL_SURV_HDR.SURV_HDR_DATE         IS NULL)
      ), 0
      || '-'
      || TO_CHAR(TO_DATE('14-' || M || '-' || Y, 'DD-MON-YY'), 'D') || '-' || TO_CHAR(TO_DATE('14' || M || Y, 'DDMMYY'), 'YYYYMMDD')) D14,
      NVL(
      (SELECT NVL(TBL_SURV_DTL.SURV_DTL_COMPLETED, 0)
        || '-'
        || TO_CHAR(TO_DATE('15-' || M || '-' || Y, 'DD-MON-YY'), 'D') || '-' || TO_CHAR(TO_DATE('15' || M || Y, 'DDMMYY'), 'YYYYMMDD') COMPLETED
      FROM TBL_SURV_DTL
      LEFT JOIN TBL_SURV_HDR
      ON TBL_SURV_DTL.SURV_DTL_HDR_ID         = TBL_SURV_HDR.SURV_HDR_ID
      WHERE (TBL_SURV_DTL.SURV_DTL_TIEBACK_ID = MAINQRY.TB_TIEBACK_ID
      AND TBL_SURV_HDR.SURV_HDR_DATE          = '15-' || M || '-' || Y)
      OR (TBL_SURV_HDR.SURV_HDR_DATE         IS NULL)
      ), 0
      || '-'
      || TO_CHAR(TO_DATE('15-' || M || '-' || Y, 'DD-MON-YY'), 'D') || '-' || TO_CHAR(TO_DATE('15' || M || Y, 'DDMMYY'), 'YYYYMMDD')) D15,
      NVL(
      (SELECT NVL(TBL_SURV_DTL.SURV_DTL_COMPLETED, 0)
        || '-'
        || TO_CHAR(TO_DATE('16-' || M || '-' || Y, 'DD-MON-YY'), 'D') || '-' || TO_CHAR(TO_DATE('16' || M || Y, 'DDMMYY'), 'YYYYMMDD') COMPLETED
      FROM TBL_SURV_DTL
      LEFT JOIN TBL_SURV_HDR
      ON TBL_SURV_DTL.SURV_DTL_HDR_ID         = TBL_SURV_HDR.SURV_HDR_ID
      WHERE (TBL_SURV_DTL.SURV_DTL_TIEBACK_ID = MAINQRY.TB_TIEBACK_ID
      AND TBL_SURV_HDR.SURV_HDR_DATE          = '16-' || M || '-' || Y)
      OR (TBL_SURV_HDR.SURV_HDR_DATE         IS NULL)
      ), 0
      || '-'
      || TO_CHAR(TO_DATE('16-' || M || '-' || Y, 'DD-MON-YY'), 'D') || '-' || TO_CHAR(TO_DATE('16' || M || Y, 'DDMMYY'), 'YYYYMMDD')) D16,
      NVL(
      (SELECT NVL(TBL_SURV_DTL.SURV_DTL_COMPLETED, 0)
        || '-'
        || TO_CHAR(TO_DATE('17-' || M || '-' || Y, 'DD-MON-YY'), 'D') || '-' || TO_CHAR(TO_DATE('17' || M || Y, 'DDMMYY'), 'YYYYMMDD') COMPLETED
      FROM TBL_SURV_DTL
      LEFT JOIN TBL_SURV_HDR
      ON TBL_SURV_DTL.SURV_DTL_HDR_ID         = TBL_SURV_HDR.SURV_HDR_ID
      WHERE (TBL_SURV_DTL.SURV_DTL_TIEBACK_ID = MAINQRY.TB_TIEBACK_ID
      AND TBL_SURV_HDR.SURV_HDR_DATE          = '17-' || M || '-' || Y)
      OR (TBL_SURV_HDR.SURV_HDR_DATE         IS NULL)
      ), 0
      || '-'
      || TO_CHAR(TO_DATE('17-' || M || '-' || Y, 'DD-MON-YY'), 'D') || '-' || TO_CHAR(TO_DATE('17' || M || Y, 'DDMMYY'), 'YYYYMMDD')) D17,
      NVL(
      (SELECT NVL(TBL_SURV_DTL.SURV_DTL_COMPLETED, 0)
        || '-'
        || TO_CHAR(TO_DATE('18-' || M || '-' || Y, 'DD-MON-YY'), 'D') || '-' || TO_CHAR(TO_DATE('18' || M || Y, 'DDMMYY'), 'YYYYMMDD') COMPLETED
      FROM TBL_SURV_DTL
      LEFT JOIN TBL_SURV_HDR
      ON TBL_SURV_DTL.SURV_DTL_HDR_ID         = TBL_SURV_HDR.SURV_HDR_ID
      WHERE (TBL_SURV_DTL.SURV_DTL_TIEBACK_ID = MAINQRY.TB_TIEBACK_ID
      AND TBL_SURV_HDR.SURV_HDR_DATE          = '18-' || M || '-' || Y)
      OR (TBL_SURV_HDR.SURV_HDR_DATE         IS NULL)
      ), 0
      || '-'
      || TO_CHAR(TO_DATE('18-' || M || '-' || Y, 'DD-MON-YY'), 'D') || '-' || TO_CHAR(TO_DATE('18' || M || Y, 'DDMMYY'), 'YYYYMMDD')) D18,
      NVL(
      (SELECT NVL(TBL_SURV_DTL.SURV_DTL_COMPLETED, 0)
        || '-'
        || TO_CHAR(TO_DATE('19-' || M || '-' || Y, 'DD-MON-YY'), 'D') || '-' || TO_CHAR(TO_DATE('19' || M || Y, 'DDMMYY'), 'YYYYMMDD') COMPLETED
      FROM TBL_SURV_DTL
      LEFT JOIN TBL_SURV_HDR
      ON TBL_SURV_DTL.SURV_DTL_HDR_ID         = TBL_SURV_HDR.SURV_HDR_ID
      WHERE (TBL_SURV_DTL.SURV_DTL_TIEBACK_ID = MAINQRY.TB_TIEBACK_ID
      AND TBL_SURV_HDR.SURV_HDR_DATE          = '19-' || M || '-' || Y)
      OR (TBL_SURV_HDR.SURV_HDR_DATE         IS NULL)
      ), 0
      || '-'
      || TO_CHAR(TO_DATE('19-' || M || '-' || Y, 'DD-MON-YY'), 'D') || '-' || TO_CHAR(TO_DATE('19' || M || Y, 'DDMMYY'), 'YYYYMMDD')) D19,
      NVL(
      (SELECT NVL(TBL_SURV_DTL.SURV_DTL_COMPLETED, 0)
        || '-'
        || TO_CHAR(TO_DATE('20-' || M || '-' || Y, 'DD-MON-YY'), 'D') || '-' || TO_CHAR(TO_DATE('20' || M || Y, 'DDMMYY'), 'YYYYMMDD') COMPLETED
      FROM TBL_SURV_DTL
      LEFT JOIN TBL_SURV_HDR
      ON TBL_SURV_DTL.SURV_DTL_HDR_ID         = TBL_SURV_HDR.SURV_HDR_ID
      WHERE (TBL_SURV_DTL.SURV_DTL_TIEBACK_ID = MAINQRY.TB_TIEBACK_ID
      AND TBL_SURV_HDR.SURV_HDR_DATE          = '20-' || M || '-' || Y)
      OR (TBL_SURV_HDR.SURV_HDR_DATE         IS NULL)
      ), 0
      || '-'
      || TO_CHAR(TO_DATE('20-' || M || '-' || Y, 'DD-MON-YY'), 'D') || '-' || TO_CHAR(TO_DATE('20' || M || Y, 'DDMMYY'), 'YYYYMMDD')) D20,
      NVL(
      (SELECT NVL(TBL_SURV_DTL.SURV_DTL_COMPLETED, 0)
        || '-'
        || TO_CHAR(TO_DATE('21-' || M || '-' || Y, 'DD-MON-YY'), 'D') || '-' || TO_CHAR(TO_DATE('21' || M || Y, 'DDMMYY'), 'YYYYMMDD') COMPLETED
      FROM TBL_SURV_DTL
      LEFT JOIN TBL_SURV_HDR
      ON TBL_SURV_DTL.SURV_DTL_HDR_ID         = TBL_SURV_HDR.SURV_HDR_ID
      WHERE (TBL_SURV_DTL.SURV_DTL_TIEBACK_ID = MAINQRY.TB_TIEBACK_ID
      AND TBL_SURV_HDR.SURV_HDR_DATE          = '21-' || M || '-' || Y)
      OR (TBL_SURV_HDR.SURV_HDR_DATE         IS NULL)
      ), 0
      || '-'
      || TO_CHAR(TO_DATE('21-' || M || '-' || Y, 'DD-MON-YY'), 'D') || '-' || TO_CHAR(TO_DATE('21' || M || Y, 'DDMMYY'), 'YYYYMMDD')) D21,
      NVL(
      (SELECT NVL(TBL_SURV_DTL.SURV_DTL_COMPLETED, 0)
        || '-'
        || TO_CHAR(TO_DATE('22-' || M || '-' || Y, 'DD-MON-YY'), 'D') || '-' || TO_CHAR(TO_DATE('22' || M || Y, 'DDMMYY'), 'YYYYMMDD') COMPLETED
      FROM TBL_SURV_DTL
      LEFT JOIN TBL_SURV_HDR
      ON TBL_SURV_DTL.SURV_DTL_HDR_ID         = TBL_SURV_HDR.SURV_HDR_ID
      WHERE (TBL_SURV_DTL.SURV_DTL_TIEBACK_ID = MAINQRY.TB_TIEBACK_ID
      AND TBL_SURV_HDR.SURV_HDR_DATE          = '22-' || M || '-' || Y)
      OR (TBL_SURV_HDR.SURV_HDR_DATE         IS NULL)
      ), 0
      || '-'
      || TO_CHAR(TO_DATE('22-' || M || '-' || Y, 'DD-MON-YY'), 'D') || '-' || TO_CHAR(TO_DATE('22' || M || Y, 'DDMMYY'), 'YYYYMMDD')) D22,
      NVL(
      (SELECT NVL(TBL_SURV_DTL.SURV_DTL_COMPLETED, 0)
        || '-'
        || TO_CHAR(TO_DATE('23-' || M || '-' || Y, 'DD-MON-YY'), 'D') || '-' || TO_CHAR(TO_DATE('23' || M || Y, 'DDMMYY'), 'YYYYMMDD') COMPLETED
      FROM TBL_SURV_DTL
      LEFT JOIN TBL_SURV_HDR
      ON TBL_SURV_DTL.SURV_DTL_HDR_ID         = TBL_SURV_HDR.SURV_HDR_ID
      WHERE (TBL_SURV_DTL.SURV_DTL_TIEBACK_ID = MAINQRY.TB_TIEBACK_ID
      AND TBL_SURV_HDR.SURV_HDR_DATE          = '23-' || M || '-' || Y)
      OR (TBL_SURV_HDR.SURV_HDR_DATE         IS NULL)
      ), 0
      || '-'
      || TO_CHAR(TO_DATE('23-' || M || '-' || Y, 'DD-MON-YY'), 'D') || '-' || TO_CHAR(TO_DATE('23' || M || Y, 'DDMMYY'), 'YYYYMMDD')) D23,
      NVL(
      (SELECT NVL(TBL_SURV_DTL.SURV_DTL_COMPLETED, 0)
        || '-'
        || TO_CHAR(TO_DATE('24-' || M || '-' || Y, 'DD-MON-YY'), 'D') || '-' || TO_CHAR(TO_DATE('24' || M || Y, 'DDMMYY'), 'YYYYMMDD') COMPLETED
      FROM TBL_SURV_DTL
      LEFT JOIN TBL_SURV_HDR
      ON TBL_SURV_DTL.SURV_DTL_HDR_ID         = TBL_SURV_HDR.SURV_HDR_ID
      WHERE (TBL_SURV_DTL.SURV_DTL_TIEBACK_ID = MAINQRY.TB_TIEBACK_ID
      AND TBL_SURV_HDR.SURV_HDR_DATE          = '24-' || M || '-' || Y)
      OR (TBL_SURV_HDR.SURV_HDR_DATE         IS NULL)
      ), 0
      || '-'
      || TO_CHAR(TO_DATE('24-' || M || '-' || Y, 'DD-MON-YY'), 'D') || '-' || TO_CHAR(TO_DATE('24' || M || Y, 'DDMMYY'), 'YYYYMMDD')) D24,
      NVL(
      (SELECT NVL(TBL_SURV_DTL.SURV_DTL_COMPLETED, 0)
        || '-'
        || TO_CHAR(TO_DATE('25-' || M || '-' || Y, 'DD-MON-YY'), 'D') || '-' || TO_CHAR(TO_DATE('25' || M || Y, 'DDMMYY'), 'YYYYMMDD') COMPLETED
      FROM TBL_SURV_DTL
      LEFT JOIN TBL_SURV_HDR
      ON TBL_SURV_DTL.SURV_DTL_HDR_ID         = TBL_SURV_HDR.SURV_HDR_ID
      WHERE (TBL_SURV_DTL.SURV_DTL_TIEBACK_ID = MAINQRY.TB_TIEBACK_ID
      AND TBL_SURV_HDR.SURV_HDR_DATE          = '25-' || M || '-' || Y)
      OR (TBL_SURV_HDR.SURV_HDR_DATE         IS NULL)
      ), 0
      || '-'
      || TO_CHAR(TO_DATE('25-' || M || '-' || Y, 'DD-MON-YY'), 'D') || '-' || TO_CHAR(TO_DATE('25' || M || Y, 'DDMMYY'), 'YYYYMMDD')) D25,
      NVL(
      (SELECT NVL(TBL_SURV_DTL.SURV_DTL_COMPLETED, 0)
        || '-'
        || TO_CHAR(TO_DATE('26-' || M || '-' || Y, 'DD-MON-YY'), 'D') || '-' || TO_CHAR(TO_DATE('26' || M || Y, 'DDMMYY'), 'YYYYMMDD') COMPLETED
      FROM TBL_SURV_DTL
      LEFT JOIN TBL_SURV_HDR
      ON TBL_SURV_DTL.SURV_DTL_HDR_ID         = TBL_SURV_HDR.SURV_HDR_ID
      WHERE (TBL_SURV_DTL.SURV_DTL_TIEBACK_ID = MAINQRY.TB_TIEBACK_ID
      AND TBL_SURV_HDR.SURV_HDR_DATE          = '26-' || M || '-' || Y)
      OR (TBL_SURV_HDR.SURV_HDR_DATE         IS NULL)
      ), 0
      || '-'
      || TO_CHAR(TO_DATE('26-' || M || '-' || Y, 'DD-MON-YY'), 'D') || '-' || TO_CHAR(TO_DATE('26' || M || Y, 'DDMMYY'), 'YYYYMMDD')) D26,
      NVL(
      (SELECT NVL(TBL_SURV_DTL.SURV_DTL_COMPLETED, 0)
        || '-'
        || TO_CHAR(TO_DATE('27-' || M || '-' || Y, 'DD-MON-YY'), 'D') || '-' || TO_CHAR(TO_DATE('27' || M || Y, 'DDMMYY'), 'YYYYMMDD') COMPLETED
      FROM TBL_SURV_DTL
      LEFT JOIN TBL_SURV_HDR
      ON TBL_SURV_DTL.SURV_DTL_HDR_ID         = TBL_SURV_HDR.SURV_HDR_ID
      WHERE (TBL_SURV_DTL.SURV_DTL_TIEBACK_ID = MAINQRY.TB_TIEBACK_ID
      AND TBL_SURV_HDR.SURV_HDR_DATE          = '27-' || M || '-' || Y)
      OR (TBL_SURV_HDR.SURV_HDR_DATE         IS NULL)
      ), 0
      || '-'
      || TO_CHAR(TO_DATE('27-' || M || '-' || Y, 'DD-MON-YY'), 'D') || '-' || TO_CHAR(TO_DATE('27' || M || Y, 'DDMMYY'), 'YYYYMMDD')) D27,
      NVL(
      (SELECT NVL(TBL_SURV_DTL.SURV_DTL_COMPLETED, 0)
        || '-'
        || TO_CHAR(TO_DATE('28-' || M || '-' || Y, 'DD-MON-YY'), 'D') || '-' || TO_CHAR(TO_DATE('28' || M || Y, 'DDMMYY'), 'YYYYMMDD') COMPLETED
      FROM TBL_SURV_DTL
      LEFT JOIN TBL_SURV_HDR
      ON TBL_SURV_DTL.SURV_DTL_HDR_ID         = TBL_SURV_HDR.SURV_HDR_ID
      WHERE (TBL_SURV_DTL.SURV_DTL_TIEBACK_ID = MAINQRY.TB_TIEBACK_ID
      AND TBL_SURV_HDR.SURV_HDR_DATE          = '28-' || M || '-' || Y)
      OR (TBL_SURV_HDR.SURV_HDR_DATE         IS NULL)
      ), 0
      || '-'
      || TO_CHAR(TO_DATE('28-' || M || '-' || Y, 'DD-MON-YY'), 'D') || '-' || TO_CHAR(TO_DATE('28' || M || Y, 'DDMMYY'), 'YYYYMMDD')) D28,
      NVL(
      (SELECT NVL(TBL_SURV_DTL.SURV_DTL_COMPLETED, 0)
        || '-'
        || TO_CHAR(TO_DATE('29-' || M || '-' || Y, 'DD-MON-YY'), 'D') || '-' || TO_CHAR(TO_DATE('29' || M || Y, 'DDMMYY'), 'YYYYMMDD') COMPLETED
      FROM TBL_SURV_DTL
      LEFT JOIN TBL_SURV_HDR
      ON TBL_SURV_DTL.SURV_DTL_HDR_ID         = TBL_SURV_HDR.SURV_HDR_ID
      WHERE (TBL_SURV_DTL.SURV_DTL_TIEBACK_ID = MAINQRY.TB_TIEBACK_ID
      AND TBL_SURV_HDR.SURV_HDR_DATE          = '29-' || M || '-' || Y)
      OR (TBL_SURV_HDR.SURV_HDR_DATE         IS NULL)
      ), 0
      || '-'
      || TO_CHAR(TO_DATE('29-' || M || '-' || Y, 'DD-MON-YY'), 'D') || '-' || TO_CHAR(TO_DATE('29' || M || Y, 'DDMMYY'), 'YYYYMMDD')) D29,
      NVL(
      (SELECT NVL(TBL_SURV_DTL.SURV_DTL_COMPLETED, 0)
        || '-'
        || TO_CHAR(TO_DATE('30-' || M || '-' || Y, 'DD-MON-YY'), 'D') || '-' || TO_CHAR(TO_DATE('30' || M || Y, 'DDMMYY'), 'YYYYMMDD') COMPLETED
      FROM TBL_SURV_DTL
      LEFT JOIN TBL_SURV_HDR
      ON TBL_SURV_DTL.SURV_DTL_HDR_ID         = TBL_SURV_HDR.SURV_HDR_ID
      WHERE (TBL_SURV_DTL.SURV_DTL_TIEBACK_ID = MAINQRY.TB_TIEBACK_ID
      AND TBL_SURV_HDR.SURV_HDR_DATE          = '30-' || M || '-' || Y)
      OR (TBL_SURV_HDR.SURV_HDR_DATE         IS NULL)
      ), 0
      || '-'
      || TO_CHAR(TO_DATE('30-' || M || '-' || Y, 'DD-MON-YY'), 'D') || '-' || TO_CHAR(TO_DATE('30' || M || Y, 'DDMMYY'), 'YYYYMMDD')) D30
    FROM V_TBL_SURV_TIEBACKS MAINQRY
    INNER JOIN SYS_NODES_ATTRIB SYS_NODES_ATTRIB_HOST
    ON MAINQRY.TB_HOST_ID = SYS_NODES_ATTRIB_HOST.REC_TAG
    INNER JOIN SYS_NODES_ATTRIB SYS_NODES_ATTRIB_TIEBACK
    ON MAINQRY.TB_TIEBACK_ID = SYS_NODES_ATTRIB_TIEBACK.REC_TAG
    ORDER BY HOST;
  RETURN V_RC;
END SP_SYS_Q_RPT_DS_01_SUB_2;

/
--------------------------------------------------------
--  DDL for Function SP_SYS_Q_RPT_DS_01_SUB_3
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE FUNCTION "IMSA"."SP_SYS_Q_RPT_DS_01_SUB_3" 
(
  M IN VARCHAR2 
, Y IN VARCHAR2 
) RETURN SYS_REFCURSOR AS 
  V_RC SYS_REFCURSOR;
BEGIN
  OPEN V_RC FOR 
    SELECT SYS_NODES_ATTRIB_HOST.NODE_DESC HOST,
      SYS_NODES_ATTRIB_TIEBACK.NODE_DESC TIEBACKS,
      NVL(
      (SELECT NVL(TBL_SURV_DTL.SURV_DTL_COMPLETED, 0)
        || '-'
        || TO_CHAR(TO_DATE('01-' || M || '-' || Y, 'DD-MON-YY'), 'D') || '-' || TO_CHAR(TO_DATE('01' || M || Y, 'DDMMYY'), 'YYYYMMDD') COMPLETED
      FROM TBL_SURV_DTL
      LEFT JOIN TBL_SURV_HDR
      ON TBL_SURV_DTL.SURV_DTL_HDR_ID         = TBL_SURV_HDR.SURV_HDR_ID
      WHERE (TBL_SURV_DTL.SURV_DTL_TIEBACK_ID = MAINQRY.TB_TIEBACK_ID
      AND TBL_SURV_HDR.SURV_HDR_DATE          = '01-' || M || '-' || Y)
      OR (TBL_SURV_HDR.SURV_HDR_DATE         IS NULL)
      ), 0
      || '-'
      || TO_CHAR(TO_DATE('01-' || M || '-' || Y, 'DD-MON-YY'), 'D') || '-' || TO_CHAR(TO_DATE('01' || M || Y, 'DDMMYY'), 'YYYYMMDD')) D1,
      NVL(
      (SELECT NVL(TBL_SURV_DTL.SURV_DTL_COMPLETED, 0)
        || '-'
        || TO_CHAR(TO_DATE('02-' || M || '-' || Y, 'DD-MON-YY'), 'D') || '-' || TO_CHAR(TO_DATE('02' || M || Y, 'DDMMYY'), 'YYYYMMDD') COMPLETED
      FROM TBL_SURV_DTL
      LEFT JOIN TBL_SURV_HDR
      ON TBL_SURV_DTL.SURV_DTL_HDR_ID         = TBL_SURV_HDR.SURV_HDR_ID
      WHERE (TBL_SURV_DTL.SURV_DTL_TIEBACK_ID = MAINQRY.TB_TIEBACK_ID
      AND TBL_SURV_HDR.SURV_HDR_DATE          = '02-' || M || '-' || Y)
      OR (TBL_SURV_HDR.SURV_HDR_DATE         IS NULL)
      ), 0
      || '-'
      || TO_CHAR(TO_DATE('02-' || M || '-' || Y, 'DD-MON-YY'), 'D') || '-' || TO_CHAR(TO_DATE('02' || M || Y, 'DDMMYY'), 'YYYYMMDD')) D2,
      NVL(
      (SELECT NVL(TBL_SURV_DTL.SURV_DTL_COMPLETED, 0)
        || '-'
        || TO_CHAR(TO_DATE('03-' || M || '-' || Y, 'DD-MON-YY'), 'D') || '-' || TO_CHAR(TO_DATE('03' || M || Y, 'DDMMYY'), 'YYYYMMDD') COMPLETED
      FROM TBL_SURV_DTL
      LEFT JOIN TBL_SURV_HDR
      ON TBL_SURV_DTL.SURV_DTL_HDR_ID         = TBL_SURV_HDR.SURV_HDR_ID
      WHERE (TBL_SURV_DTL.SURV_DTL_TIEBACK_ID = MAINQRY.TB_TIEBACK_ID
      AND TBL_SURV_HDR.SURV_HDR_DATE          = '03-' || M || '-' || Y)
      OR (TBL_SURV_HDR.SURV_HDR_DATE         IS NULL)
      ), 0
      || '-'
      || TO_CHAR(TO_DATE('03-' || M || '-' || Y, 'DD-MON-YY'), 'D') || '-' || TO_CHAR(TO_DATE('03' || M || Y, 'DDMMYY'), 'YYYYMMDD')) D3,
      NVL(
      (SELECT NVL(TBL_SURV_DTL.SURV_DTL_COMPLETED, 0)
        || '-'
        || TO_CHAR(TO_DATE('04-' || M || '-' || Y, 'DD-MON-YY'), 'D') || '-' || TO_CHAR(TO_DATE('04' || M || Y, 'DDMMYY'), 'YYYYMMDD') COMPLETED
      FROM TBL_SURV_DTL
      LEFT JOIN TBL_SURV_HDR
      ON TBL_SURV_DTL.SURV_DTL_HDR_ID         = TBL_SURV_HDR.SURV_HDR_ID
      WHERE (TBL_SURV_DTL.SURV_DTL_TIEBACK_ID = MAINQRY.TB_TIEBACK_ID
      AND TBL_SURV_HDR.SURV_HDR_DATE          = '04-' || M || '-' || Y)
      OR (TBL_SURV_HDR.SURV_HDR_DATE         IS NULL)
      ), 0
      || '-'
      || TO_CHAR(TO_DATE('04-' || M || '-' || Y, 'DD-MON-YY'), 'D') || '-' || TO_CHAR(TO_DATE('04' || M || Y, 'DDMMYY'), 'YYYYMMDD')) D4,
      NVL(
      (SELECT NVL(TBL_SURV_DTL.SURV_DTL_COMPLETED, 0)
        || '-'
        || TO_CHAR(TO_DATE('05-' || M || '-' || Y, 'DD-MON-YY'), 'D') || '-' || TO_CHAR(TO_DATE('05' || M || Y, 'DDMMYY'), 'YYYYMMDD') COMPLETED
      FROM TBL_SURV_DTL
      LEFT JOIN TBL_SURV_HDR
      ON TBL_SURV_DTL.SURV_DTL_HDR_ID         = TBL_SURV_HDR.SURV_HDR_ID
      WHERE (TBL_SURV_DTL.SURV_DTL_TIEBACK_ID = MAINQRY.TB_TIEBACK_ID
      AND TBL_SURV_HDR.SURV_HDR_DATE          = '05-' || M || '-' || Y)
      OR (TBL_SURV_HDR.SURV_HDR_DATE         IS NULL)
      ), 0
      || '-'
      || TO_CHAR(TO_DATE('05-' || M || '-' || Y, 'DD-MON-YY'), 'D') || '-' || TO_CHAR(TO_DATE('05' || M || Y, 'DDMMYY'), 'YYYYMMDD')) D5,
      NVL(
      (SELECT NVL(TBL_SURV_DTL.SURV_DTL_COMPLETED, 0)
        || '-'
        || TO_CHAR(TO_DATE('06-' || M || '-' || Y, 'DD-MON-YY'), 'D') || '-' || TO_CHAR(TO_DATE('06' || M || Y, 'DDMMYY'), 'YYYYMMDD') COMPLETED
      FROM TBL_SURV_DTL
      LEFT JOIN TBL_SURV_HDR
      ON TBL_SURV_DTL.SURV_DTL_HDR_ID         = TBL_SURV_HDR.SURV_HDR_ID
      WHERE (TBL_SURV_DTL.SURV_DTL_TIEBACK_ID = MAINQRY.TB_TIEBACK_ID
      AND TBL_SURV_HDR.SURV_HDR_DATE          = '06-' || M || '-' || Y)
      OR (TBL_SURV_HDR.SURV_HDR_DATE         IS NULL)
      ), 0
      || '-'
      || TO_CHAR(TO_DATE('06-' || M || '-' || Y, 'DD-MON-YY'), 'D') || '-' || TO_CHAR(TO_DATE('06' || M || Y, 'DDMMYY'), 'YYYYMMDD')) D6,
      NVL(
      (SELECT NVL(TBL_SURV_DTL.SURV_DTL_COMPLETED, 0)
        || '-'
        || TO_CHAR(TO_DATE('07-' || M || '-' || Y, 'DD-MON-YY'), 'D') || '-' || TO_CHAR(TO_DATE('07' || M || Y, 'DDMMYY'), 'YYYYMMDD') COMPLETED
      FROM TBL_SURV_DTL
      LEFT JOIN TBL_SURV_HDR
      ON TBL_SURV_DTL.SURV_DTL_HDR_ID         = TBL_SURV_HDR.SURV_HDR_ID
      WHERE (TBL_SURV_DTL.SURV_DTL_TIEBACK_ID = MAINQRY.TB_TIEBACK_ID
      AND TBL_SURV_HDR.SURV_HDR_DATE          = '07-' || M || '-' || Y)
      OR (TBL_SURV_HDR.SURV_HDR_DATE         IS NULL)
      ), 0
      || '-'
      || TO_CHAR(TO_DATE('07-' || M || '-' || Y, 'DD-MON-YY'), 'D') || '-' || TO_CHAR(TO_DATE('07' || M || Y, 'DDMMYY'), 'YYYYMMDD')) D7,
      NVL(
      (SELECT NVL(TBL_SURV_DTL.SURV_DTL_COMPLETED, 0)
        || '-'
        || TO_CHAR(TO_DATE('08-' || M || '-' || Y, 'DD-MON-YY'), 'D') || '-' || TO_CHAR(TO_DATE('08' || M || Y, 'DDMMYY'), 'YYYYMMDD') COMPLETED
      FROM TBL_SURV_DTL
      LEFT JOIN TBL_SURV_HDR
      ON TBL_SURV_DTL.SURV_DTL_HDR_ID         = TBL_SURV_HDR.SURV_HDR_ID
      WHERE (TBL_SURV_DTL.SURV_DTL_TIEBACK_ID = MAINQRY.TB_TIEBACK_ID
      AND TBL_SURV_HDR.SURV_HDR_DATE          = '08-' || M || '-' || Y)
      OR (TBL_SURV_HDR.SURV_HDR_DATE         IS NULL)
      ), 0
      || '-'
      || TO_CHAR(TO_DATE('08-' || M || '-' || Y, 'DD-MON-YY'), 'D') || '-' || TO_CHAR(TO_DATE('08' || M || Y, 'DDMMYY'), 'YYYYMMDD')) D8,
      NVL(
      (SELECT NVL(TBL_SURV_DTL.SURV_DTL_COMPLETED, 0)
        || '-'
        || TO_CHAR(TO_DATE('09-' || M || '-' || Y, 'DD-MON-YY'), 'D') || '-' || TO_CHAR(TO_DATE('09' || M || Y, 'DDMMYY'), 'YYYYMMDD') COMPLETED
      FROM TBL_SURV_DTL
      LEFT JOIN TBL_SURV_HDR
      ON TBL_SURV_DTL.SURV_DTL_HDR_ID         = TBL_SURV_HDR.SURV_HDR_ID
      WHERE (TBL_SURV_DTL.SURV_DTL_TIEBACK_ID = MAINQRY.TB_TIEBACK_ID
      AND TBL_SURV_HDR.SURV_HDR_DATE          = '09-' || M || '-' || Y)
      OR (TBL_SURV_HDR.SURV_HDR_DATE         IS NULL)
      ), 0
      || '-'
      || TO_CHAR(TO_DATE('09-' || M || '-' || Y, 'DD-MON-YY'), 'D') || '-' || TO_CHAR(TO_DATE('09' || M || Y, 'DDMMYY'), 'YYYYMMDD')) D9,
      NVL(
      (SELECT NVL(TBL_SURV_DTL.SURV_DTL_COMPLETED, 0)
        || '-'
        || TO_CHAR(TO_DATE('10-' || M || '-' || Y, 'DD-MON-YY'), 'D') || '-' || TO_CHAR(TO_DATE('10' || M || Y, 'DDMMYY'), 'YYYYMMDD') COMPLETED
      FROM TBL_SURV_DTL
      LEFT JOIN TBL_SURV_HDR
      ON TBL_SURV_DTL.SURV_DTL_HDR_ID         = TBL_SURV_HDR.SURV_HDR_ID
      WHERE (TBL_SURV_DTL.SURV_DTL_TIEBACK_ID = MAINQRY.TB_TIEBACK_ID
      AND TBL_SURV_HDR.SURV_HDR_DATE          = '10-' || M || '-' || Y)
      OR (TBL_SURV_HDR.SURV_HDR_DATE         IS NULL)
      ), 0
      || '-'
      || TO_CHAR(TO_DATE('10-' || M || '-' || Y, 'DD-MON-YY'), 'D') || '-' || TO_CHAR(TO_DATE('10' || M || Y, 'DDMMYY'), 'YYYYMMDD')) D10,
      NVL(
      (SELECT NVL(TBL_SURV_DTL.SURV_DTL_COMPLETED, 0)
        || '-'
        || TO_CHAR(TO_DATE('11-' || M || '-' || Y, 'DD-MON-YY'), 'D') || '-' || TO_CHAR(TO_DATE('11' || M || Y, 'DDMMYY'), 'YYYYMMDD') COMPLETED
      FROM TBL_SURV_DTL
      LEFT JOIN TBL_SURV_HDR
      ON TBL_SURV_DTL.SURV_DTL_HDR_ID         = TBL_SURV_HDR.SURV_HDR_ID
      WHERE (TBL_SURV_DTL.SURV_DTL_TIEBACK_ID = MAINQRY.TB_TIEBACK_ID
      AND TBL_SURV_HDR.SURV_HDR_DATE          = '11-' || M || '-' || Y)
      OR (TBL_SURV_HDR.SURV_HDR_DATE         IS NULL)
      ), 0
      || '-'
      || TO_CHAR(TO_DATE('11-' || M || '-' || Y, 'DD-MON-YY'), 'D') || '-' || TO_CHAR(TO_DATE('11' || M || Y, 'DDMMYY'), 'YYYYMMDD')) D11,
      NVL(
      (SELECT NVL(TBL_SURV_DTL.SURV_DTL_COMPLETED, 0)
        || '-'
        || TO_CHAR(TO_DATE('12-' || M || '-' || Y, 'DD-MON-YY'), 'D') || '-' || TO_CHAR(TO_DATE('12' || M || Y, 'DDMMYY'), 'YYYYMMDD') COMPLETED
      FROM TBL_SURV_DTL
      LEFT JOIN TBL_SURV_HDR
      ON TBL_SURV_DTL.SURV_DTL_HDR_ID         = TBL_SURV_HDR.SURV_HDR_ID
      WHERE (TBL_SURV_DTL.SURV_DTL_TIEBACK_ID = MAINQRY.TB_TIEBACK_ID
      AND TBL_SURV_HDR.SURV_HDR_DATE          = '12-' || M || '-' || Y)
      OR (TBL_SURV_HDR.SURV_HDR_DATE         IS NULL)
      ), 0
      || '-'
      || TO_CHAR(TO_DATE('12-' || M || '-' || Y, 'DD-MON-YY'), 'D') || '-' || TO_CHAR(TO_DATE('12' || M || Y, 'DDMMYY'), 'YYYYMMDD')) D12,
      NVL(
      (SELECT NVL(TBL_SURV_DTL.SURV_DTL_COMPLETED, 0)
        || '-'
        || TO_CHAR(TO_DATE('13-' || M || '-' || Y, 'DD-MON-YY'), 'D') || '-' || TO_CHAR(TO_DATE('13' || M || Y, 'DDMMYY'), 'YYYYMMDD') COMPLETED
      FROM TBL_SURV_DTL
      LEFT JOIN TBL_SURV_HDR
      ON TBL_SURV_DTL.SURV_DTL_HDR_ID         = TBL_SURV_HDR.SURV_HDR_ID
      WHERE (TBL_SURV_DTL.SURV_DTL_TIEBACK_ID = MAINQRY.TB_TIEBACK_ID
      AND TBL_SURV_HDR.SURV_HDR_DATE          = '13-' || M || '-' || Y)
      OR (TBL_SURV_HDR.SURV_HDR_DATE         IS NULL)
      ), 0
      || '-'
      || TO_CHAR(TO_DATE('13-' || M || '-' || Y, 'DD-MON-YY'), 'D') || '-' || TO_CHAR(TO_DATE('13' || M || Y, 'DDMMYY'), 'YYYYMMDD')) D13,
      NVL(
      (SELECT NVL(TBL_SURV_DTL.SURV_DTL_COMPLETED, 0)
        || '-'
        || TO_CHAR(TO_DATE('14-' || M || '-' || Y, 'DD-MON-YY'), 'D') || '-' || TO_CHAR(TO_DATE('14' || M || Y, 'DDMMYY'), 'YYYYMMDD') COMPLETED
      FROM TBL_SURV_DTL
      LEFT JOIN TBL_SURV_HDR
      ON TBL_SURV_DTL.SURV_DTL_HDR_ID         = TBL_SURV_HDR.SURV_HDR_ID
      WHERE (TBL_SURV_DTL.SURV_DTL_TIEBACK_ID = MAINQRY.TB_TIEBACK_ID
      AND TBL_SURV_HDR.SURV_HDR_DATE          = '14-' || M || '-' || Y)
      OR (TBL_SURV_HDR.SURV_HDR_DATE         IS NULL)
      ), 0
      || '-'
      || TO_CHAR(TO_DATE('14-' || M || '-' || Y, 'DD-MON-YY'), 'D') || '-' || TO_CHAR(TO_DATE('14' || M || Y, 'DDMMYY'), 'YYYYMMDD')) D14,
      NVL(
      (SELECT NVL(TBL_SURV_DTL.SURV_DTL_COMPLETED, 0)
        || '-'
        || TO_CHAR(TO_DATE('15-' || M || '-' || Y, 'DD-MON-YY'), 'D') || '-' || TO_CHAR(TO_DATE('15' || M || Y, 'DDMMYY'), 'YYYYMMDD') COMPLETED
      FROM TBL_SURV_DTL
      LEFT JOIN TBL_SURV_HDR
      ON TBL_SURV_DTL.SURV_DTL_HDR_ID         = TBL_SURV_HDR.SURV_HDR_ID
      WHERE (TBL_SURV_DTL.SURV_DTL_TIEBACK_ID = MAINQRY.TB_TIEBACK_ID
      AND TBL_SURV_HDR.SURV_HDR_DATE          = '15-' || M || '-' || Y)
      OR (TBL_SURV_HDR.SURV_HDR_DATE         IS NULL)
      ), 0
      || '-'
      || TO_CHAR(TO_DATE('15-' || M || '-' || Y, 'DD-MON-YY'), 'D') || '-' || TO_CHAR(TO_DATE('15' || M || Y, 'DDMMYY'), 'YYYYMMDD')) D15,
      NVL(
      (SELECT NVL(TBL_SURV_DTL.SURV_DTL_COMPLETED, 0)
        || '-'
        || TO_CHAR(TO_DATE('16-' || M || '-' || Y, 'DD-MON-YY'), 'D') || '-' || TO_CHAR(TO_DATE('16' || M || Y, 'DDMMYY'), 'YYYYMMDD') COMPLETED
      FROM TBL_SURV_DTL
      LEFT JOIN TBL_SURV_HDR
      ON TBL_SURV_DTL.SURV_DTL_HDR_ID         = TBL_SURV_HDR.SURV_HDR_ID
      WHERE (TBL_SURV_DTL.SURV_DTL_TIEBACK_ID = MAINQRY.TB_TIEBACK_ID
      AND TBL_SURV_HDR.SURV_HDR_DATE          = '16-' || M || '-' || Y)
      OR (TBL_SURV_HDR.SURV_HDR_DATE         IS NULL)
      ), 0
      || '-'
      || TO_CHAR(TO_DATE('16-' || M || '-' || Y, 'DD-MON-YY'), 'D') || '-' || TO_CHAR(TO_DATE('16' || M || Y, 'DDMMYY'), 'YYYYMMDD')) D16,
      NVL(
      (SELECT NVL(TBL_SURV_DTL.SURV_DTL_COMPLETED, 0)
        || '-'
        || TO_CHAR(TO_DATE('17-' || M || '-' || Y, 'DD-MON-YY'), 'D') || '-' || TO_CHAR(TO_DATE('17' || M || Y, 'DDMMYY'), 'YYYYMMDD') COMPLETED
      FROM TBL_SURV_DTL
      LEFT JOIN TBL_SURV_HDR
      ON TBL_SURV_DTL.SURV_DTL_HDR_ID         = TBL_SURV_HDR.SURV_HDR_ID
      WHERE (TBL_SURV_DTL.SURV_DTL_TIEBACK_ID = MAINQRY.TB_TIEBACK_ID
      AND TBL_SURV_HDR.SURV_HDR_DATE          = '17-' || M || '-' || Y)
      OR (TBL_SURV_HDR.SURV_HDR_DATE         IS NULL)
      ), 0
      || '-'
      || TO_CHAR(TO_DATE('17-' || M || '-' || Y, 'DD-MON-YY'), 'D') || '-' || TO_CHAR(TO_DATE('17' || M || Y, 'DDMMYY'), 'YYYYMMDD')) D17,
      NVL(
      (SELECT NVL(TBL_SURV_DTL.SURV_DTL_COMPLETED, 0)
        || '-'
        || TO_CHAR(TO_DATE('18-' || M || '-' || Y, 'DD-MON-YY'), 'D') || '-' || TO_CHAR(TO_DATE('18' || M || Y, 'DDMMYY'), 'YYYYMMDD') COMPLETED
      FROM TBL_SURV_DTL
      LEFT JOIN TBL_SURV_HDR
      ON TBL_SURV_DTL.SURV_DTL_HDR_ID         = TBL_SURV_HDR.SURV_HDR_ID
      WHERE (TBL_SURV_DTL.SURV_DTL_TIEBACK_ID = MAINQRY.TB_TIEBACK_ID
      AND TBL_SURV_HDR.SURV_HDR_DATE          = '18-' || M || '-' || Y)
      OR (TBL_SURV_HDR.SURV_HDR_DATE         IS NULL)
      ), 0
      || '-'
      || TO_CHAR(TO_DATE('18-' || M || '-' || Y, 'DD-MON-YY'), 'D') || '-' || TO_CHAR(TO_DATE('18' || M || Y, 'DDMMYY'), 'YYYYMMDD')) D18,
      NVL(
      (SELECT NVL(TBL_SURV_DTL.SURV_DTL_COMPLETED, 0)
        || '-'
        || TO_CHAR(TO_DATE('19-' || M || '-' || Y, 'DD-MON-YY'), 'D') || '-' || TO_CHAR(TO_DATE('19' || M || Y, 'DDMMYY'), 'YYYYMMDD') COMPLETED
      FROM TBL_SURV_DTL
      LEFT JOIN TBL_SURV_HDR
      ON TBL_SURV_DTL.SURV_DTL_HDR_ID         = TBL_SURV_HDR.SURV_HDR_ID
      WHERE (TBL_SURV_DTL.SURV_DTL_TIEBACK_ID = MAINQRY.TB_TIEBACK_ID
      AND TBL_SURV_HDR.SURV_HDR_DATE          = '19-' || M || '-' || Y)
      OR (TBL_SURV_HDR.SURV_HDR_DATE         IS NULL)
      ), 0
      || '-'
      || TO_CHAR(TO_DATE('19-' || M || '-' || Y, 'DD-MON-YY'), 'D') || '-' || TO_CHAR(TO_DATE('19' || M || Y, 'DDMMYY'), 'YYYYMMDD')) D19,
      NVL(
      (SELECT NVL(TBL_SURV_DTL.SURV_DTL_COMPLETED, 0)
        || '-'
        || TO_CHAR(TO_DATE('20-' || M || '-' || Y, 'DD-MON-YY'), 'D') || '-' || TO_CHAR(TO_DATE('20' || M || Y, 'DDMMYY'), 'YYYYMMDD') COMPLETED
      FROM TBL_SURV_DTL
      LEFT JOIN TBL_SURV_HDR
      ON TBL_SURV_DTL.SURV_DTL_HDR_ID         = TBL_SURV_HDR.SURV_HDR_ID
      WHERE (TBL_SURV_DTL.SURV_DTL_TIEBACK_ID = MAINQRY.TB_TIEBACK_ID
      AND TBL_SURV_HDR.SURV_HDR_DATE          = '20-' || M || '-' || Y)
      OR (TBL_SURV_HDR.SURV_HDR_DATE         IS NULL)
      ), 0
      || '-'
      || TO_CHAR(TO_DATE('20-' || M || '-' || Y, 'DD-MON-YY'), 'D') || '-' || TO_CHAR(TO_DATE('20' || M || Y, 'DDMMYY'), 'YYYYMMDD')) D20,
      NVL(
      (SELECT NVL(TBL_SURV_DTL.SURV_DTL_COMPLETED, 0)
        || '-'
        || TO_CHAR(TO_DATE('21-' || M || '-' || Y, 'DD-MON-YY'), 'D') || '-' || TO_CHAR(TO_DATE('21' || M || Y, 'DDMMYY'), 'YYYYMMDD') COMPLETED
      FROM TBL_SURV_DTL
      LEFT JOIN TBL_SURV_HDR
      ON TBL_SURV_DTL.SURV_DTL_HDR_ID         = TBL_SURV_HDR.SURV_HDR_ID
      WHERE (TBL_SURV_DTL.SURV_DTL_TIEBACK_ID = MAINQRY.TB_TIEBACK_ID
      AND TBL_SURV_HDR.SURV_HDR_DATE          = '21-' || M || '-' || Y)
      OR (TBL_SURV_HDR.SURV_HDR_DATE         IS NULL)
      ), 0
      || '-'
      || TO_CHAR(TO_DATE('21-' || M || '-' || Y, 'DD-MON-YY'), 'D') || '-' || TO_CHAR(TO_DATE('21' || M || Y, 'DDMMYY'), 'YYYYMMDD')) D21,
      NVL(
      (SELECT NVL(TBL_SURV_DTL.SURV_DTL_COMPLETED, 0)
        || '-'
        || TO_CHAR(TO_DATE('22-' || M || '-' || Y, 'DD-MON-YY'), 'D') || '-' || TO_CHAR(TO_DATE('22' || M || Y, 'DDMMYY'), 'YYYYMMDD') COMPLETED
      FROM TBL_SURV_DTL
      LEFT JOIN TBL_SURV_HDR
      ON TBL_SURV_DTL.SURV_DTL_HDR_ID         = TBL_SURV_HDR.SURV_HDR_ID
      WHERE (TBL_SURV_DTL.SURV_DTL_TIEBACK_ID = MAINQRY.TB_TIEBACK_ID
      AND TBL_SURV_HDR.SURV_HDR_DATE          = '22-' || M || '-' || Y)
      OR (TBL_SURV_HDR.SURV_HDR_DATE         IS NULL)
      ), 0
      || '-'
      || TO_CHAR(TO_DATE('22-' || M || '-' || Y, 'DD-MON-YY'), 'D') || '-' || TO_CHAR(TO_DATE('22' || M || Y, 'DDMMYY'), 'YYYYMMDD')) D22,
      NVL(
      (SELECT NVL(TBL_SURV_DTL.SURV_DTL_COMPLETED, 0)
        || '-'
        || TO_CHAR(TO_DATE('23-' || M || '-' || Y, 'DD-MON-YY'), 'D') || '-' || TO_CHAR(TO_DATE('23' || M || Y, 'DDMMYY'), 'YYYYMMDD') COMPLETED
      FROM TBL_SURV_DTL
      LEFT JOIN TBL_SURV_HDR
      ON TBL_SURV_DTL.SURV_DTL_HDR_ID         = TBL_SURV_HDR.SURV_HDR_ID
      WHERE (TBL_SURV_DTL.SURV_DTL_TIEBACK_ID = MAINQRY.TB_TIEBACK_ID
      AND TBL_SURV_HDR.SURV_HDR_DATE          = '23-' || M || '-' || Y)
      OR (TBL_SURV_HDR.SURV_HDR_DATE         IS NULL)
      ), 0
      || '-'
      || TO_CHAR(TO_DATE('23-' || M || '-' || Y, 'DD-MON-YY'), 'D') || '-' || TO_CHAR(TO_DATE('23' || M || Y, 'DDMMYY'), 'YYYYMMDD')) D23,
      NVL(
      (SELECT NVL(TBL_SURV_DTL.SURV_DTL_COMPLETED, 0)
        || '-'
        || TO_CHAR(TO_DATE('24-' || M || '-' || Y, 'DD-MON-YY'), 'D') || '-' || TO_CHAR(TO_DATE('24' || M || Y, 'DDMMYY'), 'YYYYMMDD') COMPLETED
      FROM TBL_SURV_DTL
      LEFT JOIN TBL_SURV_HDR
      ON TBL_SURV_DTL.SURV_DTL_HDR_ID         = TBL_SURV_HDR.SURV_HDR_ID
      WHERE (TBL_SURV_DTL.SURV_DTL_TIEBACK_ID = MAINQRY.TB_TIEBACK_ID
      AND TBL_SURV_HDR.SURV_HDR_DATE          = '24-' || M || '-' || Y)
      OR (TBL_SURV_HDR.SURV_HDR_DATE         IS NULL)
      ), 0
      || '-'
      || TO_CHAR(TO_DATE('24-' || M || '-' || Y, 'DD-MON-YY'), 'D') || '-' || TO_CHAR(TO_DATE('24' || M || Y, 'DDMMYY'), 'YYYYMMDD')) D24,
      NVL(
      (SELECT NVL(TBL_SURV_DTL.SURV_DTL_COMPLETED, 0)
        || '-'
        || TO_CHAR(TO_DATE('25-' || M || '-' || Y, 'DD-MON-YY'), 'D') || '-' || TO_CHAR(TO_DATE('25' || M || Y, 'DDMMYY'), 'YYYYMMDD') COMPLETED
      FROM TBL_SURV_DTL
      LEFT JOIN TBL_SURV_HDR
      ON TBL_SURV_DTL.SURV_DTL_HDR_ID         = TBL_SURV_HDR.SURV_HDR_ID
      WHERE (TBL_SURV_DTL.SURV_DTL_TIEBACK_ID = MAINQRY.TB_TIEBACK_ID
      AND TBL_SURV_HDR.SURV_HDR_DATE          = '25-' || M || '-' || Y)
      OR (TBL_SURV_HDR.SURV_HDR_DATE         IS NULL)
      ), 0
      || '-'
      || TO_CHAR(TO_DATE('25-' || M || '-' || Y, 'DD-MON-YY'), 'D') || '-' || TO_CHAR(TO_DATE('25' || M || Y, 'DDMMYY'), 'YYYYMMDD')) D25,
      NVL(
      (SELECT NVL(TBL_SURV_DTL.SURV_DTL_COMPLETED, 0)
        || '-'
        || TO_CHAR(TO_DATE('26-' || M || '-' || Y, 'DD-MON-YY'), 'D') || '-' || TO_CHAR(TO_DATE('26' || M || Y, 'DDMMYY'), 'YYYYMMDD') COMPLETED
      FROM TBL_SURV_DTL
      LEFT JOIN TBL_SURV_HDR
      ON TBL_SURV_DTL.SURV_DTL_HDR_ID         = TBL_SURV_HDR.SURV_HDR_ID
      WHERE (TBL_SURV_DTL.SURV_DTL_TIEBACK_ID = MAINQRY.TB_TIEBACK_ID
      AND TBL_SURV_HDR.SURV_HDR_DATE          = '26-' || M || '-' || Y)
      OR (TBL_SURV_HDR.SURV_HDR_DATE         IS NULL)
      ), 0
      || '-'
      || TO_CHAR(TO_DATE('26-' || M || '-' || Y, 'DD-MON-YY'), 'D') || '-' || TO_CHAR(TO_DATE('26' || M || Y, 'DDMMYY'), 'YYYYMMDD')) D26,
      NVL(
      (SELECT NVL(TBL_SURV_DTL.SURV_DTL_COMPLETED, 0)
        || '-'
        || TO_CHAR(TO_DATE('27-' || M || '-' || Y, 'DD-MON-YY'), 'D') || '-' || TO_CHAR(TO_DATE('27' || M || Y, 'DDMMYY'), 'YYYYMMDD') COMPLETED
      FROM TBL_SURV_DTL
      LEFT JOIN TBL_SURV_HDR
      ON TBL_SURV_DTL.SURV_DTL_HDR_ID         = TBL_SURV_HDR.SURV_HDR_ID
      WHERE (TBL_SURV_DTL.SURV_DTL_TIEBACK_ID = MAINQRY.TB_TIEBACK_ID
      AND TBL_SURV_HDR.SURV_HDR_DATE          = '27-' || M || '-' || Y)
      OR (TBL_SURV_HDR.SURV_HDR_DATE         IS NULL)
      ), 0
      || '-'
      || TO_CHAR(TO_DATE('27-' || M || '-' || Y, 'DD-MON-YY'), 'D') || '-' || TO_CHAR(TO_DATE('27' || M || Y, 'DDMMYY'), 'YYYYMMDD')) D27,
      NVL(
      (SELECT NVL(TBL_SURV_DTL.SURV_DTL_COMPLETED, 0)
        || '-'
        || TO_CHAR(TO_DATE('28-' || M || '-' || Y, 'DD-MON-YY'), 'D') || '-' || TO_CHAR(TO_DATE('28' || M || Y, 'DDMMYY'), 'YYYYMMDD') COMPLETED
      FROM TBL_SURV_DTL
      LEFT JOIN TBL_SURV_HDR
      ON TBL_SURV_DTL.SURV_DTL_HDR_ID         = TBL_SURV_HDR.SURV_HDR_ID
      WHERE (TBL_SURV_DTL.SURV_DTL_TIEBACK_ID = MAINQRY.TB_TIEBACK_ID
      AND TBL_SURV_HDR.SURV_HDR_DATE          = '28-' || M || '-' || Y)
      OR (TBL_SURV_HDR.SURV_HDR_DATE         IS NULL)
      ), 0
      || '-'
      || TO_CHAR(TO_DATE('28-' || M || '-' || Y, 'DD-MON-YY'), 'D') || '-' || TO_CHAR(TO_DATE('28' || M || Y, 'DDMMYY'), 'YYYYMMDD')) D28,
      NVL(
      (SELECT NVL(TBL_SURV_DTL.SURV_DTL_COMPLETED, 0)
        || '-'
        || TO_CHAR(TO_DATE('29-' || M || '-' || Y, 'DD-MON-YY'), 'D') || '-' || TO_CHAR(TO_DATE('29' || M || Y, 'DDMMYY'), 'YYYYMMDD') COMPLETED
      FROM TBL_SURV_DTL
      LEFT JOIN TBL_SURV_HDR
      ON TBL_SURV_DTL.SURV_DTL_HDR_ID         = TBL_SURV_HDR.SURV_HDR_ID
      WHERE (TBL_SURV_DTL.SURV_DTL_TIEBACK_ID = MAINQRY.TB_TIEBACK_ID
      AND TBL_SURV_HDR.SURV_HDR_DATE          = '29-' || M || '-' || Y)
      OR (TBL_SURV_HDR.SURV_HDR_DATE         IS NULL)
      ), 0
      || '-'
      || TO_CHAR(TO_DATE('29-' || M || '-' || Y, 'DD-MON-YY'), 'D') || '-' || TO_CHAR(TO_DATE('29' || M || Y, 'DDMMYY'), 'YYYYMMDD')) D29
    FROM V_TBL_SURV_TIEBACKS MAINQRY
    INNER JOIN SYS_NODES_ATTRIB SYS_NODES_ATTRIB_HOST
    ON MAINQRY.TB_HOST_ID = SYS_NODES_ATTRIB_HOST.REC_TAG
    INNER JOIN SYS_NODES_ATTRIB SYS_NODES_ATTRIB_TIEBACK
    ON MAINQRY.TB_TIEBACK_ID = SYS_NODES_ATTRIB_TIEBACK.REC_TAG
    ORDER BY HOST;
  RETURN V_RC;
END SP_SYS_Q_RPT_DS_01_SUB_3;

/
--------------------------------------------------------
--  DDL for Function SP_SYS_Q_RPT_DS_01_SUB_4
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE FUNCTION "IMSA"."SP_SYS_Q_RPT_DS_01_SUB_4" 
(
  M IN VARCHAR2 
, Y IN VARCHAR2 
) RETURN SYS_REFCURSOR AS 
  V_RC SYS_REFCURSOR;
BEGIN
  OPEN V_RC FOR 
    SELECT SYS_NODES_ATTRIB_HOST.NODE_DESC HOST,
      SYS_NODES_ATTRIB_TIEBACK.NODE_DESC TIEBACKS,
      NVL(
      (SELECT NVL(TBL_SURV_DTL.SURV_DTL_COMPLETED, 0)
        || '-'
        || TO_CHAR(TO_DATE('01-' || M || '-' || Y, 'DD-MON-YY'), 'D') || '-' || TO_CHAR(TO_DATE('01' || M || Y, 'DDMMYY'), 'YYYYMMDD') COMPLETED
      FROM TBL_SURV_DTL
      LEFT JOIN TBL_SURV_HDR
      ON TBL_SURV_DTL.SURV_DTL_HDR_ID         = TBL_SURV_HDR.SURV_HDR_ID
      WHERE (TBL_SURV_DTL.SURV_DTL_TIEBACK_ID = MAINQRY.TB_TIEBACK_ID
      AND TBL_SURV_HDR.SURV_HDR_DATE          = '01-' || M || '-' || Y)
      OR (TBL_SURV_HDR.SURV_HDR_DATE         IS NULL)
      ), 0
      || '-'
      || TO_CHAR(TO_DATE('01-' || M || '-' || Y, 'DD-MON-YY'), 'D') || '-' || TO_CHAR(TO_DATE('01' || M || Y, 'DDMMYY'), 'YYYYMMDD')) D1,
      NVL(
      (SELECT NVL(TBL_SURV_DTL.SURV_DTL_COMPLETED, 0)
        || '-'
        || TO_CHAR(TO_DATE('02-' || M || '-' || Y, 'DD-MON-YY'), 'D') || '-' || TO_CHAR(TO_DATE('02' || M || Y, 'DDMMYY'), 'YYYYMMDD') COMPLETED
      FROM TBL_SURV_DTL
      LEFT JOIN TBL_SURV_HDR
      ON TBL_SURV_DTL.SURV_DTL_HDR_ID         = TBL_SURV_HDR.SURV_HDR_ID
      WHERE (TBL_SURV_DTL.SURV_DTL_TIEBACK_ID = MAINQRY.TB_TIEBACK_ID
      AND TBL_SURV_HDR.SURV_HDR_DATE          = '02-' || M || '-' || Y)
      OR (TBL_SURV_HDR.SURV_HDR_DATE         IS NULL)
      ), 0
      || '-'
      || TO_CHAR(TO_DATE('02-' || M || '-' || Y, 'DD-MON-YY'), 'D') || '-' || TO_CHAR(TO_DATE('02' || M || Y, 'DDMMYY'), 'YYYYMMDD')) D2,
      NVL(
      (SELECT NVL(TBL_SURV_DTL.SURV_DTL_COMPLETED, 0)
        || '-'
        || TO_CHAR(TO_DATE('03-' || M || '-' || Y, 'DD-MON-YY'), 'D') || '-' || TO_CHAR(TO_DATE('03' || M || Y, 'DDMMYY'), 'YYYYMMDD') COMPLETED
      FROM TBL_SURV_DTL
      LEFT JOIN TBL_SURV_HDR
      ON TBL_SURV_DTL.SURV_DTL_HDR_ID         = TBL_SURV_HDR.SURV_HDR_ID
      WHERE (TBL_SURV_DTL.SURV_DTL_TIEBACK_ID = MAINQRY.TB_TIEBACK_ID
      AND TBL_SURV_HDR.SURV_HDR_DATE          = '03-' || M || '-' || Y)
      OR (TBL_SURV_HDR.SURV_HDR_DATE         IS NULL)
      ), 0
      || '-'
      || TO_CHAR(TO_DATE('03-' || M || '-' || Y, 'DD-MON-YY'), 'D') || '-' || TO_CHAR(TO_DATE('03' || M || Y, 'DDMMYY'), 'YYYYMMDD')) D3,
      NVL(
      (SELECT NVL(TBL_SURV_DTL.SURV_DTL_COMPLETED, 0)
        || '-'
        || TO_CHAR(TO_DATE('04-' || M || '-' || Y, 'DD-MON-YY'), 'D') || '-' || TO_CHAR(TO_DATE('04' || M || Y, 'DDMMYY'), 'YYYYMMDD') COMPLETED
      FROM TBL_SURV_DTL
      LEFT JOIN TBL_SURV_HDR
      ON TBL_SURV_DTL.SURV_DTL_HDR_ID         = TBL_SURV_HDR.SURV_HDR_ID
      WHERE (TBL_SURV_DTL.SURV_DTL_TIEBACK_ID = MAINQRY.TB_TIEBACK_ID
      AND TBL_SURV_HDR.SURV_HDR_DATE          = '04-' || M || '-' || Y)
      OR (TBL_SURV_HDR.SURV_HDR_DATE         IS NULL)
      ), 0
      || '-'
      || TO_CHAR(TO_DATE('04-' || M || '-' || Y, 'DD-MON-YY'), 'D') || '-' || TO_CHAR(TO_DATE('04' || M || Y, 'DDMMYY'), 'YYYYMMDD')) D4,
      NVL(
      (SELECT NVL(TBL_SURV_DTL.SURV_DTL_COMPLETED, 0)
        || '-'
        || TO_CHAR(TO_DATE('05-' || M || '-' || Y, 'DD-MON-YY'), 'D') || '-' || TO_CHAR(TO_DATE('05' || M || Y, 'DDMMYY'), 'YYYYMMDD') COMPLETED
      FROM TBL_SURV_DTL
      LEFT JOIN TBL_SURV_HDR
      ON TBL_SURV_DTL.SURV_DTL_HDR_ID         = TBL_SURV_HDR.SURV_HDR_ID
      WHERE (TBL_SURV_DTL.SURV_DTL_TIEBACK_ID = MAINQRY.TB_TIEBACK_ID
      AND TBL_SURV_HDR.SURV_HDR_DATE          = '05-' || M || '-' || Y)
      OR (TBL_SURV_HDR.SURV_HDR_DATE         IS NULL)
      ), 0
      || '-'
      || TO_CHAR(TO_DATE('05-' || M || '-' || Y, 'DD-MON-YY'), 'D') || '-' || TO_CHAR(TO_DATE('05' || M || Y, 'DDMMYY'), 'YYYYMMDD')) D5,
      NVL(
      (SELECT NVL(TBL_SURV_DTL.SURV_DTL_COMPLETED, 0)
        || '-'
        || TO_CHAR(TO_DATE('06-' || M || '-' || Y, 'DD-MON-YY'), 'D') || '-' || TO_CHAR(TO_DATE('06' || M || Y, 'DDMMYY'), 'YYYYMMDD') COMPLETED
      FROM TBL_SURV_DTL
      LEFT JOIN TBL_SURV_HDR
      ON TBL_SURV_DTL.SURV_DTL_HDR_ID         = TBL_SURV_HDR.SURV_HDR_ID
      WHERE (TBL_SURV_DTL.SURV_DTL_TIEBACK_ID = MAINQRY.TB_TIEBACK_ID
      AND TBL_SURV_HDR.SURV_HDR_DATE          = '06-' || M || '-' || Y)
      OR (TBL_SURV_HDR.SURV_HDR_DATE         IS NULL)
      ), 0
      || '-'
      || TO_CHAR(TO_DATE('06-' || M || '-' || Y, 'DD-MON-YY'), 'D') || '-' || TO_CHAR(TO_DATE('06' || M || Y, 'DDMMYY'), 'YYYYMMDD')) D6,
      NVL(
      (SELECT NVL(TBL_SURV_DTL.SURV_DTL_COMPLETED, 0)
        || '-'
        || TO_CHAR(TO_DATE('07-' || M || '-' || Y, 'DD-MON-YY'), 'D') || '-' || TO_CHAR(TO_DATE('07' || M || Y, 'DDMMYY'), 'YYYYMMDD') COMPLETED
      FROM TBL_SURV_DTL
      LEFT JOIN TBL_SURV_HDR
      ON TBL_SURV_DTL.SURV_DTL_HDR_ID         = TBL_SURV_HDR.SURV_HDR_ID
      WHERE (TBL_SURV_DTL.SURV_DTL_TIEBACK_ID = MAINQRY.TB_TIEBACK_ID
      AND TBL_SURV_HDR.SURV_HDR_DATE          = '07-' || M || '-' || Y)
      OR (TBL_SURV_HDR.SURV_HDR_DATE         IS NULL)
      ), 0
      || '-'
      || TO_CHAR(TO_DATE('07-' || M || '-' || Y, 'DD-MON-YY'), 'D') || '-' || TO_CHAR(TO_DATE('07' || M || Y, 'DDMMYY'), 'YYYYMMDD')) D7,
      NVL(
      (SELECT NVL(TBL_SURV_DTL.SURV_DTL_COMPLETED, 0)
        || '-'
        || TO_CHAR(TO_DATE('08-' || M || '-' || Y, 'DD-MON-YY'), 'D') || '-' || TO_CHAR(TO_DATE('08' || M || Y, 'DDMMYY'), 'YYYYMMDD') COMPLETED
      FROM TBL_SURV_DTL
      LEFT JOIN TBL_SURV_HDR
      ON TBL_SURV_DTL.SURV_DTL_HDR_ID         = TBL_SURV_HDR.SURV_HDR_ID
      WHERE (TBL_SURV_DTL.SURV_DTL_TIEBACK_ID = MAINQRY.TB_TIEBACK_ID
      AND TBL_SURV_HDR.SURV_HDR_DATE          = '08-' || M || '-' || Y)
      OR (TBL_SURV_HDR.SURV_HDR_DATE         IS NULL)
      ), 0
      || '-'
      || TO_CHAR(TO_DATE('08-' || M || '-' || Y, 'DD-MON-YY'), 'D') || '-' || TO_CHAR(TO_DATE('08' || M || Y, 'DDMMYY'), 'YYYYMMDD')) D8,
      NVL(
      (SELECT NVL(TBL_SURV_DTL.SURV_DTL_COMPLETED, 0)
        || '-'
        || TO_CHAR(TO_DATE('09-' || M || '-' || Y, 'DD-MON-YY'), 'D') || '-' || TO_CHAR(TO_DATE('09' || M || Y, 'DDMMYY'), 'YYYYMMDD') COMPLETED
      FROM TBL_SURV_DTL
      LEFT JOIN TBL_SURV_HDR
      ON TBL_SURV_DTL.SURV_DTL_HDR_ID         = TBL_SURV_HDR.SURV_HDR_ID
      WHERE (TBL_SURV_DTL.SURV_DTL_TIEBACK_ID = MAINQRY.TB_TIEBACK_ID
      AND TBL_SURV_HDR.SURV_HDR_DATE          = '09-' || M || '-' || Y)
      OR (TBL_SURV_HDR.SURV_HDR_DATE         IS NULL)
      ), 0
      || '-'
      || TO_CHAR(TO_DATE('09-' || M || '-' || Y, 'DD-MON-YY'), 'D') || '-' || TO_CHAR(TO_DATE('09' || M || Y, 'DDMMYY'), 'YYYYMMDD')) D9,
      NVL(
      (SELECT NVL(TBL_SURV_DTL.SURV_DTL_COMPLETED, 0)
        || '-'
        || TO_CHAR(TO_DATE('10-' || M || '-' || Y, 'DD-MON-YY'), 'D') || '-' || TO_CHAR(TO_DATE('10' || M || Y, 'DDMMYY'), 'YYYYMMDD') COMPLETED
      FROM TBL_SURV_DTL
      LEFT JOIN TBL_SURV_HDR
      ON TBL_SURV_DTL.SURV_DTL_HDR_ID         = TBL_SURV_HDR.SURV_HDR_ID
      WHERE (TBL_SURV_DTL.SURV_DTL_TIEBACK_ID = MAINQRY.TB_TIEBACK_ID
      AND TBL_SURV_HDR.SURV_HDR_DATE          = '10-' || M || '-' || Y)
      OR (TBL_SURV_HDR.SURV_HDR_DATE         IS NULL)
      ), 0
      || '-'
      || TO_CHAR(TO_DATE('10-' || M || '-' || Y, 'DD-MON-YY'), 'D') || '-' || TO_CHAR(TO_DATE('10' || M || Y, 'DDMMYY'), 'YYYYMMDD')) D10,
      NVL(
      (SELECT NVL(TBL_SURV_DTL.SURV_DTL_COMPLETED, 0)
        || '-'
        || TO_CHAR(TO_DATE('11-' || M || '-' || Y, 'DD-MON-YY'), 'D') || '-' || TO_CHAR(TO_DATE('11' || M || Y, 'DDMMYY'), 'YYYYMMDD') COMPLETED
      FROM TBL_SURV_DTL
      LEFT JOIN TBL_SURV_HDR
      ON TBL_SURV_DTL.SURV_DTL_HDR_ID         = TBL_SURV_HDR.SURV_HDR_ID
      WHERE (TBL_SURV_DTL.SURV_DTL_TIEBACK_ID = MAINQRY.TB_TIEBACK_ID
      AND TBL_SURV_HDR.SURV_HDR_DATE          = '11-' || M || '-' || Y)
      OR (TBL_SURV_HDR.SURV_HDR_DATE         IS NULL)
      ), 0
      || '-'
      || TO_CHAR(TO_DATE('11-' || M || '-' || Y, 'DD-MON-YY'), 'D') || '-' || TO_CHAR(TO_DATE('11' || M || Y, 'DDMMYY'), 'YYYYMMDD')) D11,
      NVL(
      (SELECT NVL(TBL_SURV_DTL.SURV_DTL_COMPLETED, 0)
        || '-'
        || TO_CHAR(TO_DATE('12-' || M || '-' || Y, 'DD-MON-YY'), 'D') || '-' || TO_CHAR(TO_DATE('12' || M || Y, 'DDMMYY'), 'YYYYMMDD') COMPLETED
      FROM TBL_SURV_DTL
      LEFT JOIN TBL_SURV_HDR
      ON TBL_SURV_DTL.SURV_DTL_HDR_ID         = TBL_SURV_HDR.SURV_HDR_ID
      WHERE (TBL_SURV_DTL.SURV_DTL_TIEBACK_ID = MAINQRY.TB_TIEBACK_ID
      AND TBL_SURV_HDR.SURV_HDR_DATE          = '12-' || M || '-' || Y)
      OR (TBL_SURV_HDR.SURV_HDR_DATE         IS NULL)
      ), 0
      || '-'
      || TO_CHAR(TO_DATE('12-' || M || '-' || Y, 'DD-MON-YY'), 'D') || '-' || TO_CHAR(TO_DATE('12' || M || Y, 'DDMMYY'), 'YYYYMMDD')) D12,
      NVL(
      (SELECT NVL(TBL_SURV_DTL.SURV_DTL_COMPLETED, 0)
        || '-'
        || TO_CHAR(TO_DATE('13-' || M || '-' || Y, 'DD-MON-YY'), 'D') || '-' || TO_CHAR(TO_DATE('13' || M || Y, 'DDMMYY'), 'YYYYMMDD') COMPLETED
      FROM TBL_SURV_DTL
      LEFT JOIN TBL_SURV_HDR
      ON TBL_SURV_DTL.SURV_DTL_HDR_ID         = TBL_SURV_HDR.SURV_HDR_ID
      WHERE (TBL_SURV_DTL.SURV_DTL_TIEBACK_ID = MAINQRY.TB_TIEBACK_ID
      AND TBL_SURV_HDR.SURV_HDR_DATE          = '13-' || M || '-' || Y)
      OR (TBL_SURV_HDR.SURV_HDR_DATE         IS NULL)
      ), 0
      || '-'
      || TO_CHAR(TO_DATE('13-' || M || '-' || Y, 'DD-MON-YY'), 'D') || '-' || TO_CHAR(TO_DATE('13' || M || Y, 'DDMMYY'), 'YYYYMMDD')) D13,
      NVL(
      (SELECT NVL(TBL_SURV_DTL.SURV_DTL_COMPLETED, 0)
        || '-'
        || TO_CHAR(TO_DATE('14-' || M || '-' || Y, 'DD-MON-YY'), 'D') || '-' || TO_CHAR(TO_DATE('14' || M || Y, 'DDMMYY'), 'YYYYMMDD') COMPLETED
      FROM TBL_SURV_DTL
      LEFT JOIN TBL_SURV_HDR
      ON TBL_SURV_DTL.SURV_DTL_HDR_ID         = TBL_SURV_HDR.SURV_HDR_ID
      WHERE (TBL_SURV_DTL.SURV_DTL_TIEBACK_ID = MAINQRY.TB_TIEBACK_ID
      AND TBL_SURV_HDR.SURV_HDR_DATE          = '14-' || M || '-' || Y)
      OR (TBL_SURV_HDR.SURV_HDR_DATE         IS NULL)
      ), 0
      || '-'
      || TO_CHAR(TO_DATE('14-' || M || '-' || Y, 'DD-MON-YY'), 'D') || '-' || TO_CHAR(TO_DATE('14' || M || Y, 'DDMMYY'), 'YYYYMMDD')) D14,
      NVL(
      (SELECT NVL(TBL_SURV_DTL.SURV_DTL_COMPLETED, 0)
        || '-'
        || TO_CHAR(TO_DATE('15-' || M || '-' || Y, 'DD-MON-YY'), 'D') || '-' || TO_CHAR(TO_DATE('15' || M || Y, 'DDMMYY'), 'YYYYMMDD') COMPLETED
      FROM TBL_SURV_DTL
      LEFT JOIN TBL_SURV_HDR
      ON TBL_SURV_DTL.SURV_DTL_HDR_ID         = TBL_SURV_HDR.SURV_HDR_ID
      WHERE (TBL_SURV_DTL.SURV_DTL_TIEBACK_ID = MAINQRY.TB_TIEBACK_ID
      AND TBL_SURV_HDR.SURV_HDR_DATE          = '15-' || M || '-' || Y)
      OR (TBL_SURV_HDR.SURV_HDR_DATE         IS NULL)
      ), 0
      || '-'
      || TO_CHAR(TO_DATE('15-' || M || '-' || Y, 'DD-MON-YY'), 'D') || '-' || TO_CHAR(TO_DATE('15' || M || Y, 'DDMMYY'), 'YYYYMMDD')) D15,
      NVL(
      (SELECT NVL(TBL_SURV_DTL.SURV_DTL_COMPLETED, 0)
        || '-'
        || TO_CHAR(TO_DATE('16-' || M || '-' || Y, 'DD-MON-YY'), 'D') || '-' || TO_CHAR(TO_DATE('16' || M || Y, 'DDMMYY'), 'YYYYMMDD') COMPLETED
      FROM TBL_SURV_DTL
      LEFT JOIN TBL_SURV_HDR
      ON TBL_SURV_DTL.SURV_DTL_HDR_ID         = TBL_SURV_HDR.SURV_HDR_ID
      WHERE (TBL_SURV_DTL.SURV_DTL_TIEBACK_ID = MAINQRY.TB_TIEBACK_ID
      AND TBL_SURV_HDR.SURV_HDR_DATE          = '16-' || M || '-' || Y)
      OR (TBL_SURV_HDR.SURV_HDR_DATE         IS NULL)
      ), 0
      || '-'
      || TO_CHAR(TO_DATE('16-' || M || '-' || Y, 'DD-MON-YY'), 'D') || '-' || TO_CHAR(TO_DATE('16' || M || Y, 'DDMMYY'), 'YYYYMMDD')) D16,
      NVL(
      (SELECT NVL(TBL_SURV_DTL.SURV_DTL_COMPLETED, 0)
        || '-'
        || TO_CHAR(TO_DATE('17-' || M || '-' || Y, 'DD-MON-YY'), 'D') || '-' || TO_CHAR(TO_DATE('17' || M || Y, 'DDMMYY'), 'YYYYMMDD') COMPLETED
      FROM TBL_SURV_DTL
      LEFT JOIN TBL_SURV_HDR
      ON TBL_SURV_DTL.SURV_DTL_HDR_ID         = TBL_SURV_HDR.SURV_HDR_ID
      WHERE (TBL_SURV_DTL.SURV_DTL_TIEBACK_ID = MAINQRY.TB_TIEBACK_ID
      AND TBL_SURV_HDR.SURV_HDR_DATE          = '17-' || M || '-' || Y)
      OR (TBL_SURV_HDR.SURV_HDR_DATE         IS NULL)
      ), 0
      || '-'
      || TO_CHAR(TO_DATE('17-' || M || '-' || Y, 'DD-MON-YY'), 'D') || '-' || TO_CHAR(TO_DATE('17' || M || Y, 'DDMMYY'), 'YYYYMMDD')) D17,
      NVL(
      (SELECT NVL(TBL_SURV_DTL.SURV_DTL_COMPLETED, 0)
        || '-'
        || TO_CHAR(TO_DATE('18-' || M || '-' || Y, 'DD-MON-YY'), 'D') || '-' || TO_CHAR(TO_DATE('18' || M || Y, 'DDMMYY'), 'YYYYMMDD') COMPLETED
      FROM TBL_SURV_DTL
      LEFT JOIN TBL_SURV_HDR
      ON TBL_SURV_DTL.SURV_DTL_HDR_ID         = TBL_SURV_HDR.SURV_HDR_ID
      WHERE (TBL_SURV_DTL.SURV_DTL_TIEBACK_ID = MAINQRY.TB_TIEBACK_ID
      AND TBL_SURV_HDR.SURV_HDR_DATE          = '18-' || M || '-' || Y)
      OR (TBL_SURV_HDR.SURV_HDR_DATE         IS NULL)
      ), 0
      || '-'
      || TO_CHAR(TO_DATE('18-' || M || '-' || Y, 'DD-MON-YY'), 'D') || '-' || TO_CHAR(TO_DATE('18' || M || Y, 'DDMMYY'), 'YYYYMMDD')) D18,
      NVL(
      (SELECT NVL(TBL_SURV_DTL.SURV_DTL_COMPLETED, 0)
        || '-'
        || TO_CHAR(TO_DATE('19-' || M || '-' || Y, 'DD-MON-YY'), 'D') || '-' || TO_CHAR(TO_DATE('19' || M || Y, 'DDMMYY'), 'YYYYMMDD') COMPLETED
      FROM TBL_SURV_DTL
      LEFT JOIN TBL_SURV_HDR
      ON TBL_SURV_DTL.SURV_DTL_HDR_ID         = TBL_SURV_HDR.SURV_HDR_ID
      WHERE (TBL_SURV_DTL.SURV_DTL_TIEBACK_ID = MAINQRY.TB_TIEBACK_ID
      AND TBL_SURV_HDR.SURV_HDR_DATE          = '19-' || M || '-' || Y)
      OR (TBL_SURV_HDR.SURV_HDR_DATE         IS NULL)
      ), 0
      || '-'
      || TO_CHAR(TO_DATE('19-' || M || '-' || Y, 'DD-MON-YY'), 'D') || '-' || TO_CHAR(TO_DATE('19' || M || Y, 'DDMMYY'), 'YYYYMMDD')) D19,
      NVL(
      (SELECT NVL(TBL_SURV_DTL.SURV_DTL_COMPLETED, 0)
        || '-'
        || TO_CHAR(TO_DATE('20-' || M || '-' || Y, 'DD-MON-YY'), 'D') || '-' || TO_CHAR(TO_DATE('20' || M || Y, 'DDMMYY'), 'YYYYMMDD') COMPLETED
      FROM TBL_SURV_DTL
      LEFT JOIN TBL_SURV_HDR
      ON TBL_SURV_DTL.SURV_DTL_HDR_ID         = TBL_SURV_HDR.SURV_HDR_ID
      WHERE (TBL_SURV_DTL.SURV_DTL_TIEBACK_ID = MAINQRY.TB_TIEBACK_ID
      AND TBL_SURV_HDR.SURV_HDR_DATE          = '20-' || M || '-' || Y)
      OR (TBL_SURV_HDR.SURV_HDR_DATE         IS NULL)
      ), 0
      || '-'
      || TO_CHAR(TO_DATE('20-' || M || '-' || Y, 'DD-MON-YY'), 'D') || '-' || TO_CHAR(TO_DATE('20' || M || Y, 'DDMMYY'), 'YYYYMMDD')) D20,
      NVL(
      (SELECT NVL(TBL_SURV_DTL.SURV_DTL_COMPLETED, 0)
        || '-'
        || TO_CHAR(TO_DATE('21-' || M || '-' || Y, 'DD-MON-YY'), 'D') || '-' || TO_CHAR(TO_DATE('21' || M || Y, 'DDMMYY'), 'YYYYMMDD') COMPLETED
      FROM TBL_SURV_DTL
      LEFT JOIN TBL_SURV_HDR
      ON TBL_SURV_DTL.SURV_DTL_HDR_ID         = TBL_SURV_HDR.SURV_HDR_ID
      WHERE (TBL_SURV_DTL.SURV_DTL_TIEBACK_ID = MAINQRY.TB_TIEBACK_ID
      AND TBL_SURV_HDR.SURV_HDR_DATE          = '21-' || M || '-' || Y)
      OR (TBL_SURV_HDR.SURV_HDR_DATE         IS NULL)
      ), 0
      || '-'
      || TO_CHAR(TO_DATE('21-' || M || '-' || Y, 'DD-MON-YY'), 'D') || '-' || TO_CHAR(TO_DATE('21' || M || Y, 'DDMMYY'), 'YYYYMMDD')) D21,
      NVL(
      (SELECT NVL(TBL_SURV_DTL.SURV_DTL_COMPLETED, 0)
        || '-'
        || TO_CHAR(TO_DATE('22-' || M || '-' || Y, 'DD-MON-YY'), 'D') || '-' || TO_CHAR(TO_DATE('22' || M || Y, 'DDMMYY'), 'YYYYMMDD') COMPLETED
      FROM TBL_SURV_DTL
      LEFT JOIN TBL_SURV_HDR
      ON TBL_SURV_DTL.SURV_DTL_HDR_ID         = TBL_SURV_HDR.SURV_HDR_ID
      WHERE (TBL_SURV_DTL.SURV_DTL_TIEBACK_ID = MAINQRY.TB_TIEBACK_ID
      AND TBL_SURV_HDR.SURV_HDR_DATE          = '22-' || M || '-' || Y)
      OR (TBL_SURV_HDR.SURV_HDR_DATE         IS NULL)
      ), 0
      || '-'
      || TO_CHAR(TO_DATE('22-' || M || '-' || Y, 'DD-MON-YY'), 'D') || '-' || TO_CHAR(TO_DATE('22' || M || Y, 'DDMMYY'), 'YYYYMMDD')) D22,
      NVL(
      (SELECT NVL(TBL_SURV_DTL.SURV_DTL_COMPLETED, 0)
        || '-'
        || TO_CHAR(TO_DATE('23-' || M || '-' || Y, 'DD-MON-YY'), 'D') || '-' || TO_CHAR(TO_DATE('23' || M || Y, 'DDMMYY'), 'YYYYMMDD') COMPLETED
      FROM TBL_SURV_DTL
      LEFT JOIN TBL_SURV_HDR
      ON TBL_SURV_DTL.SURV_DTL_HDR_ID         = TBL_SURV_HDR.SURV_HDR_ID
      WHERE (TBL_SURV_DTL.SURV_DTL_TIEBACK_ID = MAINQRY.TB_TIEBACK_ID
      AND TBL_SURV_HDR.SURV_HDR_DATE          = '23-' || M || '-' || Y)
      OR (TBL_SURV_HDR.SURV_HDR_DATE         IS NULL)
      ), 0
      || '-'
      || TO_CHAR(TO_DATE('23-' || M || '-' || Y, 'DD-MON-YY'), 'D') || '-' || TO_CHAR(TO_DATE('23' || M || Y, 'DDMMYY'), 'YYYYMMDD')) D23,
      NVL(
      (SELECT NVL(TBL_SURV_DTL.SURV_DTL_COMPLETED, 0)
        || '-'
        || TO_CHAR(TO_DATE('24-' || M || '-' || Y, 'DD-MON-YY'), 'D') || '-' || TO_CHAR(TO_DATE('24' || M || Y, 'DDMMYY'), 'YYYYMMDD') COMPLETED
      FROM TBL_SURV_DTL
      LEFT JOIN TBL_SURV_HDR
      ON TBL_SURV_DTL.SURV_DTL_HDR_ID         = TBL_SURV_HDR.SURV_HDR_ID
      WHERE (TBL_SURV_DTL.SURV_DTL_TIEBACK_ID = MAINQRY.TB_TIEBACK_ID
      AND TBL_SURV_HDR.SURV_HDR_DATE          = '24-' || M || '-' || Y)
      OR (TBL_SURV_HDR.SURV_HDR_DATE         IS NULL)
      ), 0
      || '-'
      || TO_CHAR(TO_DATE('24-' || M || '-' || Y, 'DD-MON-YY'), 'D') || '-' || TO_CHAR(TO_DATE('24' || M || Y, 'DDMMYY'), 'YYYYMMDD')) D24,
      NVL(
      (SELECT NVL(TBL_SURV_DTL.SURV_DTL_COMPLETED, 0)
        || '-'
        || TO_CHAR(TO_DATE('25-' || M || '-' || Y, 'DD-MON-YY'), 'D') || '-' || TO_CHAR(TO_DATE('25' || M || Y, 'DDMMYY'), 'YYYYMMDD') COMPLETED
      FROM TBL_SURV_DTL
      LEFT JOIN TBL_SURV_HDR
      ON TBL_SURV_DTL.SURV_DTL_HDR_ID         = TBL_SURV_HDR.SURV_HDR_ID
      WHERE (TBL_SURV_DTL.SURV_DTL_TIEBACK_ID = MAINQRY.TB_TIEBACK_ID
      AND TBL_SURV_HDR.SURV_HDR_DATE          = '25-' || M || '-' || Y)
      OR (TBL_SURV_HDR.SURV_HDR_DATE         IS NULL)
      ), 0
      || '-'
      || TO_CHAR(TO_DATE('25-' || M || '-' || Y, 'DD-MON-YY'), 'D') || '-' || TO_CHAR(TO_DATE('25' || M || Y, 'DDMMYY'), 'YYYYMMDD')) D25,
      NVL(
      (SELECT NVL(TBL_SURV_DTL.SURV_DTL_COMPLETED, 0)
        || '-'
        || TO_CHAR(TO_DATE('26-' || M || '-' || Y, 'DD-MON-YY'), 'D') || '-' || TO_CHAR(TO_DATE('26' || M || Y, 'DDMMYY'), 'YYYYMMDD') COMPLETED
      FROM TBL_SURV_DTL
      LEFT JOIN TBL_SURV_HDR
      ON TBL_SURV_DTL.SURV_DTL_HDR_ID         = TBL_SURV_HDR.SURV_HDR_ID
      WHERE (TBL_SURV_DTL.SURV_DTL_TIEBACK_ID = MAINQRY.TB_TIEBACK_ID
      AND TBL_SURV_HDR.SURV_HDR_DATE          = '26-' || M || '-' || Y)
      OR (TBL_SURV_HDR.SURV_HDR_DATE         IS NULL)
      ), 0
      || '-'
      || TO_CHAR(TO_DATE('26-' || M || '-' || Y, 'DD-MON-YY'), 'D') || '-' || TO_CHAR(TO_DATE('26' || M || Y, 'DDMMYY'), 'YYYYMMDD')) D26,
      NVL(
      (SELECT NVL(TBL_SURV_DTL.SURV_DTL_COMPLETED, 0)
        || '-'
        || TO_CHAR(TO_DATE('27-' || M || '-' || Y, 'DD-MON-YY'), 'D') || '-' || TO_CHAR(TO_DATE('27' || M || Y, 'DDMMYY'), 'YYYYMMDD') COMPLETED
      FROM TBL_SURV_DTL
      LEFT JOIN TBL_SURV_HDR
      ON TBL_SURV_DTL.SURV_DTL_HDR_ID         = TBL_SURV_HDR.SURV_HDR_ID
      WHERE (TBL_SURV_DTL.SURV_DTL_TIEBACK_ID = MAINQRY.TB_TIEBACK_ID
      AND TBL_SURV_HDR.SURV_HDR_DATE          = '27-' || M || '-' || Y)
      OR (TBL_SURV_HDR.SURV_HDR_DATE         IS NULL)
      ), 0
      || '-'
      || TO_CHAR(TO_DATE('27-' || M || '-' || Y, 'DD-MON-YY'), 'D') || '-' || TO_CHAR(TO_DATE('27' || M || Y, 'DDMMYY'), 'YYYYMMDD')) D27,
      NVL(
      (SELECT NVL(TBL_SURV_DTL.SURV_DTL_COMPLETED, 0)
        || '-'
        || TO_CHAR(TO_DATE('28-' || M || '-' || Y, 'DD-MON-YY'), 'D') || '-' || TO_CHAR(TO_DATE('28' || M || Y, 'DDMMYY'), 'YYYYMMDD') COMPLETED
      FROM TBL_SURV_DTL
      LEFT JOIN TBL_SURV_HDR
      ON TBL_SURV_DTL.SURV_DTL_HDR_ID         = TBL_SURV_HDR.SURV_HDR_ID
      WHERE (TBL_SURV_DTL.SURV_DTL_TIEBACK_ID = MAINQRY.TB_TIEBACK_ID
      AND TBL_SURV_HDR.SURV_HDR_DATE          = '28-' || M || '-' || Y)
      OR (TBL_SURV_HDR.SURV_HDR_DATE         IS NULL)
      ), 0
      || '-'
      || TO_CHAR(TO_DATE('28-' || M || '-' || Y, 'DD-MON-YY'), 'D') || '-' || TO_CHAR(TO_DATE('28' || M || Y, 'DDMMYY'), 'YYYYMMDD')) D28
    FROM V_TBL_SURV_TIEBACKS MAINQRY
    INNER JOIN SYS_NODES_ATTRIB SYS_NODES_ATTRIB_HOST
    ON MAINQRY.TB_HOST_ID = SYS_NODES_ATTRIB_HOST.REC_TAG
    INNER JOIN SYS_NODES_ATTRIB SYS_NODES_ATTRIB_TIEBACK
    ON MAINQRY.TB_TIEBACK_ID = SYS_NODES_ATTRIB_TIEBACK.REC_TAG
    ORDER BY HOST;
  RETURN V_RC;
END SP_SYS_Q_RPT_DS_01_SUB_4;

/
--------------------------------------------------------
--  DDL for Function SP_SYS_Q_RPT_RBI_11
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE FUNCTION "IMSA"."SP_SYS_Q_RPT_RBI_11" 
(
  P_DAT_TYPE IN NUMBER DEFAULT 1,  
  P_COLS IN VARCHAR2 DEFAULT '*',
  P_ASSET_COL IN VARCHAR2 DEFAULT 'ASSETID',
  P_ASSET_ID IN NUMBER DEFAULT 8956,
  P_WHERE IN VARCHAR2 DEFAULT '(FREQUENCYTYPEID=14030 OR  FREQUENCYTYPEID=14031 OR  FREQUENCYTYPEID=14032 OR  FREQUENCYTYPEID=14033)', 
  P_DATE IN DATE DEFAULT SYSDATE
) 
  RETURN SYS_REFCURSOR AS 
  V_RC SYS_REFCURSOR;
  V_WHERE VARCHAR2(1000):='';
  V_ORDER_BY VARCHAR2(1000):='';
  V_GROUP_BY VARCHAR2(1000):='';
BEGIN
  V_WHERE :=' WHERE DATTYPE=' || P_DAT_TYPE; 
  IF P_WHERE IS NOT NULL THEN
    V_WHERE:=' WHERE DATTYPE=' || P_DAT_TYPE || ' AND ' || P_WHERE;
  END IF;

  OPEN V_RC FOR 
        'SELECT ASSET_GROUP,
          ASSET,
          MITIGATION,
          DUEDATE DUE_DATE,
          CASE
            WHEN DUEDATECOLOR = ''RED'' THEN ''IndianRed''
            WHEN DUEDATECOLOR = ''ORANGE'' THEN ''SandyBrown''
            ELSE ''OliveDrab''
          END DUE_DATE_SYSTEM_COLOR,
          ASSETID,
            FREQNAME FREQUENCY,
            SYSTEMFIELD,
         CASE
              WHEN SYSTEMFIELD = ''1/1/1111''
              OR SYSTEMFIELD   = ''2/2/2222''
              OR SYSTEMFIELD   = ''3/3/3333''
              OR SYSTEMFIELD   = ''4/4/4444''
              THEN ''0''
              WHEN SP_TODATE(SYSTEMFIELD) < SP_TODATE(''' || P_DATE || ''')
              THEN ''1''
              ELSE 
              CASE WHEN DUEDATE = ''IMMEDIATE ACTION'' THEN ''1''
                ELSE ''0''
                END
                END IN_RBI_WORKSCOPE,          
          RBFF,
          ASSETID,
          DATTYPE,
          FREQUENCYTYPEID FREQUENCY_TYPE, 
          MITIGATIONTYPEID MITIGATION_TYPE 
        FROM
        (SELECT ASSET_GROUP, 
            ASSET, 
            MITIGATION, 
            FREQNAME,
            RBFF,
            SYSTEMFIELD,
            DUEDATE,
            DUEDATECOLOR,
            ROW_NUMBER() Over (Partition BY ASSET_GROUP, ASSET, MITIGATION, ASSETID, DATTYPE, MITIGATIONTYPEID Order By SP_TODATE(SYSTEMFIELD) ASC) SEQ,
            ASSETID,
            DATTYPE,
            FREQUENCYTYPEID,
            MITIGATIONTYPEID
          FROM       
          (SELECT ''('' || T1.GROUPCODE || '')'' || T1.GROUPNAME AS ASSET_GROUP, 
            ''('' || T1.ASSETCODE || '')'' || T1.ASSETNAME AS ASSET, 
            ''('' || T1.MITIGATIONCODE || '')'' || T1.MITIGATIONNAME AS MITIGATION, 
            T1.FREQNAME,
            T1.RBFF,
            (T1.SYSTEMFIELD) SYSTEMFIELD,
            T1.DUEDATE,
            T1.DUEDATECOLOR,
            T1.ASSETID,
            T1.DATTYPE,
            T1.FREQUENCYTYPEID,
            T1.MITIGATIONTYPEID
          FROM
            (SELECT SYS_Q_RPT_RBI_COMMON.GROUPCODE,
              SYS_Q_RPT_RBI_COMMON.GROUPNAME,
              SYS_Q_RPT_RBI_COMMON.ASSETCODE,
              SYS_Q_RPT_RBI_COMMON.ASSETNAME,
              SYS_Q_RPT_RBI_COMMON.MITIGATIONCODE,
              SYS_Q_RPT_RBI_COMMON.MITIGATIONNAME,
              SYS_Q_RPT_RBI_COMMON.FREQNAME,
              SYS_Q_RPT_RBI_COMMON.RBFF,
              SYS_Q_RPT_RBI_COMMON.LASTRECORD,
              SYS_Q_RPT_RBI_COMMON.ARL_OR_MTBF,
              SYS_Q_RPT_RBI_COMMON.SCE,
              CASE
                WHEN SYS_Q_RPT_RBI_COMMON.ARL_OR_MTBF = -1
                THEN ''N/A''
                ELSE
                  CASE
                    WHEN SYS_Q_RPT_RBI_COMMON.FREQUENCYTYPEID = 14033
                    THEN ''CONTINUOUS''
                    WHEN SYS_Q_RPT_RBI_COMMON.FREQUENCYTYPEID = 14032
                    THEN ''AD-HOC''
                    ELSE
                      CASE
                        WHEN SYS_Q_RPT_RBI_COMMON.LASTRECORD = ''1/1/1111''
                        OR SYS_Q_RPT_RBI_COMMON.ARL_OR_MTBF  = -2  OR SYS_Q_RPT_RBI_COMMON.RBFF         = ''**''
                        THEN ''IMMEDIATE ACTION''
                        ELSE TO_CHAR(SP_TODATE(SYS_Q_RPT_RBI_COMMON.LASTRECORD) + (365 * SYS_Q_RPT_RBI_COMMON.ARL_OR_MTBF), ''DD-MON-YYYY'')
                      END
                  END
              END DUEDATE,
              CASE
                WHEN SYS_Q_RPT_RBI_COMMON.ARL_OR_MTBF = -1
                THEN ''4/4/4444''
                ELSE
                  CASE
                    WHEN SYS_Q_RPT_RBI_COMMON.FREQUENCYTYPEID = 14033
                    THEN ''1/1/1111''
                    WHEN SYS_Q_RPT_RBI_COMMON.FREQUENCYTYPEID = 14032
                    THEN ''2/2/2222''
                    ELSE
                      CASE
                        WHEN SYS_Q_RPT_RBI_COMMON.LASTRECORD = ''1/1/1111''
                        OR SYS_Q_RPT_RBI_COMMON.ARL_OR_MTBF  = -1
                        THEN ''3/3/3333''
                        ELSE 
                          TO_CHAR(SP_TODATE(SYS_Q_RPT_RBI_COMMON.LASTRECORD) + (365 * SYS_Q_RPT_RBI_COMMON.ARL_OR_MTBF))
                      END
                  END
              END SYSTEMFIELD,
              SYS_Q_RPT_RBI_COMMON.MITIGATIONTYPE,
              SYS_Q_RPT_RBI_COMMON.MITIGATIONTYPEID,
              SYS_Q_RPT_RBI_COMMON.FREQUENCYTYPEID,
              SYS_Q_RPT_RBI_COMMON.ASSETID,
              SYS_Q_RPT_RBI_COMMON.DATTYPE,
              CASE
                WHEN UPPER(SYS_Q_RPT_RBI_COMMON.ARL_OR_MTBF) = -1
                THEN ''GREEN''
                ELSE
                  CASE
                    WHEN UPPER(SYS_Q_RPT_RBI_COMMON.FREQUENCYTYPEID) = 14033
                    THEN ''ORANGE''
                    WHEN UPPER(SYS_Q_RPT_RBI_COMMON.FREQUENCYTYPEID) = 14032
                    THEN ''RED''
                    ELSE
                      CASE
                        WHEN SYS_Q_RPT_RBI_COMMON.LASTRECORD = ''1/1/1111''
                        THEN ''RED''
                        WHEN SYS_Q_RPT_RBI_COMMON.ARL_OR_MTBF = -2
                        THEN ''RED''
                        ELSE
                          CASE
                            WHEN (SP_TODATE(SYS_Q_RPT_RBI_COMMON.LASTRECORD) + (365 * SYS_Q_RPT_RBI_COMMON.ARL_OR_MTBF)) < ADD_MONTHS(SP_TODATE(''' || P_DATE || '''), 12)
                            THEN
                              CASE
                                WHEN (SP_TODATE(SYS_Q_RPT_RBI_COMMON.LASTRECORD) + (365 * SYS_Q_RPT_RBI_COMMON.ARL_OR_MTBF)) < SP_TODATE(''' || P_DATE || ''') 
                                THEN ''RED''
                                ELSE ''ORANGE''
                              END
                            ELSE 
                              CASE
                                WHEN RBFF = ''**''
                                THEN ''RED''
                                ELSE ''GREEN''
                              END
                          END
                      END
                  END
              END DUEDATECOLOR
            FROM SYS_Q_RPT_RBI_COMMON
            ) T1
          ) 
          )
            INNER JOIN
            (SELECT SYS_TREE_STRUC.TRE_DAT_TAG
            FROM SYS_TREE_STRUC
            INNER JOIN SYS_NODES_ATTRIB
            ON SYS_TREE_STRUC.TRE_DAT_TAG                 = SYS_NODES_ATTRIB.REC_TAG
            WHERE SYS_TREE_STRUC.TRE_DAT_TYPE             = ' || P_DAT_TYPE || ' 
              START WITH SYS_TREE_STRUC.TRE_DAT_TAG       = ' || P_ASSET_ID || ' 
              CONNECT BY Prior SYS_TREE_STRUC.TRE_NOD_TAG = SYS_TREE_STRUC.TRE_NOD_TAG_PAR 
            ) T2 ON T2.TRE_DAT_TAG                        = ' || P_ASSET_COL || ' '         
            || V_WHERE || ' and seq=1 ORDER BY MITIGATION';

  RETURN V_RC;
EXCEPTION
  WHEN OTHERS THEN
        dbms_output.put_line('FAILED ' || SQLCODE || ' ' || SQLERRM);
    RETURN null;  
END SP_SYS_Q_RPT_RBI_11;

/
--------------------------------------------------------
--  DDL for Function SP_SYS_Q_RPT_RBI_12
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE FUNCTION "IMSA"."SP_SYS_Q_RPT_RBI_12" 
(
  P_DAT_TYPE IN NUMBER DEFAULT 1,  
  P_COLS IN VARCHAR2 DEFAULT '*',
  P_ASSET_COL IN VARCHAR2 DEFAULT 'ASSETID',
  P_ASSET_ID IN NUMBER DEFAULT 8956,
  P_WHERE IN VARCHAR2 DEFAULT '(FREQUENCYTYPEID=14030 OR  FREQUENCYTYPEID=14031 OR  FREQUENCYTYPEID=14032 OR  FREQUENCYTYPEID=14033)', 
  P_DATE IN DATE DEFAULT SYSDATE 
) 
  RETURN SYS_REFCURSOR AS 
  V_RC SYS_REFCURSOR;
  V_WHERE VARCHAR2(1000):='';
BEGIN
  V_WHERE :=' WHERE DATTYPE=' || P_DAT_TYPE;
  IF P_WHERE IS NOT NULL THEN
    V_WHERE:=' WHERE DATTYPE=' || P_DAT_TYPE || ' AND ' || P_WHERE;
  END IF;

  dbms_output.put_line('');

  OPEN V_RC FOR 
              'SELECT ''''
                || T2.GROUPCODE
                || ''-''
                || T2.GROUPNAME AS ASSET_GROUP,
                ''''
                || T2.ASSETCODE
                || ''-''
                || T2.ASSETNAME AS ASSET,
                ''''
                || T2.MITIGATIONCODE
                || ''-''
                || T2.MITIGATIONNAME AS MITIGATION,
                ''''
                || T2.FAILURETHREATCODE
                || ''-''
                || T2.FAILURETHREATNAME AS FAILURE_TREAT,
                CASE
                  WHEN T2.SYSTEMFIELD = ''1/1/1111''
                  OR T2.SYSTEMFIELD   = ''2/2/2222''
                  OR T2.SYSTEMFIELD   = ''3/3/3333''
                  OR T2.SYSTEMFIELD   = ''4/4/4444''
                  THEN T2.DUEDATE
                  ELSE T2.SYSTEMFIELD
                END DUE_DATE,
                CASE
                  WHEN T2.DUEDATECOLOR = ''RED''
                  THEN ''IndianRed''
                  WHEN T2.DUEDATECOLOR = ''ORANGE''
                  THEN ''SandyBrown''
                  ELSE ''OliveDrab''
                END DUE_DATE_SYSTEM_COLOR,
                T2.ASSETID,
                T2.DATTYPE,
                T2.FREQUENCYTYPEID FREQUENCY_TYPE,
                T2.MITIGATIONTYPEID MITIGATION_TYPE  
              FROM
                (SELECT SYS_Q_RPT_RBI_COMMON.GROUPCODE,
                  SYS_Q_RPT_RBI_COMMON.GROUPNAME,
                  SYS_Q_RPT_RBI_COMMON.ASSETCODE,
                  SYS_Q_RPT_RBI_COMMON.ASSETNAME,
                  SYS_Q_RPT_RBI_COMMON.MITIGATIONCODE,
                  SYS_Q_RPT_RBI_COMMON.MITIGATIONNAME,
                  SYS_Q_RPT_RBI_COMMON.FAILURETHREATCODE,
                  SYS_Q_RPT_RBI_COMMON.FAILURETHREATNAME,
                  SYS_Q_RPT_RBI_COMMON.FREQUENCYTYPEID,
                  SYS_Q_RPT_RBI_COMMON.MITIGATIONTYPEID,
                  SYS_Q_RPT_RBI_COMMON.FREQNAME,
                  SYS_Q_RPT_RBI_COMMON.RBFF,
                  SYS_Q_RPT_RBI_COMMON.LASTRECORD,
                  SYS_Q_RPT_RBI_COMMON.ARL_OR_MTBF,
                  SYS_Q_RPT_RBI_COMMON.SCE,
                  CASE
                    WHEN SYS_Q_RPT_RBI_COMMON.ARL_OR_MTBF = -1
                    THEN ''N/A''
                    ELSE
                      CASE
                        WHEN SYS_Q_RPT_RBI_COMMON.FREQUENCYTYPEID = 14033
                        THEN ''CONTINUOUS''
                        WHEN SYS_Q_RPT_RBI_COMMON.FREQUENCYTYPEID = 14032
                        THEN ''AD-HOC''
                        ELSE
                          CASE
                            WHEN SYS_Q_RPT_RBI_COMMON.LASTRECORD = ''1/1/1111''
                            OR SYS_Q_RPT_RBI_COMMON.ARL_OR_MTBF  = -2
                            THEN ''IMMEDIATE ACTION''
                            ELSE 
                              CASE WHEN SYS_Q_RPT_RBI_COMMON.LASTRECORD IS NOT NULL THEN
                                TO_CHAR(SP_TODATE(SYS_Q_RPT_RBI_COMMON.LASTRECORD) + (365 * SYS_Q_RPT_RBI_COMMON.ARL_OR_MTBF))
                              END
                          END
                      END
                  END DUEDATE,
                  CASE
                    WHEN SYS_Q_RPT_RBI_COMMON.ARL_OR_MTBF = -1
                    THEN ''4/4/4444''
                    ELSE
                      CASE
                        WHEN SYS_Q_RPT_RBI_COMMON.FREQUENCYTYPEID = 14033
                        THEN ''1/1/1111''
                        WHEN SYS_Q_RPT_RBI_COMMON.FREQUENCYTYPEID = 14032
                        THEN ''2/2/2222''
                        ELSE
                          CASE
                            WHEN SYS_Q_RPT_RBI_COMMON.LASTRECORD = ''1/1/1111''
                            OR SYS_Q_RPT_RBI_COMMON.ARL_OR_MTBF  = -1
                            THEN ''3/3/3333''
                            ELSE 
                              CASE WHEN SYS_Q_RPT_RBI_COMMON.LASTRECORD IS NOT NULL THEN
                                TO_CHAR(SP_TODATE(SYS_Q_RPT_RBI_COMMON.LASTRECORD) + (365 * SYS_Q_RPT_RBI_COMMON.ARL_OR_MTBF))
                              END
                          END
                      END
                  END SYSTEMFIELD,
                  CASE
                    WHEN UPPER(SYS_Q_RPT_RBI_COMMON.ARL_OR_MTBF) = -1
                    THEN ''GREEN''
                    ELSE
                      CASE
                        WHEN UPPER(SYS_Q_RPT_RBI_COMMON.FREQUENCYTYPEID) = 14033
                        THEN ''ORANGE''
                        WHEN UPPER(SYS_Q_RPT_RBI_COMMON.FREQUENCYTYPEID) = 14032
                        THEN ''RED''
                        ELSE
                          CASE
                            WHEN SYS_Q_RPT_RBI_COMMON.LASTRECORD = ''1/1/1111''
                            THEN ''RED''
                            WHEN SYS_Q_RPT_RBI_COMMON.ARL_OR_MTBF = -2
                            THEN ''RED''
                            ELSE
                              CASE WHEN SYS_Q_RPT_RBI_COMMON.LASTRECORD IS NOT NULL THEN
                                CASE
                                  WHEN (SP_TODATE(SYS_Q_RPT_RBI_COMMON.LASTRECORD) + (365 * SYS_Q_RPT_RBI_COMMON.ARL_OR_MTBF)) < ADD_MONTHS(SP_TODATE(''' || P_DATE || '''), 12)
                                  THEN
                                    CASE
                                      WHEN (SP_TODATE(SYS_Q_RPT_RBI_COMMON.LASTRECORD) + (365 * SYS_Q_RPT_RBI_COMMON.ARL_OR_MTBF)) < SP_TODATE(''' || P_DATE || ''') 
                                      THEN ''RED''
                                      ELSE ''ORANGE''
                                    END
                                  ELSE ''GREEN''
                                END
                              END
                          END
                      END
                  END DUEDATECOLOR,
                  SYS_Q_RPT_RBI_COMMON.MITIGATIONTYPE,
                  SYS_Q_RPT_RBI_COMMON.ASSETID,
                  SYS_Q_RPT_RBI_COMMON.DATTYPE
                FROM SYS_Q_RPT_RBI_COMMON
                ) T2 
          INNER JOIN
            (SELECT SYS_TREE_STRUC.TRE_DAT_TAG
            FROM SYS_TREE_STRUC
            INNER JOIN SYS_NODES_ATTRIB
            ON SYS_TREE_STRUC.TRE_DAT_TAG                 = SYS_NODES_ATTRIB.REC_TAG
            WHERE SYS_TREE_STRUC.TRE_DAT_TYPE             = ' || P_DAT_TYPE || ' 
              START WITH SYS_TREE_STRUC.TRE_DAT_TAG       = ' || P_ASSET_ID || ' 
              CONNECT BY Prior SYS_TREE_STRUC.TRE_NOD_TAG = SYS_TREE_STRUC.TRE_NOD_TAG_PAR
            ) T1 ON T1.TRE_DAT_TAG                        = ' || P_ASSET_COL || ' '         
            || V_WHERE || ' ORDER BY MITIGATION,
              FAILURE_TREAT';

  RETURN V_RC;
EXCEPTION
  WHEN OTHERS THEN
    DBMS_OUTPUT.PUT_LINE (SQLCODE || '-' || SQLERRM);
    RETURN null;  
END SP_SYS_Q_RPT_RBI_12;

/
--------------------------------------------------------
--  DDL for Function SP_SYS_Q_RPT_RBI_14
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE FUNCTION "IMSA"."SP_SYS_Q_RPT_RBI_14" 
(
  P_DAT_TYPE IN NUMBER DEFAULT 1,  
  P_COLS IN VARCHAR2 DEFAULT '*',
  P_ASSET_COL IN VARCHAR2 DEFAULT 'ASSETID',
  P_ASSET_ID IN NUMBER DEFAULT 8956,
  P_WHERE IN VARCHAR2 DEFAULT '(FREQUENCYTYPEID=14030 OR  FREQUENCYTYPEID=14031 OR  FREQUENCYTYPEID=14032 OR  FREQUENCYTYPEID=14033)', 
  P_DATE IN DATE DEFAULT NULL,
  P_ORDER_BY IN VARCHAR DEFAULT NULL 
) 
  RETURN SYS_REFCURSOR AS 
  V_RC SYS_REFCURSOR;
  V_WHERE VARCHAR2(1000):='';
  V_ORDER_BY VARCHAR2(1000):='';
  V_GROUP_BY VARCHAR2(1000):='';
BEGIN
  V_WHERE :=' WHERE DATTYPE=' || P_DAT_TYPE; 
  IF P_WHERE IS NOT NULL THEN
    V_WHERE:=' WHERE DATTYPE=' || P_DAT_TYPE || ' AND ' || P_WHERE;
  END IF;

  IF P_ORDER_BY IS NOT NULL THEN
    V_ORDER_BY:=(' ORDER BY ' || P_ORDER_BY);
  END IF;


  dbms_output.put_line('');

  OPEN V_RC FOR 
        'SELECT T1.ASSETCODE,
        T1.ASSETNAME,
        T1.MITIGATIONCODE,
        T1.MITIGATIONNAME,
        T1.FREQNAME,
        T1.RBFF,
        T1.LASTRECORD,
        T1.ARL_OR_MTBF,
        T1.SCE,
        T1.DUEDATE,
        T1.SYSTEMFIELD,
        T1.DUEDATECOLOR,
        CASE
          WHEN T1.SCE = 1
          THEN ''YES (SCE)''
          WHEN T1.DUEDATECOLOR = ''RED''
          THEN ''YES''
          WHEN T1.DUEDATECOLOR = ''ORANGE''
          AND T1.DUEDATE      != ''CONTINUOUS''
          THEN ''YES''
          ELSE ''NO''
        END INRBIWORKSCOPE,
        T1.GROUPCODE,
        T1.GROUPNAME,
        T1.ASSETID,
        T1.DATTYPE,
        T1.MITIGATIONTYPE,
        T1.MITIGATIONTYPEID,
        T1.FREQUENCYTYPEID
      FROM
        (SELECT SYS_Q_RPT_RBI_COMMON.GROUPCODE,
          SYS_Q_RPT_RBI_COMMON.GROUPNAME,
          SYS_Q_RPT_RBI_COMMON.ASSETCODE,
          SYS_Q_RPT_RBI_COMMON.ASSETNAME,
          SYS_Q_RPT_RBI_COMMON.MITIGATIONCODE,
          SYS_Q_RPT_RBI_COMMON.MITIGATIONNAME,
          SYS_Q_RPT_RBI_COMMON.FREQNAME,
          SYS_Q_RPT_RBI_COMMON.RBFF,
          SYS_Q_RPT_RBI_COMMON.LASTRECORD,
          SYS_Q_RPT_RBI_COMMON.ARL_OR_MTBF,
          SYS_Q_RPT_RBI_COMMON.SCE,
          CASE
            WHEN SYS_Q_RPT_RBI_COMMON.ARL_OR_MTBF = -1
            THEN ''N/A''
            ELSE
              CASE
                WHEN SYS_Q_RPT_RBI_COMMON.FREQUENCYTYPEID = 14033
                THEN ''CONTINUOUS''
                WHEN SYS_Q_RPT_RBI_COMMON.FREQUENCYTYPEID = 14032
                THEN ''AD-HOC''
                ELSE
                  CASE
                    WHEN SYS_Q_RPT_RBI_COMMON.LASTRECORD = ''1/1/1111''
                    OR SYS_Q_RPT_RBI_COMMON.ARL_OR_MTBF  = -2
                    THEN ''IMMEDIATE ACTION''
                    ELSE TO_CHAR(SP_TODATE(SYS_Q_RPT_RBI_COMMON.LASTRECORD) + (365 * SYS_Q_RPT_RBI_COMMON.ARL_OR_MTBF))
                  END
              END
          END DUEDATE,
          CASE
            WHEN SYS_Q_RPT_RBI_COMMON.ARL_OR_MTBF = -1
            THEN ''4/4/4444''
            ELSE
              CASE
                WHEN SYS_Q_RPT_RBI_COMMON.FREQUENCYTYPEID = 14033
                THEN ''1/1/1111''
                WHEN SYS_Q_RPT_RBI_COMMON.FREQUENCYTYPEID = 14032
                THEN ''2/2/2222''
                ELSE
                  CASE
                    WHEN SYS_Q_RPT_RBI_COMMON.LASTRECORD = ''1/1/1111''
                    OR SYS_Q_RPT_RBI_COMMON.ARL_OR_MTBF  = -1
                    THEN ''3/3/3333''
                    ELSE TO_CHAR(SP_TODATE(SYS_Q_RPT_RBI_COMMON.LASTRECORD) + (365 * SYS_Q_RPT_RBI_COMMON.ARL_OR_MTBF))
                  END
              END
          END SYSTEMFIELD,
          SYS_Q_RPT_RBI_COMMON.MITIGATIONTYPE,
          SYS_Q_RPT_RBI_COMMON.MITIGATIONTYPEID,
          SYS_Q_RPT_RBI_COMMON.FREQUENCYTYPEID,
          SYS_Q_RPT_RBI_COMMON.ASSETID,
          SYS_Q_RPT_RBI_COMMON.DATTYPE,
          CASE
            WHEN UPPER(SYS_Q_RPT_RBI_COMMON.ARL_OR_MTBF) = -1
            THEN ''GREEN''
            ELSE
              CASE
                WHEN UPPER(SYS_Q_RPT_RBI_COMMON.FREQUENCYTYPEID) = 14033
                THEN ''ORANGE''
                WHEN UPPER(SYS_Q_RPT_RBI_COMMON.FREQUENCYTYPEID) = 14032
                THEN ''RED''
                ELSE
                  CASE
                    WHEN SYS_Q_RPT_RBI_COMMON.LASTRECORD = ''1/1/1111''
                    THEN ''RED''
                    WHEN SYS_Q_RPT_RBI_COMMON.ARL_OR_MTBF = -2
                    THEN ''RED''
                    ELSE
                      CASE
                        WHEN (SP_TODATE(SYS_Q_RPT_RBI_COMMON.LASTRECORD) + (365 * SYS_Q_RPT_RBI_COMMON.ARL_OR_MTBF)) < ADD_MONTHS(SP_TODATE(''' || P_DATE || '''), 12)
                        THEN
                          CASE
                            WHEN (SP_TODATE(SYS_Q_RPT_RBI_COMMON.LASTRECORD) + (365 * SYS_Q_RPT_RBI_COMMON.ARL_OR_MTBF)) < SP_TODATE(''' || P_DATE || ''') 
                            THEN ''RED''
                            ELSE ''ORANGE''
                          END
                        ELSE ''GREEN''
                      END
                  END
              END
          END DUEDATECOLOR
        FROM SYS_Q_RPT_RBI_COMMON 
        ) T1 
            INNER JOIN
            (SELECT SYS_TREE_STRUC.TRE_DAT_TAG
            FROM SYS_TREE_STRUC
            INNER JOIN SYS_NODES_ATTRIB
            ON SYS_TREE_STRUC.TRE_DAT_TAG                 = SYS_NODES_ATTRIB.REC_TAG
            WHERE SYS_TREE_STRUC.TRE_DAT_TYPE             = ' || P_DAT_TYPE || ' 
              START WITH SYS_TREE_STRUC.TRE_DAT_TAG       = ' || P_ASSET_ID || ' 
              CONNECT BY Prior SYS_TREE_STRUC.TRE_NOD_TAG = SYS_TREE_STRUC.TRE_NOD_TAG_PAR 
            ) T2 ON T2.TRE_DAT_TAG                        = ' || P_ASSET_COL || ' '         
            || V_WHERE || V_GROUP_BY || V_ORDER_BY || '';

  RETURN V_RC;
EXCEPTION
  WHEN OTHERS THEN
        dbms_output.put_line('FAILED ' || SQLCODE || ' ' || SQLERRM);
    RETURN null;  
END SP_SYS_Q_RPT_RBI_14;

/
--------------------------------------------------------
--  DDL for Function SP_SYS_Q_RPT_SV_5NPCOL
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE FUNCTION "IMSA"."SP_SYS_Q_RPT_SV_5NPCOL" 
(
  P_COLS IN VARCHAR2 DEFAULT '*',
  P_ORDER_BY IN VARCHAR DEFAULT NULL, 
  P_ROW_NO_MAX IN NUMBER DEFAULT 100,
  P_ROW_NO_MIN IN NUMBER DEFAULT 0
 ,P_AFTER_FILTER_CNT OUT NUMBER
 ,P_BEFORE_FILTER_CNT OUT NUMBER
) 
  RETURN SYS_REFCURSOR AS 
  CUR SYS_REFCURSOR;
  WHERE_C VARCHAR2(1000):='';
  ORDER_C VARCHAR2(1000):='';
  V_NHEADER VARCHAR2(4000);

BEGIN

  SELECT * INTO V_NHEADER FROM SYS_Q_RPT_SV_NYCOL;

  P_AFTER_FILTER_CNT:=SP_SYS_Q_RPT_SV_5NPCOL_COUNT(V_NHEADER);
  P_BEFORE_FILTER_CNT:=P_AFTER_FILTER_CNT;

   IF P_ORDER_BY IS NOT NULL THEN
    ORDER_C:=(' ORDER BY ' || P_ORDER_BY);
   END IF;


    OPEN CUR FOR 
      'SELECT 
      GroupCode, 
GroupName, 
 AssetCode, 
 AssetName, 
 SurveyEvent,
 LatestInspectionYear, 
 SurveyCount, 
 LatestInspectionDate  
      FROM 
      (
        SELECT ROWNUM ROW_NUM,
        T2.* 
        FROM
        (

SELECT * FROM
(SELECT ROWNUM CRSS_ID,
        T2.* 
        FROM(
SELECT
 NA1.NODE_ID AS GroupCode, 
 NA1.NODE_DESC AS GroupName, 
 NA.REC_TAG AS AssetID, 
 NA.NODE_ID AS AssetCode, 
 NA.NODE_DESC AS AssetName, 
 TBL_SVY_EVENT.SVY_EVT_DESC AS SurveyEvent,
 EXTRACT(YEAR FROM SVY_POS.SVY_POS_DATE_TIME) AS LatestInspectionYear, 
 Count(EXTRACT(YEAR FROM SVY_POS.SVY_POS_DATE_TIME)) AS SurveyCount, 
 Max(SVY_POS.SVY_POS_DATE_TIME) AS LatestInspectionDate 
FROM 
 (((((TBL_SVY_HEADER SVY_HDR LEFT JOIN TBL_SVY_POSITION SVY_POS 
 ON SVY_HDR.SVY_HDR_START_POS_ID = SVY_POS.SVY_POS_ID) 
 INNER JOIN SYS_NODES_ATTRIB NA 
 ON SVY_HDR.SVY_HDR_NOD_ID = NA.REC_TAG) 
 INNER JOIN SYS_TREE_STRUC TS 
 ON NA.REC_TAG = TS.TRE_DAT_TAG) 
 INNER JOIN SYS_TREE_STRUC TS1 
 ON TS.TRE_NOD_TAG_PAR = TS1.TRE_NOD_TAG) 
 INNER JOIN SYS_NODES_ATTRIB NA1 
 ON TS1.TRE_DAT_TAG = NA1.REC_TAG) 
 LEFT JOIN TBL_SVY_EVENT 
 ON SVY_HDR.SVY_HDR_EVT_ID = TBL_SVY_EVENT.SVY_EVT_ID 
WHERE 
 TS.TRE_DAT_TYPE=1 AND EXTRACT(YEAR FROM SVY_POS.SVY_POS_DATE_TIME) Is Not Null 
GROUP BY 
 NA1.NODE_ID, NA1.NODE_DESC, NA.NODE_ID, 
 NA.NODE_DESC, TBL_SVY_EVENT.SVY_EVT_DESC, 
 EXTRACT(YEAR FROM SVY_POS.SVY_POS_DATE_TIME)) T2)
PIVOT(MAX(LatestInspectionDate) FOR (LatestInspectionYear) IN (' || V_NHEADER || ')) ' || ORDER_C || '  
        ) T2 WHERE ROWNUM <= ' || P_ROW_NO_MAX || ' 
      ) WHERE ROW_NUM >= ' || P_ROW_NO_MIN;
  RETURN CUR;
END SP_SYS_Q_RPT_SV_5NPCOL;

/
--------------------------------------------------------
--  DDL for Function SP_SYS_Q_RPT_SV_5NPCOL_COUNT
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE FUNCTION "IMSA"."SP_SYS_Q_RPT_SV_5NPCOL_COUNT" (
 V_NHEADER IN VARCHAR2
) RETURN NUMBER AS 
 V_CNT NUMBER;
 V_RC SYS_REFCURSOR;
 V_S VARCHAR2(4000);
BEGIN
V_S:=V_NHEADER;
SELECT * INTO V_S FROM SYS_Q_RPT_SV_NYCOL;


  OPEN V_RC FOR 
'SELECT COUNT(1) FROM 
(SELECT
 SVY_HDR.SVY_HDR_ID as CRSS_ID,
 NA1.NODE_ID AS GroupCode, 
 NA1.NODE_DESC AS GroupName, 
 NA.NODE_ID AS AssetCode, 
 NA.NODE_DESC AS AssetName, 
 TBL_SVY_EVENT.SVY_EVT_DESC AS SurveyEvent,
 EXTRACT(YEAR FROM SVY_POS.SVY_POS_DATE_TIME) AS LatestInspectionYear, 
 Count(EXTRACT(YEAR FROM SVY_POS.SVY_POS_DATE_TIME)) AS SurveyCount, 
 Max(SVY_POS.SVY_POS_DATE_TIME) AS LatestInspectionDate 
FROM 
 (((((TBL_SVY_HEADER SVY_HDR LEFT JOIN TBL_SVY_POSITION SVY_POS 
 ON SVY_HDR.SVY_HDR_START_POS_ID = SVY_POS.SVY_POS_ID) 
 INNER JOIN SYS_NODES_ATTRIB NA 
 ON SVY_HDR.SVY_HDR_NOD_ID = NA.REC_TAG) 
 INNER JOIN SYS_TREE_STRUC TS 
 ON NA.REC_TAG = TS.TRE_DAT_TAG) 
 INNER JOIN SYS_TREE_STRUC TS1 
 ON TS.TRE_NOD_TAG_PAR = TS1.TRE_NOD_TAG) 
 INNER JOIN SYS_NODES_ATTRIB NA1 
 ON TS1.TRE_DAT_TAG = NA1.REC_TAG) 
 LEFT JOIN TBL_SVY_EVENT 
 ON SVY_HDR.SVY_HDR_EVT_ID = TBL_SVY_EVENT.SVY_EVT_ID 
WHERE 
 TS.TRE_DAT_TYPE=1 AND EXTRACT(YEAR FROM SVY_POS.SVY_POS_DATE_TIME) Is Not Null 
GROUP BY 
 SVY_HDR.SVY_HDR_ID, NA1.NODE_ID, NA1.NODE_DESC, NA.NODE_ID, 
 NA.NODE_DESC, TBL_SVY_EVENT.SVY_EVT_DESC, 
 EXTRACT(YEAR FROM SVY_POS.SVY_POS_DATE_TIME))
PIVOT(MAX(LatestInspectionDate) FOR (LatestInspectionYear) IN (' || V_S || '))';
     FETCH V_RC INTO V_CNT;
  CLOSE V_RC;
  RETURN V_CNT;
END SP_SYS_Q_RPT_SV_5NPCOL_COUNT;

/
--------------------------------------------------------
--  DDL for Function SP_SYS_Q_RPT_SV_5NPCOL_EVNT
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE FUNCTION "IMSA"."SP_SYS_Q_RPT_SV_5NPCOL_EVNT" 
(
  P_COLS IN VARCHAR2 DEFAULT '*',
  P_ORDER_BY IN VARCHAR DEFAULT NULL, 
  P_ROW_NO_MAX IN NUMBER DEFAULT 100,
  P_ROW_NO_MIN IN NUMBER DEFAULT 0
 ,P_AFTER_FILTER_CNT OUT NUMBER
 ,P_BEFORE_FILTER_CNT OUT NUMBER
) 
  RETURN SYS_REFCURSOR AS 
  CUR SYS_REFCURSOR;
  WHERE_C VARCHAR2(1000):='';
  ORDER_C VARCHAR2(1000):='';
  V_NHEADER VARCHAR2(4000);

BEGIN

  SELECT * INTO V_NHEADER FROM SYS_Q_RPT_SV_NYCOL_EVNT;

  P_AFTER_FILTER_CNT:=SP_SYS_Q_RPT_SV_5NPCOL_EVNTCNT(V_NHEADER);
  P_BEFORE_FILTER_CNT:=P_AFTER_FILTER_CNT;

   IF P_ORDER_BY IS NOT NULL THEN
    ORDER_C:=(' ORDER BY ' || P_ORDER_BY);
   END IF;


    OPEN CUR FOR 
      'SELECT * 
      FROM 
      (
        SELECT ROWNUM ROW_NUM,
        T2.* 
        FROM
        (

SELECT * FROM
(SELECT ROWNUM CRSS_ID,
        T2.* 
        FROM(SELECT
  NA1.NODE_ID AS GroupCode,
  NA1.NODE_DESC AS GroupName,
  NA.NODE_ID AS AssetCode,
  NA.NODE_DESC AS AssetName,
  TS.TRE_NOD_LOC AS AssetLocation,
  TBL_SVY_EVENT.SVY_EVT_DESC AS SurveyEvent,
  COUNT(TBL_SVY_EVENT.SVY_EVT_DESC) AS SurveyCount,
  MAX(SVY_POS.SVY_POS_DATE_TIME) AS LatestInspectionDate,
  TBL_SVY_MAIN.SVY_MAIN_TITLE AS Campaign
FROM (((((TBL_SVY_HEADER SVY_HDR
LEFT JOIN TBL_SVY_POSITION SVY_POS
ON SVY_HDR.SVY_HDR_START_POS_ID = SVY_POS.SVY_POS_ID)
INNER JOIN SYS_NODES_ATTRIB NA
ON SVY_HDR.SVY_HDR_NOD_ID = NA.REC_TAG)
INNER JOIN SYS_TREE_STRUC TS
ON NA.REC_TAG = TS.TRE_DAT_TAG)
INNER JOIN SYS_TREE_STRUC TS1
ON TS.TRE_NOD_TAG_PAR = TS1.TRE_NOD_TAG)
INNER JOIN SYS_NODES_ATTRIB NA1
ON TS1.TRE_DAT_TAG = NA1.REC_TAG)
LEFT JOIN TBL_SVY_EVENT
ON SVY_HDR.SVY_HDR_EVT_ID = TBL_SVY_EVENT.SVY_EVT_ID
INNER JOIN TBL_SVY_MAIN
ON SVY_HDR.SVY_HDR_MAIN_ID      = TBL_SVY_MAIN.SVY_MAIN_ID
WHERE TS.TRE_DAT_TYPE           = 1
AND TBL_SVY_EVENT.SVY_EVT_DESC IS NOT NULL
GROUP BY
  NA1.NODE_ID,
  NA1.NODE_DESC,
  NA.NODE_ID,
  NA.NODE_DESC,
  TS.TRE_NOD_LOC,
  TBL_SVY_EVENT.SVY_EVT_DESC,
  TBL_SVY_MAIN.SVY_MAIN_TITLE) T2) 
PIVOT(MAX(LatestInspectionDate) FOR (SurveyEvent) IN (' || V_NHEADER || ')) ' || ORDER_C || '  
        ) T2 WHERE ROWNUM <= ' || P_ROW_NO_MAX || ' 
      ) WHERE ROW_NUM >= ' || P_ROW_NO_MIN;
  RETURN CUR;
END SP_SYS_Q_RPT_SV_5NPCOL_EVNT;

/
--------------------------------------------------------
--  DDL for Function SP_SYS_Q_RPT_SV_5NPCOL_EVNTCNT
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE FUNCTION "IMSA"."SP_SYS_Q_RPT_SV_5NPCOL_EVNTCNT" (
 V_NHEADER IN VARCHAR2
) RETURN NUMBER AS 
 V_CNT NUMBER;
 V_RC SYS_REFCURSOR;
 V_S VARCHAR2(4000);
BEGIN

SELECT * INTO V_S FROM SYS_Q_RPT_SV_NYCOL_EVNT;


  OPEN V_RC FOR 
'SELECT COUNT(1) FROM 
(SELECT NA1.NODE_ID                  AS GroupCode,
  NA1.NODE_DESC                     AS GroupName,
  NA.NODE_ID                        AS AssetCode,
  NA.NODE_DESC                      AS AssetName,
  TS.TRE_NOD_LOC                    AS AssetLocation,
  TBL_SVY_EVENT.SVY_EVT_DESC        AS SurveyEvent,
  COUNT(TBL_SVY_EVENT.SVY_EVT_DESC) AS SurveyCount,
  MAX(SVY_POS.SVY_POS_DATE_TIME)    AS LatestInspectionDate,
  TBL_SVY_MAIN.SVY_MAIN_TITLE       AS Campaign
FROM (((((TBL_SVY_HEADER SVY_HDR
LEFT JOIN TBL_SVY_POSITION SVY_POS
ON SVY_HDR.SVY_HDR_START_POS_ID = SVY_POS.SVY_POS_ID)
INNER JOIN SYS_NODES_ATTRIB NA
ON SVY_HDR.SVY_HDR_NOD_ID = NA.REC_TAG)
INNER JOIN SYS_TREE_STRUC TS
ON NA.REC_TAG = TS.TRE_DAT_TAG)
INNER JOIN SYS_TREE_STRUC TS1
ON TS.TRE_NOD_TAG_PAR = TS1.TRE_NOD_TAG)
INNER JOIN SYS_NODES_ATTRIB NA1
ON TS1.TRE_DAT_TAG = NA1.REC_TAG)
LEFT JOIN TBL_SVY_EVENT
ON SVY_HDR.SVY_HDR_EVT_ID = TBL_SVY_EVENT.SVY_EVT_ID
INNER JOIN TBL_SVY_MAIN
ON SVY_HDR.SVY_HDR_MAIN_ID      = TBL_SVY_MAIN.SVY_MAIN_ID
WHERE TS.TRE_DAT_TYPE           = 1
AND TBL_SVY_EVENT.SVY_EVT_DESC IS NOT NULL
GROUP BY NA1.NODE_ID,
  NA1.NODE_DESC,
  NA.NODE_ID,
  NA.NODE_DESC,
  TS.TRE_NOD_LOC,
  TBL_SVY_EVENT.SVY_EVT_DESC,
  TBL_SVY_MAIN.SVY_MAIN_TITLE)
PIVOT(MAX(LatestInspectionDate) FOR (SurveyEvent) IN (' || V_S || '))';
     FETCH V_RC INTO V_CNT;
  CLOSE V_RC;
  RETURN V_CNT;
END SP_SYS_Q_RPT_SV_5NPCOL_EVNTCNT;

/
--------------------------------------------------------
--  DDL for Function SP_TABLE
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE FUNCTION "IMSA"."SP_TABLE" 
(
  P_TABLE IN VARCHAR2 DEFAULT 'V_TBL_ANOM_MAIN',
  P_COLS IN VARCHAR2 DEFAULT '*',
  P_WHERE IN CLOB DEFAULT NULL, 
  P_ORDER_BY IN VARCHAR DEFAULT NULL, 
  P_GROUP_BY  IN VARCHAR DEFAULT NULL
) 
  RETURN SYS_REFCURSOR AS 
  V_RC SYS_REFCURSOR;
  V_WHERE CLOB:='';
  V_ORDER_BY VARCHAR2(1000):='';
  V_GROUP_BY VARCHAR2(1000):='';
BEGIN
  IF (P_WHERE IS NOT NULL) THEN
    V_WHERE:=(' WHERE ' || P_WHERE);
  END IF;

    IF P_ORDER_BY IS NOT NULL THEN
      V_ORDER_BY:=(' ORDER BY ' || P_ORDER_BY);
    ELSE
      V_ORDER_BY:=(' ORDER BY 1');
    END IF;

    IF P_GROUP_BY IS NOT NULL THEN
      V_GROUP_BY:=(' GROUP BY ' || P_GROUP_BY);
    END IF;

  OPEN V_RC FOR 
    'SELECT ' || P_COLS || ' FROM ' || P_TABLE || V_WHERE || V_GROUP_BY || V_ORDER_BY;

  RETURN V_RC;
END SP_TABLE;

/
--------------------------------------------------------
--  DDL for Function SP_TABLE_BY_COUNT
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE FUNCTION "IMSA"."SP_TABLE_BY_COUNT" 
(
  P_DAT_TYPE IN NUMBER DEFAULT 1,  
  P_DTL_VIEW IN VARCHAR2 DEFAULT 'V_TBL_ANOM_MAIN',
  P_ASSET_COL IN VARCHAR2 DEFAULT 'AN_ASSET_ID',
  P_ASSET_ID IN NUMBER DEFAULT -1,
  P_WHERE IN CLOB DEFAULT NULL
)
  RETURN NUMBER AS 
  CUR SYS_REFCURSOR;
  CNT NUMBER;
  WHERE_C CLOB;
  START_WITH VARCHAR(500);
BEGIN
  IF P_ASSET_ID != -1 THEN
    START_WITH:='START WITH SYS_TREE_STRUC.TRE_DAT_TAG       = ' || P_ASSET_ID || ' ';
  END IF;

  IF P_WHERE IS NOT NULL THEN
    WHERE_C:=(' WHERE ' || P_WHERE);
  END IF;

  OPEN CUR FOR 

  'SELECT COUNT(1) 
  FROM ' || P_DTL_VIEW || ' 
  INNER JOIN 
  (
    SELECT SYS_TREE_STRUC.TRE_DAT_TAG 
    FROM SYS_TREE_STRUC
    INNER JOIN SYS_NODES_ATTRIB 
    ON SYS_TREE_STRUC.TRE_DAT_TAG                 = SYS_NODES_ATTRIB.REC_TAG 
    WHERE SYS_TREE_STRUC.TRE_DAT_TYPE             = ' || P_DAT_TYPE || ' ' 
    || START_WITH || 
    'CONNECT BY Prior SYS_TREE_STRUC.TRE_NOD_TAG = SYS_TREE_STRUC.TRE_NOD_TAG_PAR
  ) T1 
  ON T1.TRE_DAT_TAG = ' || P_DTL_VIEW || '.' || P_ASSET_COL || WHERE_C;

  FETCH CUR INTO CNT;
  CLOSE CUR;
  RETURN CNT;
EXCEPTION
  WHEN NO_DATA_FOUND THEN 
    RETURN 1;
  WHEN OTHERS THEN 
    RETURN -1;
END SP_TABLE_BY_COUNT;

/
--------------------------------------------------------
--  DDL for Function SP_TABLE_BY_PAGE
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE FUNCTION "IMSA"."SP_TABLE_BY_PAGE" 
(
  P_TABLE IN VARCHAR2 DEFAULT 'V_TBL_ANOM_MAIN',
  P_COLS IN VARCHAR2 DEFAULT '*',
  P_WHERE IN VARCHAR DEFAULT NULL, 
  P_ORDER_BY IN VARCHAR DEFAULT NULL, 
  P_ROW_NO_MAX IN NUMBER DEFAULT 100,
  P_ROW_NO_MIN IN NUMBER DEFAULT 0,
  P_GROUP_BY IN VARCHAR2 DEFAULT NULL  
 ,P_AFTER_FILTER_CNT OUT NUMBER
 ,P_BEFORE_FILTER_CNT OUT NUMBER
) 
  RETURN SYS_REFCURSOR AS 
  CUR SYS_REFCURSOR;
  WHERE_C VARCHAR2(1000):='';
  ORDER_C VARCHAR2(1000):='';
  V_GROUP_BY VARCHAR2(1000):='';  
BEGIN
  P_AFTER_FILTER_CNT:=SP_TABLE_COUNT(P_TABLE,P_WHERE);
  P_BEFORE_FILTER_CNT:=SP_TABLE_COUNT(P_TABLE);

  IF P_WHERE IS NOT NULL THEN
    WHERE_C:=(' WHERE ' || P_WHERE);
  END IF;

   IF P_ORDER_BY IS NOT NULL THEN
    ORDER_C:=(' ORDER BY ' || P_ORDER_BY);
   END IF;

  IF P_GROUP_BY IS NOT NULL THEN
    V_GROUP_BY:=(' GROUP BY ' || P_GROUP_BY);
   END IF;

  IF (P_ROW_NO_MAX = -1) THEN
    OPEN CUR FOR 
          'SELECT ROWNUM ROW_NUM, '
            || P_COLS || ' 
          FROM ' || P_TABLE || WHERE_C  || V_GROUP_BY || ORDER_C;
  ELSE 
    OPEN CUR FOR 
      'SELECT * 
      FROM 
      (
        SELECT ROWNUM ROW_NUM,
        T2.* 
        FROM
        (
          SELECT '
            || P_COLS || ' 
          FROM ' || P_TABLE || WHERE_C  || V_GROUP_BY || ORDER_C || '  
        ) T2 WHERE ROWNUM <= ' || P_ROW_NO_MAX || ' 
      ) WHERE ROW_NUM >= ' || P_ROW_NO_MIN;
    END IF;

  RETURN CUR;
END SP_TABLE_BY_PAGE;

/
--------------------------------------------------------
--  DDL for Function SP_TABLE_BY_PAGE_SQL_PARAM
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE FUNCTION "IMSA"."SP_TABLE_BY_PAGE_SQL_PARAM" 
(
  P_SQL IN VARCHAR DEFAULT NULL, 
  P_BEFORE_FILTER_SQL IN VARCHAR DEFAULT NULL, 
  P_AFTER_FILTER_SQL IN VARCHAR DEFAULT NULL, 
  P_COLS IN VARCHAR DEFAULT NULL, 
  P_WHERE IN VARCHAR DEFAULT NULL, 
  P_ORDER_BY IN VARCHAR DEFAULT NULL, 
  P_ROW_NO_MAX IN NUMBER DEFAULT 100,
  P_ROW_NO_MIN IN NUMBER DEFAULT 0,
  P_GROUP_BY IN VARCHAR2 DEFAULT NULL,
  P_AFTER_FILTER_CNT OUT NUMBER, 
  P_BEFORE_FILTER_CNT OUT NUMBER
) 
  RETURN SYS_REFCURSOR AS 
  CUR SYS_REFCURSOR;
  CUR_2 SYS_REFCURSOR;
  CUR_3 SYS_REFCURSOR;
  WHERE_C VARCHAR2(1000):='';
  ORDER_C VARCHAR2(1000):='';
  V_GROUP_BY VARCHAR2(1000):='';  

BEGIN
  OPEN CUR_2 FOR P_BEFORE_FILTER_SQL;
  --OPEN CUR_2 FOR 'SELECT COUNT(AN_ID) FROM V_TBL_ANOM_MAIN WHERE AN_ID<>1039';

  FETCH CUR_2 INTO P_BEFORE_FILTER_CNT;
  CLOSE CUR_2;

  IF P_WHERE IS NOT NULL THEN
    WHERE_C:=(' WHERE ' || P_WHERE);
  END IF;

  OPEN CUR_3 FOR P_AFTER_FILTER_SQL || WHERE_C;
  --OPEN CUR_3 FOR 'SELECT COUNT(AN_ID) FROM V_TBL_ANOM_MAIN WHERE AN_ID<>1039';

  FETCH CUR_3 INTO P_AFTER_FILTER_CNT;
  CLOSE CUR_3;

  IF P_ORDER_BY IS NOT NULL THEN
    ORDER_C:=(' ORDER BY ' || P_ORDER_BY);
  END IF;

  IF P_GROUP_BY IS NOT NULL THEN
    V_GROUP_BY:=(' GROUP BY ' || P_GROUP_BY);
   END IF;

  IF (P_ROW_NO_MAX = -1) THEN
    OPEN CUR FOR 
          'SELECT ROWNUM ROW_NUM, '
            || P_COLS || ' 
          FROM (' || P_SQL || ') TMP ' ||
          WHERE_C  ||
          V_GROUP_BY || 
          ORDER_C;
  ELSE 
    OPEN CUR FOR 
      'SELECT * 
      FROM 
      (
        SELECT ROWNUM ROW_NUM,
        T2.* 
        FROM
        (
          SELECT '
            || P_COLS || ' 
          FROM (' || P_SQL || ') TMP ' || 
          WHERE_C  || 
          V_GROUP_BY || 
          ORDER_C || '  
        ) T2 WHERE ROWNUM <= ' || P_ROW_NO_MAX || ' 
      ) WHERE ROW_NUM >= ' || P_ROW_NO_MIN;
    END IF;


  RETURN CUR;
END SP_TABLE_BY_PAGE_SQL_PARAM;

/
--------------------------------------------------------
--  DDL for Function SP_TABLE_BY_ROW
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE FUNCTION "IMSA"."SP_TABLE_BY_ROW" 
(
  P_DTL_VIEW IN VARCHAR2 DEFAULT 'V_TBL_ANOM_MAIN',
  P_COLS IN VARCHAR2 DEFAULT '*',
  P_WHERE IN VARCHAR2 DEFAULT NULL 
)
  RETURN SYS_REFCURSOR AS 
  V_RC SYS_REFCURSOR;
  WHERE_C VARCHAR2(1000):='';
BEGIN
  IF P_WHERE IS NOT NULL THEN
    WHERE_C:=(' WHERE ' || P_WHERE);
  END IF;

  OPEN V_RC FOR 'SELECT ' || P_COLS || ' FROM ' || P_DTL_VIEW || WHERE_C;

  RETURN V_RC;
END SP_TABLE_BY_ROW;

/
--------------------------------------------------------
--  DDL for Function SP_TABLE_BY_TREE
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE FUNCTION "IMSA"."SP_TABLE_BY_TREE" 
(
  P_DAT_TYPE IN NUMBER DEFAULT 1,  
  P_DTL_VIEW IN VARCHAR2 DEFAULT 'V_TBL_RBI_CONF',
  P_COLS IN VARCHAR2 DEFAULT '*',
  P_ASSET_COL IN VARCHAR2 DEFAULT 'RBI_POF_NODE_ID',
  P_ASSET_ID IN NUMBER DEFAULT 839,
  P_WHERE IN CLOB DEFAULT NULL, 
  P_ORDER_BY IN VARCHAR DEFAULT NULL, 
  P_ROW_NO_MAX IN NUMBER DEFAULT 100,
  P_ROW_NO_MIN IN NUMBER DEFAULT 0, 
  P_GROUP_BY IN VARCHAR2 DEFAULT NULL
 ,P_AFTER_FILTER_CNT OUT NUMBER
 ,P_BEFORE_FILTER_CNT OUT NUMBER
) 
  RETURN SYS_REFCURSOR AS 
  V_RC SYS_REFCURSOR;
  V_WHERE CLOB:='';
  V_ORDER_BY VARCHAR2(1000):='';
  V_GROUP_BY VARCHAR2(1000):='';
BEGIN
  P_AFTER_FILTER_CNT:=SP_TABLE_BY_TREE_COUNT(P_DAT_TYPE,P_DTL_VIEW,P_ASSET_COL,P_ASSET_ID,P_WHERE);
  P_BEFORE_FILTER_CNT:=SP_TABLE_BY_TREE_COUNT(P_DAT_TYPE,P_DTL_VIEW,P_ASSET_COL,P_ASSET_ID);

  IF P_WHERE IS NOT NULL THEN
    V_WHERE:=(' WHERE ' || P_WHERE);
  END IF;

   IF P_ORDER_BY IS NOT NULL THEN
    V_ORDER_BY:=(' ORDER BY ' || P_ORDER_BY);
   END IF;

   IF P_GROUP_BY IS NOT NULL THEN
    V_GROUP_BY:=(' GROUP BY ' || P_GROUP_BY);
   END IF;

  IF (P_ROW_NO_MAX = -1) THEN
    OPEN V_RC FOR 
    'SELECT '
      || P_COLS || ' 
          FROM ' || P_DTL_VIEW || ' 
          INNER JOIN 
          (
            SELECT 
              SYS_TREE_STRUC.TRE_DAT_TAG 
            FROM SYS_TREE_STRUC
            INNER JOIN SYS_NODES_ATTRIB
            ON SYS_TREE_STRUC.TRE_DAT_TAG                 = SYS_NODES_ATTRIB.REC_TAG
            WHERE SYS_TREE_STRUC.TRE_DAT_TYPE             = ' || P_DAT_TYPE || '   
              START WITH SYS_TREE_STRUC.TRE_DAT_TAG       = ' || P_ASSET_ID || ' 
              CONNECT BY Prior SYS_TREE_STRUC.TRE_NOD_TAG = SYS_TREE_STRUC.TRE_NOD_TAG_PAR
          ) T1
          ON T1.TRE_DAT_TAG = ' || P_DTL_VIEW || '.' || P_ASSET_COL || V_WHERE || V_GROUP_BY || V_ORDER_BY || '';
  ELSE 
    OPEN V_RC FOR 
      'SELECT * 
      FROM 
      (
        SELECT ROWNUM ROW_NUM,
        T2.* 
        FROM
        (
          SELECT '
            || P_COLS || ' 
          FROM ' || P_DTL_VIEW || ' 
          INNER JOIN 
          (
            SELECT 
              SYS_TREE_STRUC.TRE_DAT_TAG 
            FROM SYS_TREE_STRUC
            INNER JOIN SYS_NODES_ATTRIB
            ON SYS_TREE_STRUC.TRE_DAT_TAG                 = SYS_NODES_ATTRIB.REC_TAG
            WHERE SYS_TREE_STRUC.TRE_DAT_TYPE             = ' || P_DAT_TYPE || '   
              START WITH SYS_TREE_STRUC.TRE_DAT_TAG       = ' || P_ASSET_ID || ' 
              CONNECT BY Prior SYS_TREE_STRUC.TRE_NOD_TAG = SYS_TREE_STRUC.TRE_NOD_TAG_PAR
          ) T1
          ON T1.TRE_DAT_TAG = ' || P_DTL_VIEW || '.' || P_ASSET_COL || V_WHERE || V_GROUP_BY || V_ORDER_BY || '  
        ) T2 WHERE ROWNUM <= ' || P_ROW_NO_MAX || ' 
      ) WHERE ROW_NUM >= ' || P_ROW_NO_MIN;
    END IF;
  DBMS_OUTPUT.PUT_LINE(   'SELECT * 
      FROM 
      (
        SELECT ROWNUM ROW_NUM,
        T2.* 
        FROM
        (
          SELECT '
            || P_COLS || ' 
          FROM ' || P_DTL_VIEW || ' 
          INNER JOIN 
          (
            SELECT 
              SYS_TREE_STRUC.TRE_DAT_TAG 
            FROM SYS_TREE_STRUC
            INNER JOIN SYS_NODES_ATTRIB
            ON SYS_TREE_STRUC.TRE_DAT_TAG                 = SYS_NODES_ATTRIB.REC_TAG
            WHERE SYS_TREE_STRUC.TRE_DAT_TYPE             = ' || P_DAT_TYPE || '   
              START WITH SYS_TREE_STRUC.TRE_DAT_TAG       = ' || P_ASSET_ID || ' 
              CONNECT BY Prior SYS_TREE_STRUC.TRE_NOD_TAG = SYS_TREE_STRUC.TRE_NOD_TAG_PAR
          ) T1
          ON T1.TRE_DAT_TAG = ' || P_DTL_VIEW || '.' || P_ASSET_COL || V_WHERE || V_GROUP_BY || V_ORDER_BY || '  
        ) T2 WHERE ROWNUM <= ' || P_ROW_NO_MAX || ' 
      ) WHERE ROW_NUM >= ' || P_ROW_NO_MIN);
  RETURN V_RC;
END SP_TABLE_BY_TREE;

/
--------------------------------------------------------
--  DDL for Function SP_TABLE_BY_TREE_COUNT
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE FUNCTION "IMSA"."SP_TABLE_BY_TREE_COUNT" 
(
  P_DAT_TYPE IN NUMBER DEFAULT 1,  
  P_DTL_VIEW IN VARCHAR2 DEFAULT 'V_TBL_ANOM_MAIN',
  P_ASSET_COL IN VARCHAR2 DEFAULT 'AN_ASSET_ID',
  P_ASSET_ID IN NUMBER DEFAULT -1,
  P_WHERE IN CLOB DEFAULT NULL
)
  RETURN NUMBER AS 
  V_RC SYS_REFCURSOR;
  V_CNT NUMBER;
  V_WHERE CLOB;
  V_START_WITH VARCHAR(500);
BEGIN
  IF P_ASSET_ID != -1 THEN
    V_START_WITH:='START WITH SYS_TREE_STRUC.TRE_DAT_TAG       = ' || P_ASSET_ID || ' ';
  END IF;

  IF P_WHERE IS NOT NULL THEN
    V_WHERE:=(' WHERE ' || P_WHERE);
  END IF;

  OPEN V_RC FOR 
  --execute immediate 
  'SELECT COUNT(1) 
  FROM ' || P_DTL_VIEW || ' 
  INNER JOIN 
  (
    SELECT SYS_TREE_STRUC.TRE_DAT_TAG 
    FROM SYS_TREE_STRUC
    INNER JOIN SYS_NODES_ATTRIB 
    ON SYS_TREE_STRUC.TRE_DAT_TAG                 = SYS_NODES_ATTRIB.REC_TAG 
    WHERE SYS_TREE_STRUC.TRE_DAT_TYPE             = ' || P_DAT_TYPE || ' ' 
    || V_START_WITH || 
    'CONNECT BY Prior SYS_TREE_STRUC.TRE_NOD_TAG = SYS_TREE_STRUC.TRE_NOD_TAG_PAR 
    GROUP BY SYS_TREE_STRUC.TRE_DAT_TAG 

  ) T1 
  ON T1.TRE_DAT_TAG = ' || P_DTL_VIEW || '.' || P_ASSET_COL || V_WHERE;

  FETCH V_RC INTO V_CNT;
   CLOSE V_RC;
  RETURN V_CNT;
EXCEPTION
  WHEN NO_DATA_FOUND THEN 
    RETURN 1;
  WHEN OTHERS THEN 
    RETURN -1;
END SP_TABLE_BY_TREE_COUNT;

/
--------------------------------------------------------
--  DDL for Function SP_TABLE_BY_TREE_COUNT_D
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE FUNCTION "IMSA"."SP_TABLE_BY_TREE_COUNT_D" 
(
  P_DAT_TYPE IN NUMBER DEFAULT 1,  
  P_DTL_VIEW IN VARCHAR2 DEFAULT 'V_TBL_ANOM_MAIN',
  P_ASSET_COL IN VARCHAR2 DEFAULT 'AN_ASSET_ID',
  P_ASSET_ID IN NUMBER DEFAULT -1,
  P_COLS IN VARCHAR2 DEFAULT NULL,
  P_WHERE IN CLOB DEFAULT NULL
)
  RETURN NUMBER AS 
  V_RC SYS_REFCURSOR;
  V_CNT NUMBER;
  V_WHERE CLOB;
  V_START_WITH VARCHAR(500);
BEGIN
  IF P_ASSET_ID != -1 THEN
    V_START_WITH:='START WITH SYS_TREE_STRUC.TRE_DAT_TAG       = ' || P_ASSET_ID || ' ';
  END IF;

  IF P_WHERE IS NOT NULL THEN
    V_WHERE:=(' WHERE ' || P_WHERE);
  END IF;

  OPEN V_RC FOR 
  'SELECT COUNT(DISTINCT(' || P_COLS || ')) 
  FROM ' || P_DTL_VIEW || ' 
  INNER JOIN 
  (
    SELECT SYS_TREE_STRUC.TRE_DAT_TAG 
    FROM SYS_TREE_STRUC
    INNER JOIN SYS_NODES_ATTRIB 
    ON SYS_TREE_STRUC.TRE_DAT_TAG                 = SYS_NODES_ATTRIB.REC_TAG 
    WHERE SYS_TREE_STRUC.TRE_DAT_TYPE             = ' || P_DAT_TYPE || ' ' 
    || V_START_WITH || 
    'CONNECT BY Prior SYS_TREE_STRUC.TRE_NOD_TAG = SYS_TREE_STRUC.TRE_NOD_TAG_PAR
  ) T1 
  ON T1.TRE_DAT_TAG = ' || P_DTL_VIEW || '.' || P_ASSET_COL || V_WHERE;

  FETCH V_RC INTO V_CNT;
  CLOSE V_RC;
  RETURN V_CNT;
EXCEPTION
  WHEN NO_DATA_FOUND THEN 
    RETURN 1;
  WHEN OTHERS THEN 
    RETURN -1;
END SP_TABLE_BY_TREE_COUNT_D;

/
--------------------------------------------------------
--  DDL for Function SP_TABLE_BY_TREE_COUNT_DIST
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE FUNCTION "IMSA"."SP_TABLE_BY_TREE_COUNT_DIST" 
(
  P_DAT_TYPE IN NUMBER DEFAULT 1,  
  P_DTL_VIEW IN VARCHAR2 DEFAULT 'V_TBL_ANOM_MAIN',
  P_ASSET_COL IN VARCHAR2 DEFAULT 'AN_ASSET_ID',
  P_ASSET_ID IN NUMBER DEFAULT -1,
  P_COLS IN VARCHAR2 DEFAULT NULL,
  P_WHERE IN CLOB DEFAULT NULL
)
  RETURN NUMBER AS 
  V_RC SYS_REFCURSOR;
  V_CNT NUMBER;
  V_WHERE CLOB;
  V_START_WITH VARCHAR(500);
  V_SQL VARCHAR2(1000);
BEGIN
  IF P_ASSET_ID != -1 THEN
    V_START_WITH:='START WITH SYS_TREE_STRUC.TRE_DAT_TAG       = ' || P_ASSET_ID || ' ';
  END IF;

  IF P_WHERE IS NOT NULL THEN
    V_WHERE:=(' WHERE ' || P_WHERE);
  END IF;

 V_SQL := 'SELECT COUNT(DISTINCT(' || P_COLS ||')) 
  FROM ' || P_DTL_VIEW || ' 
  INNER JOIN 
  (
    SELECT SYS_TREE_STRUC.TRE_DAT_TAG 
    FROM SYS_TREE_STRUC
    INNER JOIN SYS_NODES_ATTRIB 
    ON SYS_TREE_STRUC.TRE_DAT_TAG                 = SYS_NODES_ATTRIB.REC_TAG 
    WHERE SYS_TREE_STRUC.TRE_DAT_TYPE             = ' || P_DAT_TYPE || ' '
    || V_START_WITH || '
    CONNECT BY Prior SYS_TREE_STRUC.TRE_NOD_TAG = SYS_TREE_STRUC.TRE_NOD_TAG_PAR
  ) T1 
  ON T1.TRE_DAT_TAG = ' || P_DTL_VIEW || '.' || P_ASSET_COL || V_WHERE;

  EXECUTE IMMEDIATE V_SQL INTO V_CNT;

  RETURN V_CNT;
EXCEPTION
  WHEN NO_DATA_FOUND THEN 
    RETURN 1;
  WHEN OTHERS THEN 
    RETURN -1;
END SP_TABLE_BY_TREE_COUNT_DIST;

/
--------------------------------------------------------
--  DDL for Function SP_TABLE_BY_TREE_FILTER
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE FUNCTION "IMSA"."SP_TABLE_BY_TREE_FILTER" 
(
  P_DAT_TYPE IN NUMBER DEFAULT 1,  
  P_DTL_VIEW IN VARCHAR2 DEFAULT 'V_TBL_ANOM_MAIN',
  P_COLS IN VARCHAR2 DEFAULT '*',
  P_ASSET_COL IN VARCHAR2 DEFAULT 'AN_ASSET_ID',
  P_ASSET_ID IN NUMBER DEFAULT 45488,
  P_WHERE IN CLOB DEFAULT NULL, 
  P_ORDER_BY IN VARCHAR DEFAULT NULL, 
  P_ROW_NO_MAX IN NUMBER DEFAULT 100,
  P_ROW_NO_MIN IN NUMBER DEFAULT 0, 
  P_GROUP_BY IN VARCHAR2 DEFAULT NULL
 ,P_AFTER_FILTER_CNT OUT NUMBER
 ,P_BEFORE_FILTER_CNT OUT NUMBER
) 
  RETURN SYS_REFCURSOR AS 
  V_RC SYS_REFCURSOR;
  V_WHERE CLOB:='';
  V_ORDER_BY VARCHAR2(1000):='';
  V_GROUP_BY VARCHAR2(1000):='';
BEGIN
  P_BEFORE_FILTER_CNT:=SP_TABLE_BY_TREE_COUNT_DIST(P_DAT_TYPE,P_DTL_VIEW,P_ASSET_COL,P_ASSET_ID,P_COLS,P_WHERE);
  P_AFTER_FILTER_CNT:=P_BEFORE_FILTER_CNT;-- Since no filtering done, also use before filter count.

  IF P_WHERE IS NOT NULL THEN
    V_WHERE:=(' WHERE ' || P_WHERE);
  END IF;

   IF P_ORDER_BY IS NOT NULL THEN
    V_ORDER_BY:=(' ORDER BY ' || P_ORDER_BY);
   END IF;

   IF P_GROUP_BY IS NOT NULL THEN
    V_GROUP_BY:=(' GROUP BY ' || P_GROUP_BY);
   END IF;

    OPEN V_RC FOR 
      'SELECT * 
      FROM 
      (
        SELECT ROWNUM ROW_NUM,
        T2.* 
        FROM
        (
          SELECT '
            || P_COLS || ' 
          FROM ' || P_DTL_VIEW || ' 
          INNER JOIN 
          (
            SELECT 
              SYS_TREE_STRUC.TRE_DAT_TAG 
            FROM SYS_TREE_STRUC
            INNER JOIN SYS_NODES_ATTRIB
            ON SYS_TREE_STRUC.TRE_DAT_TAG                 = SYS_NODES_ATTRIB.REC_TAG
            WHERE SYS_TREE_STRUC.TRE_DAT_TYPE             = ' || P_DAT_TYPE || '   
              START WITH SYS_TREE_STRUC.TRE_DAT_TAG       = ' || P_ASSET_ID || ' 
              CONNECT BY Prior SYS_TREE_STRUC.TRE_NOD_TAG = SYS_TREE_STRUC.TRE_NOD_TAG_PAR
          ) T1
          ON T1.TRE_DAT_TAG = ' || P_DTL_VIEW || '.' || P_ASSET_COL || V_WHERE || V_GROUP_BY || V_ORDER_BY || '  
        ) T2 WHERE ROWNUM <= ' || P_ROW_NO_MAX || ' 
      ) WHERE ROW_NUM >= ' || P_ROW_NO_MIN;

  RETURN V_RC;
END SP_TABLE_BY_TREE_FILTER;

/
--------------------------------------------------------
--  DDL for Function SP_TABLE_BY_TREE_NO_PAGE
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE FUNCTION "IMSA"."SP_TABLE_BY_TREE_NO_PAGE" 
(
  P_DAT_TYPE IN NUMBER DEFAULT 1,  
  P_DTL_VIEW IN VARCHAR2 DEFAULT 'V_TBL_ANOM_MAIN',
  P_COLS IN VARCHAR2 DEFAULT '*',
  P_ASSET_COL IN VARCHAR2 DEFAULT 'AN_ASSET_ID',
  P_ASSET_ID IN NUMBER DEFAULT 45488,
  P_WHERE IN CLOB DEFAULT NULL, 
  P_ORDER_BY IN VARCHAR DEFAULT NULL, 
  P_GROUP_BY IN VARCHAR2 DEFAULT NULL
) 
  RETURN SYS_REFCURSOR AS 
  V_RC SYS_REFCURSOR;
  V_WHERE CLOB:='';
  V_ORDER_BY VARCHAR2(1000):='';
  V_GROUP_BY VARCHAR2(1000):='';
BEGIN
  IF P_WHERE IS NOT NULL THEN
    V_WHERE:=(' WHERE ' || P_WHERE);
  END IF;

   IF P_ORDER_BY IS NOT NULL THEN
    V_ORDER_BY:=(' ORDER BY ' || P_ORDER_BY);
   END IF;

   IF P_GROUP_BY IS NOT NULL THEN
    V_GROUP_BY:=(' GROUP BY ' || P_GROUP_BY);
   END IF;

    OPEN V_RC FOR 
    'SELECT '
      || P_COLS || ' 
          FROM ' || P_DTL_VIEW || ' 
          INNER JOIN 
          (
            SELECT 
              SYS_TREE_STRUC.TRE_DAT_TAG 
            FROM SYS_TREE_STRUC
            INNER JOIN SYS_NODES_ATTRIB
            ON SYS_TREE_STRUC.TRE_DAT_TAG                 = SYS_NODES_ATTRIB.REC_TAG
            WHERE SYS_TREE_STRUC.TRE_DAT_TYPE             = ' || P_DAT_TYPE || '   
              START WITH SYS_TREE_STRUC.TRE_DAT_TAG       = ' || P_ASSET_ID || ' 
              CONNECT BY Prior SYS_TREE_STRUC.TRE_NOD_TAG = SYS_TREE_STRUC.TRE_NOD_TAG_PAR
          ) T1
          ON T1.TRE_DAT_TAG = ' || P_DTL_VIEW || '.' || P_ASSET_COL || V_WHERE || V_GROUP_BY || V_ORDER_BY || '';

  RETURN V_RC;
END SP_TABLE_BY_TREE_NO_PAGE;

/
--------------------------------------------------------
--  DDL for Function SP_TABLE_COUNT
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE FUNCTION "IMSA"."SP_TABLE_COUNT" 
(
  P_TABLE IN VARCHAR2 DEFAULT 'V_TBL_ANOM_MAIN',
  P_WHERE IN CLOB DEFAULT NULL
)
  RETURN NUMBER AS 
  CUR SYS_REFCURSOR;
  CNT NUMBER;
  WHERE_C CLOB;
  START_WITH VARCHAR(500);
BEGIN
  IF P_WHERE IS NOT NULL THEN
    WHERE_C:=(' WHERE ' || P_WHERE);
  END IF;

  OPEN CUR FOR 

  'SELECT COUNT(1) 
  FROM ' || P_TABLE || WHERE_C; 

  FETCH CUR INTO CNT;
  CLOSE CUR;
  RETURN CNT;
EXCEPTION
  WHEN NO_DATA_FOUND THEN 
    RETURN 1;
  WHEN OTHERS THEN 
    RETURN -1;
END SP_TABLE_COUNT;

/
--------------------------------------------------------
--  DDL for Function SP_TODATE
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE FUNCTION "IMSA"."SP_TODATE" 
(
  P_DATE IN VARCHAR2 
) RETURN DATE AS 
BEGIN
  RETURN TO_DATE(P_DATE, 'DD/MM/YYYY'); 
EXCEPTION
  WHEN OTHERS THEN
    RETURN NULL;
END SP_TODATE;

/
--------------------------------------------------------
--  DDL for Function SP_TREE_ASSET_PATH
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE FUNCTION "IMSA"."SP_TREE_ASSET_PATH" 
(
  P_ASSET_ID IN NUMBER DEFAULT 0,
  P_DAT_TYPE IN NUMBER DEFAULT 1
) 
  RETURN VARCHAR2 AS 
  V_PATH VARCHAR2(4000);
  CUR SYS_REFCURSOR;
BEGIN
  OPEN CUR FOR 
    SELECT 
      SYS_CONNECT_BY_PATH(SYS_NODES_ATTRIB.NODE_DESC, '||') PATH 
    FROM SYS_TREE_STRUC
    INNER JOIN SYS_NODES_ATTRIB
    ON SYS_TREE_STRUC.TRE_DAT_TAG                 = SYS_NODES_ATTRIB.REC_TAG
    WHERE SYS_TREE_STRUC.TRE_DAT_TYPE             = P_DAT_TYPE
    AND SYS_TREE_STRUC.TRE_DAT_TAG                = P_ASSET_ID 
      START WITH NVL(TRE_NOD_TAG_PAR, 0) = 0 
      CONNECT BY Prior SYS_TREE_STRUC.TRE_NOD_TAG = SYS_TREE_STRUC.TRE_NOD_TAG_PAR; 
  FETCH CUR INTO V_PATH;

  CLOSE CUR;
  RETURN V_PATH;

EXCEPTION
  WHEN NO_DATA_FOUND THEN 
    RETURN '';
END SP_TREE_ASSET_PATH;

/
--------------------------------------------------------
--  DDL for Function SP_TREE_COLOR
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE FUNCTION "IMSA"."SP_TREE_COLOR" 
(
  P_DAT_TYPE IN NUMBER DEFAULT 1,
  P_PAR_ID IN NUMBER DEFAULT 0,
  P_HAVING IN CLOB DEFAULT NULL
) 
  RETURN SYS_REFCURSOR AS 
  V_RC SYS_REFCURSOR;
  V_HAVING CLOB:='';
BEGIN
  IF (P_HAVING IS NOT NULL) THEN
    V_HAVING:=(' HAVING ' || P_HAVING);
  END IF;

  OPEN V_RC FOR 
    'SELECT SYS_TREE_STRUC.TRE_DAT_TAG,
      SYS_TREE_STRUC_PAR.TRE_DAT_TAG AS TRE_DAT_TAG_PAR,
      SYS_NODES_ATTRIB.NODE_ID,
      SYS_NODES_ATTRIB.NODE_DESC,
      SYS_TREE_STRUC_LEAF.TRE_NOD_TAG_PAR AS IS_PAR,
      SYS_NODES_ATTRIB.ITEM_USED
    FROM
      (SELECT TMP_ID TRE_NOD_TAG
      FROM
        (SELECT TRE_NOD_TAG,
          TRE_NOD_TAG_PAR,
          Connect_By_Root TRE_NOD_TAG TMP_ID
        FROM
          (SELECT SYS_TREE_STRUC.TRE_NOD_TAG,
            SYS_TREE_STRUC.TRE_NOD_TAG_PAR,
            SYS_TREE_STRUC.TRE_DAT_TAG,
            SYS_TREE_STRUC_PAR.TRE_DAT_TAG AS TRE_DAT_TAG_PAR
          FROM SYS_TREE_STRUC
          LEFT JOIN SYS_TREE_STRUC SYS_TREE_STRUC_PAR
          ON SYS_TREE_STRUC.TRE_NOD_TAG_PAR = SYS_TREE_STRUC_PAR.TRE_NOD_TAG
          WHERE SYS_TREE_STRUC.TRE_DAT_TYPE = ' || P_DAT_TYPE || ' 
          GROUP BY SYS_TREE_STRUC.TRE_NOD_TAG,
            SYS_TREE_STRUC.TRE_NOD_TAG_PAR,
            SYS_TREE_STRUC.TRE_DAT_TAG,
            SYS_TREE_STRUC_PAR.TRE_DAT_TAG
          )
          START WITH NVL(TRE_DAT_TAG_PAR, 0) = ' || P_PAR_ID || ' 
          CONNECT BY Prior TRE_NOD_TAG       = TRE_NOD_TAG_PAR
        )
      GROUP BY TMP_ID
      ORDER BY 1
      ) T1
    INNER JOIN SYS_TREE_STRUC
    ON T1.TRE_NOD_TAG = SYS_TREE_STRUC.TRE_NOD_TAG
    LEFT JOIN SYS_TREE_STRUC SYS_TREE_STRUC_PAR
    ON SYS_TREE_STRUC.TRE_NOD_TAG_PAR = SYS_TREE_STRUC_PAR.TRE_NOD_TAG
    INNER JOIN SYS_NODES_ATTRIB
    ON SYS_TREE_STRUC.TRE_DAT_TAG = SYS_NODES_ATTRIB.REC_TAG
    LEFT JOIN SYS_TREE_STRUC SYS_TREE_STRUC_LEAF
    ON SYS_TREE_STRUC.TRE_NOD_TAG = SYS_TREE_STRUC_LEAF.TRE_NOD_TAG_PAR
    GROUP BY SYS_TREE_STRUC.TRE_DAT_TAG,
      SYS_TREE_STRUC_PAR.TRE_DAT_TAG,
      SYS_NODES_ATTRIB.NODE_ID,
      SYS_NODES_ATTRIB.NODE_DESC,
      SYS_TREE_STRUC_LEAF.TRE_NOD_TAG_PAR,
      SYS_NODES_ATTRIB.ITEM_USED,
      SYS_TREE_STRUC.TRE_NOD_ORDER ' || 
        V_HAVING || 
        ' ORDER BY SYS_TREE_STRUC.TRE_NOD_ORDER';


--CHANGED BECAUSE OF ERROR ON TRE_DAT_TYPE=5
--CONNECT BY Prior TRE_DAT_TAG       = TRE_DAT_TAG_PAR  TO CONNECT BY Prior TRE_NOD_TAG       = TRE_NOD_TAG_PAR


  RETURN V_RC;
END SP_TREE_COLOR;

/
--------------------------------------------------------
--  DDL for Function SP_TREE_COLOR_BY_LEVEL
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE FUNCTION "IMSA"."SP_TREE_COLOR_BY_LEVEL" 
(
  P_DAT_TYPE IN NUMBER DEFAULT 1,
  P_DAT_TAG IN NUMBER DEFAULT 0,
  P_DTL_TABLE IN VARCHAR2 DEFAULT 'TBL_ANOM_MAIN',
  P_COLOR_COL IN VARCHAR2 DEFAULT 'AN_CURR_CLASS'
) 
  RETURN SYS_REFCURSOR AS 
  V_RC SYS_REFCURSOR;
BEGIN
  -- FUNCTION FOR GETTING ASSET COLOR FROM BOTTOM TO TOP.
  OPEN V_RC FOR 
    'SELECT T2.TRE_DAT_TAG,
    T2.MAX_COLOR,
    SYS_NODES_ATTRIB.ITEM_USED 
    FROM 
    (
      SELECT SYS_TREE_STRUC.TRE_DAT_TAG,
        SYS_TREE_STRUC_PAR.TRE_DAT_TAG AS TRE_DAT_TAG_PAR, 
        SYS_LOOKUPS.LKP_DESC_B AS MAX_COLOR 
      FROM
        (SELECT TMP_ID TRE_NOD_TAG,
          MAX(MAX_COLOR) MAX_COLOR
        FROM
          (SELECT TRE_NOD_TAG,
            TRE_NOD_TAG_PAR,
            MAX_COLOR,
            Connect_By_Root TRE_NOD_TAG TMP_ID
          FROM
            (SELECT SYS_TREE_STRUC.TRE_NOD_TAG,
              SYS_TREE_STRUC.TRE_NOD_TAG_PAR,
              NVL(MAX(' || P_DTL_TABLE || '.' || P_COLOR_COL || '), 0) MAX_COLOR,
              SYS_TREE_STRUC.TRE_DAT_TAG,
              SYS_TREE_STRUC_PAR.TRE_DAT_TAG AS TRE_DAT_TAG_PAR
            FROM ' || P_DTL_TABLE || ' 
            RIGHT JOIN SYS_TREE_STRUC
            ON SYS_TREE_STRUC.TRE_DAT_TAG = ' || P_DTL_TABLE || '.ASSET_ID  
            LEFT JOIN SYS_TREE_STRUC SYS_TREE_STRUC_PAR
            ON SYS_TREE_STRUC.TRE_NOD_TAG_PAR = SYS_TREE_STRUC_PAR.TRE_NOD_TAG
            WHERE SYS_TREE_STRUC.TRE_DAT_TYPE = ' || P_DAT_TYPE || ' 
            GROUP BY SYS_TREE_STRUC.TRE_NOD_TAG,
              SYS_TREE_STRUC.TRE_NOD_TAG_PAR,
              SYS_TREE_STRUC.TRE_DAT_TAG,
              SYS_TREE_STRUC_PAR.TRE_DAT_TAG
            )
            --START WITH NVL(TRE_DAT_TAG_PAR, 0) = 45488
            CONNECT BY Prior TRE_DAT_TAG       = TRE_DAT_TAG_PAR
          )
        GROUP BY TMP_ID
        ORDER BY 1
        ) T1
      INNER JOIN SYS_TREE_STRUC
      ON T1.TRE_NOD_TAG = SYS_TREE_STRUC.TRE_NOD_TAG 
      LEFT JOIN SYS_TREE_STRUC SYS_TREE_STRUC_PAR 
      ON SYS_TREE_STRUC.TRE_NOD_TAG_PAR = SYS_TREE_STRUC_PAR.TRE_NOD_TAG 
      LEFT JOIN SYS_LOOKUPS 
      ON T1.MAX_COLOR = SYS_LOOKUPS.LKP_ID 
      GROUP BY SYS_TREE_STRUC.TRE_DAT_TAG,
        SYS_TREE_STRUC_PAR.TRE_DAT_TAG,
        SYS_LOOKUPS.LKP_DESC_B
    ) T2 
    INNER JOIN SYS_NODES_ATTRIB 
    ON T2.TRE_DAT_TAG           = SYS_NODES_ATTRIB.REC_TAG 
    START WITH T2.TRE_DAT_TAG = ' || P_DAT_TAG || ' 
    CONNECT BY T2.TRE_DAT_TAG = Prior T2.TRE_DAT_TAG_PAR';

  RETURN V_RC;
END SP_TREE_COLOR_BY_LEVEL;

/
--------------------------------------------------------
--  DDL for Function SP_TREE_COLOR_BY_TAG
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE FUNCTION "IMSA"."SP_TREE_COLOR_BY_TAG" 
(
  P_DAT_TYPE IN NUMBER DEFAULT 1,
  P_DAT_TAGS IN VARCHAR2 DEFAULT '1,5,6,7,8,9,574',
  P_DTL_TABLE IN VARCHAR2 DEFAULT 'V_TBL_ANOM_MAIN_ACT_COLOR',
  P_COLOR_COL IN VARCHAR2 DEFAULT 'ACTION_COLOR'
) 
  RETURN SYS_REFCURSOR AS 
  L_INPUT VARCHAR2(4000):=P_DAT_TAGS;
  L_COUNT BINARY_INTEGER;
  L_ARRAY DBMS_UTILITY.lname_array;  
  V_WHERE VARCHAR2(4000);
  V_RC SYS_REFCURSOR;
BEGIN
  -- FUNCTION FOR GETTING ASSET COLOR BASED ON ASSET TAG ARRAY PROVIDED.

  --Convert string to array.
  DBMS_UTILITY.COMMA_TO_TABLE
  (list   => REGEXP_REPLACE(L_INPUT,'(^|,)','\1x')
  ,tablen => L_COUNT
  ,tab    => L_ARRAY
  );
  DBMS_OUTPUT.PUT_LINE(L_COUNT);

  -- Create HAVING clause.
  FOR i IN 1 .. L_COUNT LOOP
    V_WHERE:= (V_WHERE || ('TRE_DAT_TAG=' || SUBSTR(L_ARRAY(i),2)) || ' OR ');
  END LOOP;

  V_WHERE:=RTRIM(V_WHERE, ' OR ');
DBMS_OUTPUT.PUT_LINE( 'SELECT SYS_TREE_STRUC.TRE_DAT_TAG,
      SYS_LOOKUPS.LKP_DESC_B AS MAX_COLOR, 
      SYS_NODES_ATTRIB.ITEM_USED 
    FROM
      (SELECT TMP_ID TRE_NOD_TAG,
       MAX(MAX_COLOR) MAX_COLOR 
      FROM
        (SELECT TRE_NOD_TAG,
          TRE_NOD_TAG_PAR,
          MAX_COLOR,
          Connect_By_Root TRE_NOD_TAG TMP_ID
        FROM
          (SELECT SYS_TREE_STRUC.TRE_NOD_TAG,
            SYS_TREE_STRUC.TRE_NOD_TAG_PAR,
            NVL(MAX(' || P_DTL_TABLE || '.' || P_COLOR_COL || '), 0) MAX_COLOR,
            SYS_TREE_STRUC.TRE_DAT_TAG,
            SYS_TREE_STRUC_PAR.TRE_DAT_TAG AS TRE_DAT_TAG_PAR
          FROM ' || P_DTL_TABLE || ' 
          RIGHT JOIN SYS_TREE_STRUC
          ON SYS_TREE_STRUC.TRE_DAT_TAG = ' || P_DTL_TABLE || '.ASSET_ID  
          LEFT JOIN SYS_TREE_STRUC SYS_TREE_STRUC_PAR
          ON SYS_TREE_STRUC.TRE_NOD_TAG_PAR = SYS_TREE_STRUC_PAR.TRE_NOD_TAG
          WHERE SYS_TREE_STRUC.TRE_DAT_TYPE = ' || P_DAT_TYPE || '
          GROUP BY SYS_TREE_STRUC.TRE_NOD_TAG,
            SYS_TREE_STRUC.TRE_NOD_TAG_PAR,
            SYS_TREE_STRUC.TRE_DAT_TAG,
            SYS_TREE_STRUC_PAR.TRE_DAT_TAG
          )
        CONNECT BY Prior TRE_NOD_TAG = TRE_NOD_TAG_PAR
        )
      GROUP BY TMP_ID
      ORDER BY 1
      ) T1
    INNER JOIN SYS_TREE_STRUC
    ON T1.TRE_NOD_TAG = SYS_TREE_STRUC.TRE_NOD_TAG 
    LEFT JOIN SYS_LOOKUPS 
    ON T1.MAX_COLOR = SYS_LOOKUPS.LKP_ID 
    INNER JOIN SYS_NODES_ATTRIB 
    ON SYS_TREE_STRUC.TRE_DAT_TAG = SYS_NODES_ATTRIB.REC_TAG 
    GROUP BY SYS_TREE_STRUC.TRE_DAT_TAG,
      SYS_LOOKUPS.LKP_DESC_B, 
      SYS_NODES_ATTRIB.ITEM_USED 
    HAVING ' || V_WHERE);

  OPEN V_RC FOR 
    'SELECT SYS_TREE_STRUC.TRE_DAT_TAG,
      SYS_LOOKUPS.LKP_DESC_B AS MAX_COLOR, 
      SYS_NODES_ATTRIB.ITEM_USED 
    FROM
      (SELECT TMP_ID TRE_NOD_TAG,
       MAX(MAX_COLOR) MAX_COLOR 
      FROM
        (SELECT TRE_NOD_TAG,
          TRE_NOD_TAG_PAR,
          MAX_COLOR,
          Connect_By_Root TRE_NOD_TAG TMP_ID
        FROM
          (SELECT SYS_TREE_STRUC.TRE_NOD_TAG,
            SYS_TREE_STRUC.TRE_NOD_TAG_PAR,
            NVL(MAX(' || P_DTL_TABLE || '.' || P_COLOR_COL || '), 0) MAX_COLOR,
            SYS_TREE_STRUC.TRE_DAT_TAG,
            SYS_TREE_STRUC_PAR.TRE_DAT_TAG AS TRE_DAT_TAG_PAR
          FROM ' || P_DTL_TABLE || ' 
          RIGHT JOIN SYS_TREE_STRUC
          ON SYS_TREE_STRUC.TRE_DAT_TAG = ' || P_DTL_TABLE || '.ASSET_ID  
          LEFT JOIN SYS_TREE_STRUC SYS_TREE_STRUC_PAR
          ON SYS_TREE_STRUC.TRE_NOD_TAG_PAR = SYS_TREE_STRUC_PAR.TRE_NOD_TAG
          WHERE SYS_TREE_STRUC.TRE_DAT_TYPE = ' || P_DAT_TYPE || '
          GROUP BY SYS_TREE_STRUC.TRE_NOD_TAG,
            SYS_TREE_STRUC.TRE_NOD_TAG_PAR,
            SYS_TREE_STRUC.TRE_DAT_TAG,
            SYS_TREE_STRUC_PAR.TRE_DAT_TAG
          )
        START WITH ' || V_WHERE || '     
        CONNECT BY Prior TRE_NOD_TAG = TRE_NOD_TAG_PAR
        )
      GROUP BY TMP_ID
      ORDER BY 1
      ) T1
    INNER JOIN SYS_TREE_STRUC
    ON T1.TRE_NOD_TAG = SYS_TREE_STRUC.TRE_NOD_TAG 
    LEFT JOIN SYS_LOOKUPS 
    ON T1.MAX_COLOR = SYS_LOOKUPS.LKP_ID 
    INNER JOIN SYS_NODES_ATTRIB 
    ON SYS_TREE_STRUC.TRE_DAT_TAG = SYS_NODES_ATTRIB.REC_TAG 
    GROUP BY SYS_TREE_STRUC.TRE_DAT_TAG,
      SYS_LOOKUPS.LKP_DESC_B, 
      SYS_NODES_ATTRIB.ITEM_USED 
    HAVING ' || V_WHERE;     
  RETURN V_RC;
EXCEPTION
 WHEN OTHERS THEN
    ROLLBACK;
    DBMS_OUTPUT.PUT_LINE(SQLCODE || '-' || SQLERRM);
    RETURN NULL;  
END SP_TREE_COLOR_BY_TAG;

/
--------------------------------------------------------
--  DDL for Function SP_TREE_COLOR_OLD
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE FUNCTION "IMSA"."SP_TREE_COLOR_OLD" 
(
  P_DAT_TYPE IN NUMBER DEFAULT 1,
  P_PAR_ID IN NUMBER DEFAULT 0,
  P_DTL_TABLE IN VARCHAR2 DEFAULT 'V_TBL_ANOM_MAIN_TREE',
  P_COLOR_COL IN VARCHAR2 DEFAULT 'ACTION_COLOR', 
  P_HAVING IN CLOB DEFAULT NULL
) 
  RETURN SYS_REFCURSOR AS 
  V_RC SYS_REFCURSOR;
  V_HAVING CLOB:='';
BEGIN
  IF (P_HAVING IS NOT NULL) THEN
    V_HAVING:=(' HAVING ' || P_HAVING);
  END IF;

  OPEN V_RC FOR 
    'SELECT SYS_TREE_STRUC.TRE_DAT_TAG,
      SYS_TREE_STRUC_PAR.TRE_DAT_TAG AS TRE_DAT_TAG_PAR,
      SYS_NODES_ATTRIB.NODE_ID,
      SYS_NODES_ATTRIB.NODE_DESC,
      SYS_LOOKUPS.LKP_DESC_B AS MAX_COLOR,
      SYS_TREE_STRUC_LEAF.TRE_NOD_TAG_PAR AS IS_PAR,
      SYS_NODES_ATTRIB.ITEM_USED
    FROM
      (SELECT TMP_ID TRE_NOD_TAG,
        MAX(MAX_COLOR) MAX_COLOR
      FROM
        (SELECT TRE_NOD_TAG,
          TRE_NOD_TAG_PAR,
          MAX_COLOR,
          Connect_By_Root TRE_NOD_TAG TMP_ID
        FROM
          (SELECT SYS_TREE_STRUC.TRE_NOD_TAG,
            SYS_TREE_STRUC.TRE_NOD_TAG_PAR,
            NVL(MAX(' || P_DTL_TABLE || '.' || P_COLOR_COL || '), 0) MAX_COLOR,
            SYS_TREE_STRUC.TRE_DAT_TAG,
            SYS_TREE_STRUC_PAR.TRE_DAT_TAG AS TRE_DAT_TAG_PAR
          FROM  ' || P_DTL_TABLE || ' 
          RIGHT JOIN SYS_TREE_STRUC
          ON SYS_TREE_STRUC.TRE_DAT_TAG = ' || P_DTL_TABLE || '.ASSET_ID 
          LEFT JOIN SYS_TREE_STRUC SYS_TREE_STRUC_PAR
          ON SYS_TREE_STRUC.TRE_NOD_TAG_PAR = SYS_TREE_STRUC_PAR.TRE_NOD_TAG
          WHERE SYS_TREE_STRUC.TRE_DAT_TYPE = ' || P_DAT_TYPE || ' 
          GROUP BY SYS_TREE_STRUC.TRE_NOD_TAG,
            SYS_TREE_STRUC.TRE_NOD_TAG_PAR,
            SYS_TREE_STRUC.TRE_DAT_TAG,
            SYS_TREE_STRUC_PAR.TRE_DAT_TAG
          )
          START WITH NVL(TRE_DAT_TAG_PAR, 0) = ' || P_PAR_ID || ' 
          CONNECT BY Prior TRE_NOD_TAG       = TRE_NOD_TAG_PAR
        )
      GROUP BY TMP_ID
      ORDER BY 1
      ) T1
    INNER JOIN SYS_TREE_STRUC
    ON T1.TRE_NOD_TAG = SYS_TREE_STRUC.TRE_NOD_TAG
    LEFT JOIN SYS_TREE_STRUC SYS_TREE_STRUC_PAR
    ON SYS_TREE_STRUC.TRE_NOD_TAG_PAR = SYS_TREE_STRUC_PAR.TRE_NOD_TAG
    INNER JOIN SYS_NODES_ATTRIB
    ON SYS_TREE_STRUC.TRE_DAT_TAG = SYS_NODES_ATTRIB.REC_TAG
    LEFT JOIN SYS_TREE_STRUC SYS_TREE_STRUC_LEAF
    ON SYS_TREE_STRUC.TRE_NOD_TAG = SYS_TREE_STRUC_LEAF.TRE_NOD_TAG_PAR 
    LEFT JOIN SYS_LOOKUPS 
    ON T1.MAX_COLOR = SYS_LOOKUPS.LKP_ID 
    GROUP BY SYS_TREE_STRUC.TRE_DAT_TAG,
      SYS_TREE_STRUC_PAR.TRE_DAT_TAG,
      SYS_NODES_ATTRIB.NODE_ID,
      SYS_NODES_ATTRIB.NODE_DESC,
      SYS_LOOKUPS.LKP_DESC_B,
      SYS_TREE_STRUC_LEAF.TRE_NOD_TAG_PAR,
      SYS_TREE_STRUC.TRE_NOD_ORDER,
      SYS_NODES_ATTRIB.ITEM_USED' || 
    V_HAVING || 
    ' ORDER BY SYS_TREE_STRUC.TRE_NOD_ORDER';

--CHANGED BECAUSE OF ERROR ON TRE_DAT_TYPE=5
--CONNECT BY Prior TRE_DAT_TAG       = TRE_DAT_TAG_PAR  TO CONNECT BY Prior TRE_NOD_TAG       = TRE_NOD_TAG_PAR


  RETURN V_RC;
END SP_TREE_COLOR_OLD;

/
--------------------------------------------------------
--  DDL for Function SP_TREE_FIND
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE FUNCTION "IMSA"."SP_TREE_FIND" 
(
  P_DAT_TYPE IN NUMBER DEFAULT 1,
  P_REC_TAG IN NUMBER DEFAULT -1
) 
  RETURN SYS_REFCURSOR AS 
  V_RC SYS_REFCURSOR;
BEGIN
    OPEN V_RC FOR 
      SELECT TRE_DAT_TAG FROM SYS_TREE_STRUC WHERE TRE_DAT_TYPE=P_DAT_TYPE AND TRE_DAT_TAG <> P_REC_TAG 
      START WITH TRE_DAT_TAG = P_REC_TAG CONNECT BY TRE_NOD_TAG=PRIOR TRE_NOD_TAG_PAR;

      RETURN V_RC;
END SP_TREE_FIND;

/
--------------------------------------------------------
--  DDL for Function SP_UPDATE_CH
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE FUNCTION "IMSA"."SP_UPDATE_CH" 
(
--Param for Header
  P_MODULE IN  VARCHAR2 DEFAULT 'FS'
  , P_CHD_HDR_ID IN NUMBER DEFAULT NULL
  , P_CHD_HDR_ASSET_ID IN NUMBER DEFAULT NULL
  , P_CHD_HDR_SAMP_DATE IN DATE DEFAULT NULL
  , P_CHD_HDR_ANA_VEND IN NUMBER DEFAULT NULL
  , P_CHD_HDR_STATUS IN NUMBER DEFAULT NULL
  , P_CHD_HDR_COMMENTS IN VARCHAR2 DEFAULT NULL
  , P_DAT_TYPE IN NUMBER DEFAULT 1

--param for Details
  , P_CHD_CHEM_QUAL_GNAME IN NUMBER DEFAULT NULL
  , P_CHD_CHEM_QUAL_PNAME IN VARCHAR2 DEFAULT NULL
  , P_CHD_CHEM_QUAL_CNAME IN VARCHAR2 DEFAULT NULL
  , P_CHD_CHEM_QUAL_REC_T IN NUMBER DEFAULT NULL
  
)
  RETURN NUMBER AS 
  
  V_N NUMBER;

BEGIN

   IF (P_MODULE = 'cd') THEN    
      UPDATE TBL_CHD_CHEM_QUAL SET
        CHD_CHEM_QUAL_GNAME=P_CHD_CHEM_QUAL_GNAME
        ,CHD_CHEM_QUAL_PNAME=P_CHD_CHEM_QUAL_PNAME
        ,CHD_CHEM_QUAL_CNAME=P_CHD_CHEM_QUAL_CNAME
        ,CHD_CHEM_QUAL_REC_T=P_CHD_CHEM_QUAL_REC_T
      WHERE CHD_CHEM_QUAL_ID=P_CHD_HDR_ID;    
   END IF;


  V_N:=SP_UPDATE_TBL_CHD_HEADER(P_MODULE, 
  P_CHD_HDR_ID, 
  P_CHD_HDR_ASSET_ID, 
  P_CHD_HDR_SAMP_DATE, 
  P_CHD_HDR_ANA_VEND, 
  P_CHD_HDR_STATUS,
  P_CHD_HDR_COMMENTS,
  P_DAT_TYPE);


  COMMIT;


  RETURN V_N;
EXCEPTION
 WHEN OTHERS THEN
    ROLLBACK;
    RETURN -1;
END SP_UPDATE_CH;

/
--------------------------------------------------------
--  DDL for Function SP_UPDATE_CH_BAB
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE FUNCTION "IMSA"."SP_UPDATE_CH_BAB" 
(
--Param for Header
  P_MODULE IN  VARCHAR2 DEFAULT 'FS'
  , P_CHD_HDR_ID IN NUMBER DEFAULT NULL
  , P_CHD_HDR_ASSET_ID IN NUMBER DEFAULT NULL
  , P_CHD_HDR_SAMP_DATE IN DATE DEFAULT NULL
  , P_CHD_HDR_ANA_VEND IN NUMBER DEFAULT NULL
  , P_CHD_HDR_STATUS IN NUMBER DEFAULT NULL
  , P_CHD_HDR_COMMENTS IN VARCHAR2 DEFAULT NULL
  , P_DAT_TYPE IN NUMBER DEFAULT 1
  , P_COLOR_MODE IN VARCHAR2 DEFAULT 'ACTION_COLOR'
  , P_OPERATION IN VARCHAR2 DEFAULT NULL
  , P_USER IN VARCHAR2 DEFAULT 'IMSA ADMIN'

--param for Details
  , P_CHD_BAC_BAC_PSRB IN NUMBER DEFAULT NULL
  , P_CHD_BAC_BAC_PGRB IN NUMBER DEFAULT NULL
  , P_CHD_BAC_BAC_PNRB IN NUMBER DEFAULT NULL
  , P_CHD_BAC_BAC_PNRSOB IN NUMBER DEFAULT NULL
  , P_CHD_BAC_BAC_SSRB IN NUMBER DEFAULT NULL
  , P_CHD_BAC_BAC_SGRB IN NUMBER DEFAULT NULL
  , P_CHD_BAC_BAC_SNRB IN NUMBER DEFAULT NULL
  , P_CHD_BAC_BAC_SNRSOB IN NUMBER DEFAULT NULL
  , P_CHD_BAC_BAC_REC_TYPE IN NUMBER DEFAULT NULL
)
  RETURN NUMBER AS 
  
  V_EVT_LOG NUMBER;
  V_NEW_ID NUMBER;
BEGIN
  IF (P_OPERATION = 'UPDATE') THEN   
    V_NEW_ID:=SP_UPDATE_TBL_CHD_HEADER(P_MODULE, 
    P_CHD_HDR_ID, 
    P_CHD_HDR_ASSET_ID, 
    P_CHD_HDR_SAMP_DATE, 
    P_CHD_HDR_ANA_VEND, 
    P_CHD_HDR_STATUS,
    P_CHD_HDR_COMMENTS,
    P_DAT_TYPE,
    P_COLOR_MODE,
    P_USER);   

    UPDATE TBL_CHD_BAC_BAC SET    
      CHD_BAC_BAC_PSRB = P_CHD_BAC_BAC_PSRB
      , CHD_BAC_BAC_PGRB = P_CHD_BAC_BAC_PGRB
      , CHD_BAC_BAC_PNRB = P_CHD_BAC_BAC_PNRB
      , CHD_BAC_BAC_PNRSOB = P_CHD_BAC_BAC_PNRSOB
      , CHD_BAC_BAC_SSRB = P_CHD_BAC_BAC_SSRB
      , CHD_BAC_BAC_SGRB = P_CHD_BAC_BAC_SGRB
      , CHD_BAC_BAC_SNRB = P_CHD_BAC_BAC_SNRB
      , CHD_BAC_BAC_SNRSOB = P_CHD_BAC_BAC_SNRSOB
      , CHD_BAC_BAC_REC_TYPE = P_CHD_BAC_BAC_REC_TYPE    
    WHERE CHD_BAC_BAC_ID=P_CHD_HDR_ID;

    V_EVT_LOG:=SP_INSERT_TBL_EVENT_LOG(P_USER,'TBL_CHD_BAC_BAC','UPDATE SUCCESS: #' || P_CHD_HDR_ID);
  END IF;
  IF (P_OPERATION = 'INSERT') THEN 
    V_NEW_ID:=SP_INSERT_TBL_CHD_HEADER(P_MODULE, 
    P_CHD_HDR_ID, 
    P_CHD_HDR_ASSET_ID, 
    P_CHD_HDR_SAMP_DATE, 
    P_CHD_HDR_ANA_VEND, 
    P_CHD_HDR_STATUS,
    P_CHD_HDR_COMMENTS,
    P_DAT_TYPE,
    P_COLOR_MODE,
    P_USER);   

    INSERT INTO  TBL_CHD_BAC_BAC (
      CHD_BAC_BAC_PSRB 
      , CHD_BAC_BAC_PGRB 
      , CHD_BAC_BAC_PNRB 
      , CHD_BAC_BAC_PNRSOB 
      , CHD_BAC_BAC_SSRB 
      , CHD_BAC_BAC_SGRB 
      , CHD_BAC_BAC_SNRB 
      , CHD_BAC_BAC_SNRSOB 
      , CHD_BAC_BAC_REC_TYPE
      , CHD_BAC_BAC_ID
      ) VALUES (
      P_CHD_BAC_BAC_PSRB
      , P_CHD_BAC_BAC_PGRB
      , P_CHD_BAC_BAC_PNRB
      , P_CHD_BAC_BAC_PNRSOB
      , P_CHD_BAC_BAC_SSRB
      , P_CHD_BAC_BAC_SGRB
      , P_CHD_BAC_BAC_SNRB
      , P_CHD_BAC_BAC_SNRSOB
      , P_CHD_BAC_BAC_REC_TYPE
      ,V_NEW_ID        
      );

    V_EVT_LOG:=SP_INSERT_TBL_EVENT_LOG(P_USER,'TBL_CHD_BAC_BAC','INSERT SUCCESS: #' || V_NEW_ID);
  END IF;

  COMMIT;
  RETURN V_NEW_ID;
EXCEPTION
 WHEN OTHERS THEN
    ROLLBACK;
    IF (P_OPERATION = 'INSERT') THEN    
      V_EVT_LOG:=SP_INSERT_TBL_EVENT_LOG(P_USER,'TBL_CHD_BAC_BAC','INSERT FAIL: #' || V_NEW_ID || '; ERR: ' || SQLCODE || '-' || SQLERRM);
    ELSE
      V_EVT_LOG:=SP_INSERT_TBL_EVENT_LOG(P_USER,'TBL_CHD_BAC_BAC','UPDATE FAIL: #' || P_CHD_HDR_ID || '; ERR: ' || SQLCODE || '-' || SQLERRM);
    END IF;
    RETURN -1;
END SP_UPDATE_CH_BAB;

/
--------------------------------------------------------
--  DDL for Function SP_UPDATE_CH_BABT
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE FUNCTION "IMSA"."SP_UPDATE_CH_BABT" 
(
--Param for Header
  P_MODULE IN  VARCHAR2 DEFAULT 'FS'
  , P_CHD_HDR_ID IN NUMBER DEFAULT NULL
  , P_CHD_HDR_ASSET_ID IN NUMBER DEFAULT NULL
  , P_CHD_HDR_SAMP_DATE IN DATE DEFAULT NULL
  , P_CHD_HDR_ANA_VEND IN NUMBER DEFAULT NULL
  , P_CHD_HDR_STATUS IN NUMBER DEFAULT NULL
  , P_CHD_HDR_COMMENTS IN VARCHAR2 DEFAULT NULL
  , P_DAT_TYPE IN NUMBER DEFAULT 1
  , P_COLOR_MODE IN VARCHAR2 DEFAULT 'ACTION_COLOR'
  , P_OPERATION IN VARCHAR2 DEFAULT NULL
  , P_USER IN VARCHAR2 DEFAULT 'IMSA ADMIN'
)
  RETURN NUMBER AS 
  
  V_EVT_LOG NUMBER;
  V_NEW_ID NUMBER;
BEGIN

  IF (P_OPERATION = 'UPDATE') THEN 
    V_NEW_ID:=SP_UPDATE_TBL_CHD_HEADER(P_MODULE, 
    P_CHD_HDR_ID, 
    P_CHD_HDR_ASSET_ID, 
    P_CHD_HDR_SAMP_DATE, 
    P_CHD_HDR_ANA_VEND, 
    P_CHD_HDR_STATUS,
    P_CHD_HDR_COMMENTS,
    P_DAT_TYPE,
    P_COLOR_MODE,
    P_USER);   
  END IF;

  IF (P_OPERATION = 'INSERT') THEN 
    V_NEW_ID:=SP_INSERT_TBL_CHD_HEADER(P_MODULE, 
    P_CHD_HDR_ID, 
    P_CHD_HDR_ASSET_ID, 
    P_CHD_HDR_SAMP_DATE, 
    P_CHD_HDR_ANA_VEND, 
    P_CHD_HDR_STATUS,
    P_CHD_HDR_COMMENTS,
    P_DAT_TYPE,
    P_COLOR_MODE,
    P_USER);   
  END IF;

  COMMIT;

  RETURN V_NEW_ID;
EXCEPTION
 WHEN OTHERS THEN
    ROLLBACK;
    RETURN NULL;
END SP_UPDATE_CH_BABT;

/
--------------------------------------------------------
--  DDL for Function SP_UPDATE_CH_BSW
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE FUNCTION "IMSA"."SP_UPDATE_CH_BSW" 
(
--Param for Header
  P_MODULE IN  VARCHAR2 DEFAULT 'FS'
  , P_CHD_HDR_ID IN NUMBER DEFAULT NULL
  , P_CHD_HDR_ASSET_ID IN NUMBER DEFAULT NULL
  , P_CHD_HDR_SAMP_DATE IN DATE DEFAULT NULL
  , P_CHD_HDR_ANA_VEND IN NUMBER DEFAULT NULL
  , P_CHD_HDR_STATUS IN NUMBER DEFAULT NULL
  , P_CHD_HDR_COMMENTS IN VARCHAR2 DEFAULT NULL
  , P_DAT_TYPE IN NUMBER DEFAULT 1
  , P_COLOR_MODE IN VARCHAR2 DEFAULT 'ACTION_COLOR'
  , P_OPERATION IN VARCHAR2 DEFAULT NULL
  , P_USER IN VARCHAR2 DEFAULT 'IMSA ADMIN'

  --param for Details                                                                  
  , P_CHD_HDR_TXT1 IN VARCHAR2 DEFAULT NULL                                            
  , P_CHD_HDR_DBL IN NUMBER DEFAULT NULL
)
  RETURN NUMBER AS 
  
  V_EVT_LOG NUMBER;
  V_NEW_ID NUMBER;
  V_SUB_MODULE NUMBER;
BEGIN
  IF (P_OPERATION = 'UPDATE') THEN      
    UPDATE TBL_CHD_HEADER SET
      CHD_HDR_ASSET_ID=P_CHD_HDR_ASSET_ID
      , CHD_HDR_SAMP_DATE=P_CHD_HDR_SAMP_DATE
      , CHD_HDR_ANA_VEND=P_CHD_HDR_ANA_VEND
      , CHD_HDR_STATUS=P_CHD_HDR_STATUS
      , CHD_HDR_COMMENTS=P_CHD_HDR_COMMENTS
      , CHD_HDR_TXT1=P_CHD_HDR_TXT1
      , CHD_HDR_DBL=P_CHD_HDR_DBL
    WHERE CHD_HDR_ID=P_CHD_HDR_ID;        
    V_EVT_LOG:=SP_INSERT_TBL_EVENT_LOG(P_USER,'TBL_CHD_HEADER','UPDATE SUCCESS: #' || P_CHD_HDR_ID);
  END IF;

  IF (P_OPERATION = 'INSERT') THEN 
    V_SUB_MODULE:= SP_CH_SUB_MOD_NO(P_MODULE);
    V_NEW_ID:=SP_NEW_TABLE_PK_NO('TBL_CHD_HEADER', 'CHD_HDR_ID');
     INSERT INTO  TBL_CHD_HEADER (
        CHD_HDR_ID,
        CHD_HDR_ASSET_ID,
        CHD_HDR_SAMP_DATE,
        CHD_HDR_ANA_VEND,
        CHD_HDR_STATUS,
        CHD_HDR_COMMENTS,
        CHD_HDR_TYPE,
        CHD_HDR_TXT1,
        CHD_HDR_DBL
     ) VALUES (
        V_NEW_ID,
        P_CHD_HDR_ASSET_ID,
        P_CHD_HDR_SAMP_DATE,
        P_CHD_HDR_ANA_VEND,
        P_CHD_HDR_STATUS,
        P_CHD_HDR_COMMENTS,
        V_SUB_MODULE,
        P_CHD_HDR_TXT1,
        P_CHD_HDR_DBL
     );
     V_EVT_LOG:=SP_INSERT_TBL_EVENT_LOG(P_USER,'TBL_CHD_HEADER','INSERT SUCCESS: #' || V_NEW_ID);
  END IF;

  COMMIT;

 RETURN V_NEW_ID;
EXCEPTION
 WHEN OTHERS THEN
    ROLLBACK;
    IF (P_OPERATION = 'INSERT') THEN    
      V_EVT_LOG:=SP_INSERT_TBL_EVENT_LOG(P_USER,'TBL_CHD_HEADER','INSERT FAIL: #' || V_NEW_ID || '; ERR: ' || SQLCODE || '-' || SQLERRM);
    ELSE
      V_EVT_LOG:=SP_INSERT_TBL_EVENT_LOG(P_USER,'TBL_CHD_HEADER','UPDATE FAIL: #' || P_CHD_HDR_ID || '; ERR: ' || SQLCODE || '-' || SQLERRM);
    END IF;
    RETURN -1;
END SP_UPDATE_CH_BSW;

/
--------------------------------------------------------
--  DDL for Function SP_UPDATE_CH_CC
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE FUNCTION "IMSA"."SP_UPDATE_CH_CC" 
(
--Param for Header
  P_MODULE IN  VARCHAR2 DEFAULT 'FS'
  , P_CHD_HDR_ID IN NUMBER DEFAULT NULL
  , P_CHD_HDR_ASSET_ID IN NUMBER DEFAULT NULL
  , P_CHD_HDR_SAMP_DATE IN DATE DEFAULT NULL
  , P_CHD_HDR_ANA_VEND IN NUMBER DEFAULT NULL
  , P_CHD_HDR_STATUS IN NUMBER DEFAULT NULL
  , P_CHD_HDR_COMMENTS IN VARCHAR2 DEFAULT NULL
  , P_DAT_TYPE IN NUMBER DEFAULT 1
  , P_COLOR_MODE IN VARCHAR2 DEFAULT 'ACTION_COLOR'
  , P_OPERATION IN VARCHAR2 DEFAULT NULL
  , P_USER IN VARCHAR2 DEFAULT 'IMSA ADMIN'

--param for Details
    , P_CHD_COUP_CORR_DT_INST IN DATE DEFAULT NULL
    , P_CHD_COUP_CORR_DT_REM IN DATE DEFAULT NULL
    , P_CHD_COUP_CORR_DAYS_EXP IN NUMBER DEFAULT NULL
    , P_CHD_COUP_CORR_GEN_MPY IN NUMBER DEFAULT NULL
    , P_CHD_COUP_CORR_PITTING_MPY IN NUMBER DEFAULT NULL
)
  RETURN NUMBER AS 
  
  V_EVT_LOG NUMBER;
  V_NEW_ID NUMBER;
BEGIN
  IF (P_OPERATION = 'UPDATE') THEN   
    V_NEW_ID:=SP_UPDATE_TBL_CHD_HEADER(P_MODULE, 
    P_CHD_HDR_ID, 
    P_CHD_HDR_ASSET_ID, 
    P_CHD_HDR_SAMP_DATE, 
    P_CHD_HDR_ANA_VEND, 
    P_CHD_HDR_STATUS,
    P_CHD_HDR_COMMENTS,
    P_DAT_TYPE,
    P_COLOR_MODE,
    P_USER);   

    UPDATE TBL_CHD_COUP_CORR SET      
      CHD_COUP_CORR_DT_INST = P_CHD_COUP_CORR_DT_INST,
      CHD_COUP_CORR_DT_REM = P_CHD_COUP_CORR_DT_REM,
      CHD_COUP_CORR_DAYS_EXP = P_CHD_COUP_CORR_DAYS_EXP,
      CHD_COUP_CORR_GEN_MPY = P_CHD_COUP_CORR_GEN_MPY,
      CHD_COUP_CORR_PITTING_MPY = P_CHD_COUP_CORR_PITTING_MPY
    WHERE CHD_COUP_CORR_ID=P_CHD_HDR_ID;

    V_EVT_LOG:=SP_INSERT_TBL_EVENT_LOG(P_USER,'TBL_CHD_COUP_CORR','UPDATE SUCCESS: #' || P_CHD_HDR_ID);
  END IF;

  IF (P_OPERATION = 'INSERT') THEN 
    V_NEW_ID:=SP_INSERT_TBL_CHD_HEADER(P_MODULE, 
    P_CHD_HDR_ID, 
    P_CHD_HDR_ASSET_ID, 
    P_CHD_HDR_SAMP_DATE, 
    P_CHD_HDR_ANA_VEND, 
    P_CHD_HDR_STATUS,
    P_CHD_HDR_COMMENTS,
    P_DAT_TYPE,
    P_COLOR_MODE,
    P_USER);   

    INSERT INTO  TBL_CHD_COUP_CORR (
      CHD_COUP_CORR_DT_INST,
      CHD_COUP_CORR_DT_REM,
      CHD_COUP_CORR_DAYS_EXP,
      CHD_COUP_CORR_GEN_MPY,
      CHD_COUP_CORR_PITTING_MPY,
      CHD_COUP_CORR_ID
      ) VALUES (      
      P_CHD_COUP_CORR_DT_INST,
      P_CHD_COUP_CORR_DT_REM,
      P_CHD_COUP_CORR_DAYS_EXP,
      P_CHD_COUP_CORR_GEN_MPY,
      P_CHD_COUP_CORR_PITTING_MPY,
      V_NEW_ID        
      );

      V_EVT_LOG:=SP_INSERT_TBL_EVENT_LOG(P_USER,'TBL_CHD_COUP_CORR','INSERT SUCCESS: #' || V_NEW_ID);
  END IF;
  COMMIT;
  RETURN V_NEW_ID;
EXCEPTION
 WHEN OTHERS THEN
    ROLLBACK;
    IF (P_OPERATION = 'INSERT') THEN    
      V_EVT_LOG:=SP_INSERT_TBL_EVENT_LOG(P_USER,'TBL_CHD_COUP_CORR','INSERT FAIL: #' || V_NEW_ID || '; ERR: ' || SQLCODE || '-' || SQLERRM);
    ELSE
      V_EVT_LOG:=SP_INSERT_TBL_EVENT_LOG(P_USER,'TBL_CHD_COUP_CORR','UPDATE FAIL: #' || P_CHD_HDR_ID || '; ERR: ' || SQLCODE || '-' || SQLERRM);
    END IF;
    RETURN -1;
END SP_UPDATE_CH_CC;

/
--------------------------------------------------------
--  DDL for Function SP_UPDATE_CH_CD
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE FUNCTION "IMSA"."SP_UPDATE_CH_CD" 
(
--Param for Header
  P_MODULE IN  VARCHAR2 DEFAULT 'FS'
  , P_CHD_HDR_ID IN NUMBER DEFAULT NULL
  , P_CHD_HDR_ASSET_ID IN NUMBER DEFAULT NULL
  , P_CHD_HDR_SAMP_DATE IN DATE DEFAULT NULL
  , P_CHD_HDR_ANA_VEND IN NUMBER DEFAULT NULL
  , P_CHD_HDR_STATUS IN NUMBER DEFAULT NULL
  , P_CHD_HDR_COMMENTS IN VARCHAR2 DEFAULT NULL
  , P_DAT_TYPE IN NUMBER DEFAULT 1
  , P_COLOR_MODE IN VARCHAR2 DEFAULT 'ACTION_COLOR'
  , P_OPERATION IN VARCHAR2 DEFAULT NULL
  , P_USER IN VARCHAR2 DEFAULT 'IMSA ADMIN'
--param for Details
  , P_CHD_CHEM_QUAL_GNAME IN NUMBER DEFAULT NULL
  , P_CHD_CHEM_QUAL_PNAME IN VARCHAR2 DEFAULT NULL
  , P_CHD_CHEM_QUAL_CNAME IN VARCHAR2 DEFAULT NULL
  , P_CHD_CHEM_QUAL_REC_T IN NUMBER DEFAULT NULL
  
)
 RETURN NUMBER AS 
  
  V_EVT_LOG NUMBER;
  V_NEW_ID NUMBER;
BEGIN
  IF (P_OPERATION = 'UPDATE') THEN   
    V_NEW_ID:=SP_UPDATE_TBL_CHD_HEADER(P_MODULE, 
    P_CHD_HDR_ID, 
    P_CHD_HDR_ASSET_ID, 
    P_CHD_HDR_SAMP_DATE, 
    P_CHD_HDR_ANA_VEND, 
    P_CHD_HDR_STATUS,
    P_CHD_HDR_COMMENTS,
    P_DAT_TYPE,
    P_COLOR_MODE,
    P_USER);   

    UPDATE TBL_CHD_CHEM_QUAL SET
      CHD_CHEM_QUAL_GNAME=P_CHD_CHEM_QUAL_GNAME
      ,CHD_CHEM_QUAL_PNAME=P_CHD_CHEM_QUAL_PNAME
      ,CHD_CHEM_QUAL_CNAME=P_CHD_CHEM_QUAL_CNAME
      ,CHD_CHEM_QUAL_REC_T=P_CHD_CHEM_QUAL_REC_T
    WHERE CHD_CHEM_QUAL_ID=P_CHD_HDR_ID;

    V_EVT_LOG:=SP_INSERT_TBL_EVENT_LOG(P_USER,'TBL_CHD_CHEM_QUAL','UPDATE SUCCESS: #' || P_CHD_HDR_ID);
  END IF;

  IF (P_OPERATION = 'INSERT') THEN 
    V_NEW_ID:=SP_INSERT_TBL_CHD_HEADER(P_MODULE, 
    P_CHD_HDR_ID, 
    P_CHD_HDR_ASSET_ID, 
    P_CHD_HDR_SAMP_DATE, 
    P_CHD_HDR_ANA_VEND, 
    P_CHD_HDR_STATUS,
    P_CHD_HDR_COMMENTS,
    P_DAT_TYPE,
    P_COLOR_MODE,
    P_USER);   

    INSERT INTO  TBL_CHD_CHEM_QUAL (
      CHD_CHEM_QUAL_GNAME
      ,CHD_CHEM_QUAL_PNAME
      ,CHD_CHEM_QUAL_CNAME
      ,CHD_CHEM_QUAL_REC_T,
      CHD_CHEM_QUAL_ID
      ) VALUES (
      P_CHD_CHEM_QUAL_GNAME,
      P_CHD_CHEM_QUAL_PNAME,
      P_CHD_CHEM_QUAL_CNAME,
      P_CHD_CHEM_QUAL_REC_T,
      V_NEW_ID        
      );
      V_EVT_LOG:=SP_INSERT_TBL_EVENT_LOG(P_USER,'TBL_CHD_CHEM_QUAL','INSERT SUCCESS: #' || V_NEW_ID);
  END IF;
  COMMIT;

  RETURN V_NEW_ID;
EXCEPTION
 WHEN OTHERS THEN
    ROLLBACK;
    IF (P_OPERATION = 'INSERT') THEN    
      V_EVT_LOG:=SP_INSERT_TBL_EVENT_LOG(P_USER,'TBL_CHD_CHEM_QUAL','INSERT FAIL: #' || V_NEW_ID || '; ERR: ' || SQLCODE || '-' || SQLERRM);
    ELSE
      V_EVT_LOG:=SP_INSERT_TBL_EVENT_LOG(P_USER,'TBL_CHD_CHEM_QUAL','UPDATE FAIL: #' || P_CHD_HDR_ID || '; ERR: ' || SQLCODE || '-' || SQLERRM);
    END IF;
    RETURN -1;
END SP_UPDATE_CH_CD;

/
--------------------------------------------------------
--  DDL for Function SP_UPDATE_CH_CR
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE FUNCTION "IMSA"."SP_UPDATE_CH_CR" 
(
--Param for Header
  P_MODULE IN  VARCHAR2 DEFAULT 'FS'
  , P_CHD_HDR_ID IN NUMBER DEFAULT NULL
  , P_CHD_HDR_ASSET_ID IN NUMBER DEFAULT NULL
  , P_CHD_HDR_SAMP_DATE IN DATE DEFAULT NULL
  , P_CHD_HDR_ANA_VEND IN NUMBER DEFAULT NULL
  , P_CHD_HDR_STATUS IN NUMBER DEFAULT NULL
  , P_CHD_HDR_COMMENTS IN VARCHAR2 DEFAULT NULL
  , P_DAT_TYPE IN NUMBER DEFAULT 1
  , P_COLOR_MODE IN VARCHAR2 DEFAULT 'ACTION_COLOR'
  , P_OPERATION IN VARCHAR2 DEFAULT NULL
  , P_USER IN VARCHAR2 DEFAULT 'IMSA ADMIN'
--param for Details
  , P_CHD_CHEM_RSD_GNAME IN NUMBER DEFAULT NULL
  , P_CHD_CHEM_RSD_PNAME IN VARCHAR2 DEFAULT NULL
  , P_CHD_CHEM_RSD_CNAME IN VARCHAR2 DEFAULT NULL
  , P_CHD_CHEM_RSD_IPOINT IN VARCHAR2 DEFAULT NULL
  , P_CHD_CHEM_RSD_REC_T IN NUMBER DEFAULT NULL
  , P_CHD_CHEM_RSD_ACT_RATE  IN NUMBER DEFAULT NULL
)
 RETURN NUMBER AS 
  
  V_EVT_LOG NUMBER;
  V_NEW_ID NUMBER;
BEGIN
  IF (P_OPERATION = 'UPDATE') THEN   
    V_NEW_ID:=SP_UPDATE_TBL_CHD_HEADER(P_MODULE, 
    P_CHD_HDR_ID, 
    P_CHD_HDR_ASSET_ID, 
    P_CHD_HDR_SAMP_DATE, 
    P_CHD_HDR_ANA_VEND, 
    P_CHD_HDR_STATUS,
    P_CHD_HDR_COMMENTS,
    P_DAT_TYPE,
    P_COLOR_MODE,
    P_USER);  

    UPDATE TBL_CHD_CHEM_RSD SET
      CHD_CHEM_RSD_GNAME=P_CHD_CHEM_RSD_GNAME,
      CHD_CHEM_RSD_PNAME=P_CHD_CHEM_RSD_PNAME,
      CHD_CHEM_RSD_CNAME=P_CHD_CHEM_RSD_CNAME,
      CHD_CHEM_RSD_IPOINT=P_CHD_CHEM_RSD_IPOINT,
      CHD_CHEM_RSD_REC_T=P_CHD_CHEM_RSD_REC_T,
      CHD_CHEM_RSD_ACT_RATE=P_CHD_CHEM_RSD_ACT_RATE      
    WHERE CHD_CHEM_RSD_ID=P_CHD_HDR_ID;

    V_EVT_LOG:=SP_INSERT_TBL_EVENT_LOG(P_USER,'TBL_CHD_CHEM_RSD','UPDATE SUCCESS: #' || P_CHD_HDR_ID);    
  END IF;

  IF (P_OPERATION = 'INSERT') THEN 
    V_NEW_ID:=SP_INSERT_TBL_CHD_HEADER(P_MODULE, 
    P_CHD_HDR_ID, 
    P_CHD_HDR_ASSET_ID, 
    P_CHD_HDR_SAMP_DATE, 
    P_CHD_HDR_ANA_VEND, 
    P_CHD_HDR_STATUS,
    P_CHD_HDR_COMMENTS,
    P_DAT_TYPE,
    P_COLOR_MODE,
    P_USER); 

    INSERT INTO  TBL_CHD_CHEM_RSD (
      CHD_CHEM_RSD_GNAME,
      CHD_CHEM_RSD_PNAME,
      CHD_CHEM_RSD_CNAME,
      CHD_CHEM_RSD_IPOINT,
      CHD_CHEM_RSD_REC_T,
      CHD_CHEM_RSD_ACT_RATE,
      CHD_CHEM_RSD_ID
      ) VALUES (
      P_CHD_CHEM_RSD_GNAME,
      P_CHD_CHEM_RSD_PNAME,      
      P_CHD_CHEM_RSD_CNAME,
      P_CHD_CHEM_RSD_IPOINT,
      P_CHD_CHEM_RSD_REC_T,
      P_CHD_CHEM_RSD_ACT_RATE,
      V_NEW_ID        
      );

      V_EVT_LOG:=SP_INSERT_TBL_EVENT_LOG(P_USER,'TBL_CHD_COUP_CORR','INSERT SUCCESS: #' || V_NEW_ID);
   END IF;

  COMMIT;

   RETURN V_NEW_ID;
EXCEPTION
 WHEN OTHERS THEN
    ROLLBACK;
    IF (P_OPERATION = 'INSERT') THEN    
      V_EVT_LOG:=SP_INSERT_TBL_EVENT_LOG(P_USER,'TBL_CHD_COUP_CORR','INSERT FAIL: #' || V_NEW_ID || '; ERR: ' || SQLCODE || '-' || SQLERRM);
    ELSE
      V_EVT_LOG:=SP_INSERT_TBL_EVENT_LOG(P_USER,'TBL_CHD_COUP_CORR','UPDATE FAIL: #' || P_CHD_HDR_ID || '; ERR: ' || SQLCODE || '-' || SQLERRM);
    END IF;
    RETURN -1;
END SP_UPDATE_CH_CR;

/
--------------------------------------------------------
--  DDL for Function SP_UPDATE_CH_CTR
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE FUNCTION "IMSA"."SP_UPDATE_CH_CTR" 
(
--Param for Header
  P_MODULE IN  VARCHAR2 DEFAULT 'FS'
  , P_CHD_HDR_ID IN NUMBER DEFAULT NULL
  , P_CHD_HDR_ASSET_ID IN NUMBER DEFAULT NULL
  , P_CHD_HDR_SAMP_DATE IN DATE DEFAULT NULL
  , P_CHD_HDR_ANA_VEND IN NUMBER DEFAULT NULL
  , P_CHD_HDR_STATUS IN NUMBER DEFAULT NULL
  , P_CHD_HDR_COMMENTS IN VARCHAR2 DEFAULT NULL
  , P_DAT_TYPE IN NUMBER DEFAULT 1
  , P_COLOR_MODE IN VARCHAR2 DEFAULT 'ACTION_COLOR'
  , P_OPERATION IN VARCHAR2 DEFAULT NULL
  , P_USER IN VARCHAR2 DEFAULT 'IMSA ADMIN'

--param for Details
  , P_CHD_CHEM_TREAT_GNAME IN NUMBER DEFAULT NULL
  , P_CHD_CHEM_TREAT_PNAME IN VARCHAR2 DEFAULT NULL
  , P_CHD_CHEM_TREAT_CNAME IN VARCHAR2 DEFAULT NULL
  , P_CHD_CHEM_TREAT_IPOINT IN VARCHAR2 DEFAULT NULL
  , P_CHD_CHEM_TREAT_REC_CON IN NUMBER DEFAULT NULL
  , P_CHD_CHEM_TREAT_BASIS  IN NUMBER DEFAULT NULL
  , P_CHD_CHEM_TREAT_REC_T IN NUMBER DEFAULT NULL
  , P_CHD_CHEM_TREAT_ACT_RATE IN NUMBER DEFAULT NULL
)
 RETURN NUMBER AS 
  
  V_EVT_LOG NUMBER;
  V_NEW_ID NUMBER; 
BEGIN

  IF (P_OPERATION = 'UPDATE') THEN   
    V_NEW_ID:=SP_UPDATE_TBL_CHD_HEADER(P_MODULE, 
    P_CHD_HDR_ID, 
    P_CHD_HDR_ASSET_ID, 
    P_CHD_HDR_SAMP_DATE, 
    P_CHD_HDR_ANA_VEND, 
    P_CHD_HDR_STATUS,
    P_CHD_HDR_COMMENTS,
    P_DAT_TYPE,
    P_COLOR_MODE,
    P_USER);    

    UPDATE TBL_CHD_CHEM_TREAT SET
      CHD_CHEM_TREAT_GNAME=P_CHD_CHEM_TREAT_GNAME
      ,CHD_CHEM_TREAT_PNAME=P_CHD_CHEM_TREAT_PNAME
      ,CHD_CHEM_TREAT_CNAME=P_CHD_CHEM_TREAT_CNAME
      ,CHD_CHEM_TREAT_IPOINT=P_CHD_CHEM_TREAT_IPOINT
      ,CHD_CHEM_TREAT_REC_CON=P_CHD_CHEM_TREAT_REC_CON
      ,CHD_CHEM_TREAT_REC_CON_BASIS=P_CHD_CHEM_TREAT_BASIS
      ,CHD_CHEM_TREAT_REC_T=P_CHD_CHEM_TREAT_REC_T
      ,CHD_CHEM_TREAT_ACT_RATE=P_CHD_CHEM_TREAT_ACT_RATE
    WHERE CHD_CHEM_TREAT_ID=P_CHD_HDR_ID;
    V_EVT_LOG:=SP_INSERT_TBL_EVENT_LOG(P_USER,'TBL_CHD_CHEM_TREAT','UPDATE SUCCESS: #' || P_CHD_HDR_ID);
  END IF;

  IF (P_OPERATION = 'INSERT') THEN 
    V_NEW_ID:=SP_INSERT_TBL_CHD_HEADER(P_MODULE, 
    P_CHD_HDR_ID, 
    P_CHD_HDR_ASSET_ID, 
    P_CHD_HDR_SAMP_DATE, 
    P_CHD_HDR_ANA_VEND, 
    P_CHD_HDR_STATUS,
    P_CHD_HDR_COMMENTS,
    P_DAT_TYPE,
    P_COLOR_MODE,
    P_USER);     
    INSERT INTO  TBL_CHD_CHEM_TREAT (
      CHD_CHEM_TREAT_GNAME
      ,CHD_CHEM_TREAT_PNAME
      ,CHD_CHEM_TREAT_CNAME
      ,CHD_CHEM_TREAT_IPOINT
      ,CHD_CHEM_TREAT_REC_CON
      ,CHD_CHEM_TREAT_REC_CON_BASIS
      ,CHD_CHEM_TREAT_REC_T
      ,CHD_CHEM_TREAT_ACT_RATE
      ,CHD_CHEM_TREAT_ID
      ) VALUES (
      P_CHD_CHEM_TREAT_GNAME,
      P_CHD_CHEM_TREAT_PNAME,
      P_CHD_CHEM_TREAT_CNAME,
      P_CHD_CHEM_TREAT_IPOINT,
      P_CHD_CHEM_TREAT_REC_CON,
      P_CHD_CHEM_TREAT_BASIS,
      P_CHD_CHEM_TREAT_REC_T,
      P_CHD_CHEM_TREAT_ACT_RATE,
      V_NEW_ID        
      );
       V_EVT_LOG:=SP_INSERT_TBL_EVENT_LOG(P_USER,'TBL_CHD_CHEM_TREAT','INSERT SUCCESS: #' || V_NEW_ID);
  END IF;

  COMMIT;

  RETURN V_NEW_ID;
EXCEPTION
 WHEN OTHERS THEN
    ROLLBACK;
    IF (P_OPERATION = 'INSERT') THEN    
      V_EVT_LOG:=SP_INSERT_TBL_EVENT_LOG(P_USER,'TBL_CHD_CHEM_TREAT','INSERT FAIL: #' || V_NEW_ID || '; ERR: ' || SQLCODE || '-' || SQLERRM);
    ELSE
      V_EVT_LOG:=SP_INSERT_TBL_EVENT_LOG(P_USER,'TBL_CHD_CHEM_TREAT','UPDATE FAIL: #' || P_CHD_HDR_ID || '; ERR: ' || SQLCODE || '-' || SQLERRM);
    END IF;
    RETURN -1;
END SP_UPDATE_CH_CTR;

/
--------------------------------------------------------
--  DDL for Function SP_UPDATE_CH_FS
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE FUNCTION "IMSA"."SP_UPDATE_CH_FS" 
(
--Param for Header
  P_MODULE IN  VARCHAR2 DEFAULT 'FS'
  , P_CHD_HDR_ID IN NUMBER DEFAULT NULL
  , P_CHD_HDR_ASSET_ID IN NUMBER DEFAULT NULL
  , P_CHD_HDR_SAMP_DATE IN DATE DEFAULT NULL
  , P_CHD_HDR_ANA_VEND IN NUMBER DEFAULT NULL
  , P_CHD_HDR_STATUS IN NUMBER DEFAULT NULL
  , P_CHD_HDR_COMMENTS IN VARCHAR2 DEFAULT NULL
  , P_DAT_TYPE IN NUMBER DEFAULT 1
  , P_COLOR_MODE IN VARCHAR2 DEFAULT 'ACTION_COLOR'
  , P_OPERATION IN VARCHAR2 DEFAULT NULL
  , P_USER IN VARCHAR2 DEFAULT 'IMSA ADMIN'
)
 RETURN NUMBER AS 
  
  V_EVT_LOG NUMBER;
  V_NEW_ID NUMBER; 
BEGIN
  IF (P_OPERATION = 'UPDATE') THEN 
    V_NEW_ID:=SP_UPDATE_TBL_CHD_HEADER(P_MODULE, 
    P_CHD_HDR_ID, 
    P_CHD_HDR_ASSET_ID, 
    P_CHD_HDR_SAMP_DATE, 
    P_CHD_HDR_ANA_VEND, 
    P_CHD_HDR_STATUS,
    P_CHD_HDR_COMMENTS,
    P_DAT_TYPE);    
  END IF;

  IF (P_OPERATION = 'INSERT') THEN 
    V_NEW_ID:=SP_INSERT_TBL_CHD_HEADER(P_MODULE, 
    P_CHD_HDR_ID, 
    P_CHD_HDR_ASSET_ID, 
    P_CHD_HDR_SAMP_DATE, 
    P_CHD_HDR_ANA_VEND, 
    P_CHD_HDR_STATUS,
    P_CHD_HDR_COMMENTS,
    P_DAT_TYPE, 
    P_COLOR_MODE,
    P_USER);
  END IF;

  COMMIT;

  RETURN V_NEW_ID;
EXCEPTION
 WHEN OTHERS THEN
    ROLLBACK;
    RETURN -1;
END SP_UPDATE_CH_FS;

/
--------------------------------------------------------
--  DDL for Function SP_UPDATE_CH_GA
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE FUNCTION "IMSA"."SP_UPDATE_CH_GA" 
(
--Param for Header
  P_MODULE IN  VARCHAR2 DEFAULT 'FS'
  , P_CHD_HDR_ID IN NUMBER DEFAULT NULL
  , P_CHD_HDR_ASSET_ID IN NUMBER DEFAULT NULL
  , P_CHD_HDR_SAMP_DATE IN DATE DEFAULT NULL
  , P_CHD_HDR_ANA_VEND IN NUMBER DEFAULT NULL
  , P_CHD_HDR_STATUS IN NUMBER DEFAULT NULL
  , P_CHD_HDR_COMMENTS IN VARCHAR2 DEFAULT NULL
  , P_DAT_TYPE IN NUMBER DEFAULT 1
  , P_COLOR_MODE IN VARCHAR2 DEFAULT 'ACTION_COLOR'
  , P_OPERATION IN VARCHAR2 DEFAULT NULL
  , P_USER IN VARCHAR2 DEFAULT 'IMSA ADMIN'
  --param for Details
  
  , P_CHD_GLY_TSS IN NUMBER DEFAULT NULL
  , P_CHD_GLY_IRON IN NUMBER DEFAULT NULL
  , P_CHD_GLY_FLASH IN NUMBER DEFAULT NULL
  , P_CHD_GLY_THC IN NUMBER DEFAULT NULL
  , P_CHD_GLY_CALCIUM IN NUMBER DEFAULT NULL
  , P_CHD_GLY_MEG IN NUMBER DEFAULT NULL
  , P_CHD_GLY_TDS IN NUMBER DEFAULT NULL
  , P_CHD_GLY_POTASSIUM IN NUMBER DEFAULT NULL
  , P_CHD_GLY_DEG IN NUMBER DEFAULT NULL
  , P_CHD_GLY_PH IN NUMBER DEFAULT NULL
  , P_CHD_GLY_MAGNESIUM IN NUMBER DEFAULT NULL
  , P_CHD_GLY_TEG IN NUMBER DEFAULT NULL
  , P_CHD_GLY_FOAMING IN NUMBER DEFAULT NULL
  , P_CHD_GLY_SODIUM IN NUMBER DEFAULT NULL
  , P_CHD_GLY_TTEG IN NUMBER DEFAULT NULL
  , P_CHD_GLY_FOAMING_TIME IN NUMBER DEFAULT NULL
  , P_CHD_GLY_CHLORIDE IN NUMBER DEFAULT NULL
  , P_CHD_GLY_OTHER IN NUMBER DEFAULT NULL
  , P_CHD_GLY_H2O IN NUMBER DEFAULT NULL
  , P_CHD_GLY_SPGR IN NUMBER DEFAULT NULL
  , P_CHD_GLY_RESID IN NUMBER DEFAULT NULL
  , P_CHD_GLY_APP IN VARCHAR2 DEFAULT NULL
)
   RETURN NUMBER AS 
  
  V_EVT_LOG NUMBER;
  V_NEW_ID NUMBER; 
BEGIN

  IF (P_OPERATION = 'UPDATE') THEN   
    V_NEW_ID:=SP_UPDATE_TBL_CHD_HEADER(P_MODULE, 
    P_CHD_HDR_ID, 
    P_CHD_HDR_ASSET_ID, 
    P_CHD_HDR_SAMP_DATE, 
    P_CHD_HDR_ANA_VEND, 
    P_CHD_HDR_STATUS,
    P_CHD_HDR_COMMENTS,
    P_DAT_TYPE,
    P_COLOR_MODE,
    P_USER);    

    UPDATE TBL_CHD_GLY SET
    CHD_GLY_TSS = P_CHD_GLY_TSS,
    CHD_GLY_IRON  = P_CHD_GLY_IRON,
    CHD_GLY_FLASH  = P_CHD_GLY_FLASH,
    CHD_GLY_THC  = P_CHD_GLY_THC,
    CHD_GLY_CALCIUM  = P_CHD_GLY_CALCIUM,
    CHD_GLY_MEG  = P_CHD_GLY_MEG,
    CHD_GLY_TDS  = P_CHD_GLY_TDS,
    CHD_GLY_POTASSIUM  = P_CHD_GLY_POTASSIUM,
    CHD_GLY_DEG  = P_CHD_GLY_DEG,
    CHD_GLY_PH  = P_CHD_GLY_PH,
    CHD_GLY_MAGNESIUM  = P_CHD_GLY_MAGNESIUM,
    CHD_GLY_TEG  = P_CHD_GLY_TEG,
    CHD_GLY_FOAMING  = P_CHD_GLY_FOAMING,
    CHD_GLY_SODIUM  = P_CHD_GLY_SODIUM,
    CHD_GLY_TTEG  = P_CHD_GLY_TTEG,
    CHD_GLY_FOAMING_TIME  = P_CHD_GLY_FOAMING_TIME,
    CHD_GLY_CHLORIDE  = P_CHD_GLY_CHLORIDE,
    CHD_GLY_OTHER  = P_CHD_GLY_OTHER,
    CHD_GLY_H2O  = P_CHD_GLY_H2O,
    CHD_GLY_SPGR  = P_CHD_GLY_SPGR,
    CHD_GLY_RESID  = P_CHD_GLY_RESID,
    CHD_GLY_APP = P_CHD_GLY_APP
    WHERE CHD_GLY_ID=P_CHD_HDR_ID;
    V_EVT_LOG:=SP_INSERT_TBL_EVENT_LOG(P_USER,'TBL_CHD_GLY','UPDATE SUCCESS: #' || P_CHD_HDR_ID);
  END IF;

  IF (P_OPERATION = 'INSERT') THEN 
    V_NEW_ID:=SP_INSERT_TBL_CHD_HEADER(P_MODULE, 
    P_CHD_HDR_ID, 
    P_CHD_HDR_ASSET_ID, 
    P_CHD_HDR_SAMP_DATE, 
    P_CHD_HDR_ANA_VEND, 
    P_CHD_HDR_STATUS,
    P_CHD_HDR_COMMENTS,
    P_DAT_TYPE,
    P_COLOR_MODE,
    P_USER);   

    INSERT INTO  TBL_CHD_GLY (      
      CHD_GLY_TSS,
      CHD_GLY_IRON,
      CHD_GLY_FLASH,
      CHD_GLY_THC,
      CHD_GLY_CALCIUM,
      CHD_GLY_MEG,
      CHD_GLY_TDS,
      CHD_GLY_POTASSIUM,
      CHD_GLY_DEG,
      CHD_GLY_PH,
      CHD_GLY_MAGNESIUM,
      CHD_GLY_TEG,
      CHD_GLY_FOAMING,
      CHD_GLY_SODIUM,
      CHD_GLY_TTEG,
      CHD_GLY_FOAMING_TIME,
      CHD_GLY_CHLORIDE,
      CHD_GLY_OTHER,
      CHD_GLY_H2O,
      CHD_GLY_SPGR,
      CHD_GLY_RESID,
      CHD_GLY_APP,  
      CHD_GLY_ID
    ) VALUES (      
      P_CHD_GLY_TSS,
      P_CHD_GLY_IRON,
      P_CHD_GLY_FLASH,
      P_CHD_GLY_THC,
      P_CHD_GLY_CALCIUM,
      P_CHD_GLY_MEG,
      P_CHD_GLY_TDS,
      P_CHD_GLY_POTASSIUM,
      P_CHD_GLY_DEG,
      P_CHD_GLY_PH,
      P_CHD_GLY_MAGNESIUM,
      P_CHD_GLY_TEG,
      P_CHD_GLY_FOAMING,
      P_CHD_GLY_SODIUM,
      P_CHD_GLY_TTEG,
      P_CHD_GLY_FOAMING_TIME,
      P_CHD_GLY_CHLORIDE,
      P_CHD_GLY_OTHER,
      P_CHD_GLY_H2O,
      P_CHD_GLY_SPGR,
      P_CHD_GLY_RESID,
      P_CHD_GLY_APP,
      V_NEW_ID        
      );
      V_EVT_LOG:=SP_INSERT_TBL_EVENT_LOG(P_USER,'TBL_CHD_GLY','INSERT SUCCESS: #' || V_NEW_ID);
  END IF;

  COMMIT;

  RETURN V_NEW_ID;
EXCEPTION
 WHEN OTHERS THEN
    ROLLBACK;
   IF (P_OPERATION = 'INSERT') THEN    
      V_EVT_LOG:=SP_INSERT_TBL_EVENT_LOG(P_USER,'TBL_CHD_GLY','INSERT FAIL: #' || V_NEW_ID || '; ERR: ' || SQLCODE || '-' || SQLERRM);
    ELSE
      V_EVT_LOG:=SP_INSERT_TBL_EVENT_LOG(P_USER,'TBL_CHD_GLY','UPDATE FAIL: #' || P_CHD_HDR_ID || '; ERR: ' || SQLCODE || '-' || SQLERRM);
    END IF;    
    RETURN -1;
END SP_UPDATE_CH_GA;

/
--------------------------------------------------------
--  DDL for Function SP_UPDATE_CH_HC
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE FUNCTION "IMSA"."SP_UPDATE_CH_HC" 
(
--Param for Header
  P_MODULE IN  VARCHAR2 DEFAULT 'FS'
  , P_CHD_HDR_ID IN NUMBER DEFAULT NULL
  , P_CHD_HDR_ASSET_ID IN NUMBER DEFAULT NULL
  , P_CHD_HDR_SAMP_DATE IN DATE DEFAULT NULL
  , P_CHD_HDR_ANA_VEND IN NUMBER DEFAULT NULL
  , P_CHD_HDR_STATUS IN NUMBER DEFAULT NULL
  , P_CHD_HDR_COMMENTS IN VARCHAR2 DEFAULT NULL
   ,P_DAT_TYPE IN NUMBER DEFAULT 1
  , P_COLOR_MODE IN VARCHAR2 DEFAULT 'ACTION_COLOR'
  , P_OPERATION IN VARCHAR2 DEFAULT NULL
  , P_USER IN VARCHAR2 DEFAULT 'IMSA ADMIN'
--param for Details
  , P_CHD_GAP_CO2 IN NUMBER DEFAULT NULL
  , P_CHD_GAP_H2S IN NUMBER DEFAULT NULL
)
   RETURN NUMBER AS 
  
  V_EVT_LOG NUMBER;
  V_NEW_ID NUMBER; 
BEGIN

  IF (P_OPERATION = 'UPDATE') THEN   
    V_NEW_ID:=SP_UPDATE_TBL_CHD_HEADER(P_MODULE, 
    P_CHD_HDR_ID, 
    P_CHD_HDR_ASSET_ID, 
    P_CHD_HDR_SAMP_DATE, 
    P_CHD_HDR_ANA_VEND, 
    P_CHD_HDR_STATUS,
    P_CHD_HDR_COMMENTS,
    P_DAT_TYPE,
    P_COLOR_MODE,
    P_USER);    

    UPDATE TBL_CHD_GAP SET
      CHD_GAP_CO2=P_CHD_GAP_CO2,
      CHD_GAP_H2S=P_CHD_GAP_H2S
    WHERE CHD_GAP_ID=P_CHD_HDR_ID;

     V_EVT_LOG:=SP_INSERT_TBL_EVENT_LOG(P_USER,'TBL_CHD_GAP','UPDATE SUCCESS: #' || P_CHD_HDR_ID);
 END IF;

  IF (P_OPERATION = 'INSERT') THEN 
    V_NEW_ID:=SP_INSERT_TBL_CHD_HEADER(P_MODULE, 
    P_CHD_HDR_ID, 
    P_CHD_HDR_ASSET_ID, 
    P_CHD_HDR_SAMP_DATE, 
    P_CHD_HDR_ANA_VEND, 
    P_CHD_HDR_STATUS,
    P_CHD_HDR_COMMENTS,
    P_DAT_TYPE,
    P_COLOR_MODE,
    P_USER);   
    INSERT INTO TBL_CHD_GAP (
      CHD_GAP_CO2,
      CHD_GAP_H2S,
      CHD_GAP_ID
      ) VALUES (
      P_CHD_GAP_CO2,
      P_CHD_GAP_H2S,     
      V_NEW_ID        
      );
    V_EVT_LOG:=SP_INSERT_TBL_EVENT_LOG(P_USER,'TBL_CHD_GAP','INSERT SUCCESS: #' || V_NEW_ID);    
  END IF;

  COMMIT;
  RETURN V_NEW_ID;
EXCEPTION
 WHEN OTHERS THEN
    ROLLBACK;
    IF (P_OPERATION = 'INSERT') THEN    
      V_EVT_LOG:=SP_INSERT_TBL_EVENT_LOG(P_USER,'TBL_CHD_GAP','INSERT FAIL: #' || V_NEW_ID || '; ERR: ' || SQLCODE || '-' || SQLERRM);
    ELSE
      V_EVT_LOG:=SP_INSERT_TBL_EVENT_LOG(P_USER,'TBL_CHD_GAP','UPDATE FAIL: #' || P_CHD_HDR_ID || '; ERR: ' || SQLCODE || '-' || SQLERRM);
    END IF;   
    RETURN -1;
END SP_UPDATE_CH_HC;

/
--------------------------------------------------------
--  DDL for Function SP_UPDATE_CH_HFA
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE FUNCTION "IMSA"."SP_UPDATE_CH_HFA" 
(
--Param for Header
  P_MODULE IN  VARCHAR2 DEFAULT 'FS'
  , P_CHD_HDR_ID IN NUMBER DEFAULT NULL
  , P_CHD_HDR_ASSET_ID IN NUMBER DEFAULT NULL
  , P_CHD_HDR_SAMP_DATE IN DATE DEFAULT NULL
  , P_CHD_HDR_ANA_VEND IN NUMBER DEFAULT NULL
  , P_CHD_HDR_STATUS IN NUMBER DEFAULT NULL
  , P_CHD_HDR_COMMENTS IN VARCHAR2 DEFAULT NULL
  ,P_DAT_TYPE IN NUMBER DEFAULT 1
  , P_COLOR_MODE IN VARCHAR2 DEFAULT 'ACTION_COLOR'
  , P_OPERATION IN VARCHAR2 DEFAULT NULL
  , P_USER IN VARCHAR2 DEFAULT 'IMSA ADMIN'
  --param for Details                                
  , P_CHD_HFA_DTAKEN IN DATE DEFAULT NULL
  , P_CHD_HFA_DTESTED IN DATE DEFAULT NULL
  , P_CHD_HFA_DREC IN DATE DEFAULT NULL
  , P_CHD_HFA_DISSUED IN DATE DEFAULT NULL
  , P_CHD_HFA_REP_TO IN VARCHAR2 DEFAULT NULL
  , P_CHD_HFA_EMAIL_FAX IN VARCHAR2 DEFAULT NULL
  , P_CHD_HFA_FNAME IN VARCHAR2 DEFAULT NULL
  , P_CHD_HFA_SOURCE IN VARCHAR2 DEFAULT NULL
  , P_CHD_HFA_INSTSITE IN VARCHAR2 DEFAULT NULL
  , P_CHD_HFA_CHK_FILT IN VARCHAR2 DEFAULT NULL
  , P_CHD_HFA_ELIM_SRC IN VARCHAR2 DEFAULT NULL
  , P_CHD_HFA_SUB_ADD_SAMP IN VARCHAR2 DEFAULT NULL
)
   RETURN NUMBER AS 
  
  V_EVT_LOG NUMBER;
  V_NEW_ID NUMBER; 
BEGIN

  IF (P_OPERATION = 'UPDATE') THEN   
    V_NEW_ID:=SP_UPDATE_TBL_CHD_HEADER(P_MODULE, 
    P_CHD_HDR_ID, 
    P_CHD_HDR_ASSET_ID, 
    P_CHD_HDR_SAMP_DATE, 
    P_CHD_HDR_ANA_VEND, 
    P_CHD_HDR_STATUS,
    P_CHD_HDR_COMMENTS,
    P_DAT_TYPE,
    P_COLOR_MODE,
    P_USER);    
      UPDATE TBL_CHD_HFA SET
      CHD_HFA_DTAKEN = P_CHD_HFA_DTAKEN,
      CHD_HFA_DTESTED = P_CHD_HFA_DTESTED,
      CHD_HFA_DREC = P_CHD_HFA_DREC,
      CHD_HFA_DISSUED = P_CHD_HFA_DISSUED,
      CHD_HFA_REP_TO = P_CHD_HFA_REP_TO,
      CHD_HFA_EMAIL_FAX = P_CHD_HFA_EMAIL_FAX,
      CHD_HFA_FNAME = P_CHD_HFA_FNAME,
      CHD_HFA_SOURCE = P_CHD_HFA_SOURCE,
      CHD_HFA_INSTSITE = P_CHD_HFA_INSTSITE,
      CHD_HFA_CHK_FILT = P_CHD_HFA_CHK_FILT,
      CHD_HFA_ELIM_SRC = P_CHD_HFA_ELIM_SRC,
      CHD_HFA_SUB_ADD_SAMP = P_CHD_HFA_SUB_ADD_SAMP
    WHERE CHD_HFA_ID=P_CHD_HDR_ID;

     V_EVT_LOG:=SP_INSERT_TBL_EVENT_LOG(P_USER,'TBL_CHD_HFA','UPDATE SUCCESS: #' || P_CHD_HDR_ID);
 END IF;

  IF (P_OPERATION = 'INSERT') THEN 
    V_NEW_ID:=SP_INSERT_TBL_CHD_HEADER(P_MODULE, 
    P_CHD_HDR_ID, 
    P_CHD_HDR_ASSET_ID, 
    P_CHD_HDR_SAMP_DATE, 
    P_CHD_HDR_ANA_VEND, 
    P_CHD_HDR_STATUS,
    P_CHD_HDR_COMMENTS,
   P_DAT_TYPE,
    P_COLOR_MODE,
    P_USER);      
    INSERT INTO  TBL_CHD_HFA (
      CHD_HFA_DTAKEN,
      CHD_HFA_DTESTED,
      CHD_HFA_DREC,
      CHD_HFA_DISSUED,
      CHD_HFA_REP_TO,
      CHD_HFA_EMAIL_FAX,
      CHD_HFA_FNAME,
      CHD_HFA_SOURCE,
      CHD_HFA_INSTSITE,
      CHD_HFA_CHK_FILT,
      CHD_HFA_ELIM_SRC,
      CHD_HFA_SUB_ADD_SAMP,
      CHD_HFA_ID
      ) VALUES (
      P_CHD_HFA_DTAKEN,
      P_CHD_HFA_DTESTED,
      P_CHD_HFA_DREC,
      P_CHD_HFA_DISSUED,
      P_CHD_HFA_REP_TO,
      P_CHD_HFA_EMAIL_FAX,
      P_CHD_HFA_FNAME,
      P_CHD_HFA_SOURCE,
      P_CHD_HFA_INSTSITE,
      P_CHD_HFA_CHK_FILT,
      P_CHD_HFA_ELIM_SRC,
      P_CHD_HFA_SUB_ADD_SAMP,
      V_NEW_ID        
      );

    V_EVT_LOG:=SP_INSERT_TBL_EVENT_LOG(P_USER,'TBL_CHD_HFA','INSERT SUCCESS: #' || V_NEW_ID);    
  END IF;
  COMMIT;

  RETURN V_NEW_ID;
EXCEPTION
 WHEN OTHERS THEN
    ROLLBACK;
    IF (P_OPERATION = 'INSERT') THEN    
      V_EVT_LOG:=SP_INSERT_TBL_EVENT_LOG(P_USER,'TBL_CHD_HFA','INSERT FAIL: #' || V_NEW_ID || '; ERR: ' || SQLCODE || '-' || SQLERRM);
    ELSE
      V_EVT_LOG:=SP_INSERT_TBL_EVENT_LOG(P_USER,'TBL_CHD_HFA','UPDATE FAIL: #' || P_CHD_HDR_ID || '; ERR: ' || SQLCODE || '-' || SQLERRM);
    END IF;   
    RETURN -1;
END SP_UPDATE_CH_HFA;

/
--------------------------------------------------------
--  DDL for Function SP_UPDATE_CH_OA
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE FUNCTION "IMSA"."SP_UPDATE_CH_OA" 
(
--Param for Header
  P_MODULE IN  VARCHAR2 DEFAULT 'FS'
  , P_CHD_HDR_ID IN NUMBER DEFAULT NULL
  , P_CHD_HDR_ASSET_ID IN NUMBER DEFAULT NULL
  , P_CHD_HDR_SAMP_DATE IN DATE DEFAULT NULL
  , P_CHD_HDR_ANA_VEND IN NUMBER DEFAULT NULL
  , P_CHD_HDR_STATUS IN NUMBER DEFAULT NULL
  , P_CHD_HDR_COMMENTS IN VARCHAR2 DEFAULT NULL
,P_DAT_TYPE IN NUMBER DEFAULT 1
  , P_COLOR_MODE IN VARCHAR2 DEFAULT 'ACTION_COLOR'
  , P_OPERATION IN VARCHAR2 DEFAULT NULL
  , P_USER IN VARCHAR2 DEFAULT 'IMSA ADMIN'
--param for Details
  , P_CHD_OWA_GRAVITY IN NUMBER DEFAULT NULL
  , P_CHD_OWA_INHIBITOR IN NUMBER DEFAULT NULL
  , P_CHD_OWA_CLOUD_PT IN NUMBER DEFAULT NULL
  , P_CHD_OWA_POUR_PT IN NUMBER DEFAULT NULL
  , P_CHD_OWA_PARAFFIN IN NUMBER DEFAULT NULL         
  , P_CHD_OWA_ASPHALTENE IN NUMBER DEFAULT NULL   
  )
    RETURN NUMBER AS 
  
  V_EVT_LOG NUMBER;
  V_NEW_ID NUMBER; 
BEGIN
  IF (P_OPERATION = 'UPDATE') THEN   
    V_NEW_ID:=SP_UPDATE_TBL_CHD_HEADER(P_MODULE, 
    P_CHD_HDR_ID, 
    P_CHD_HDR_ASSET_ID, 
    P_CHD_HDR_SAMP_DATE, 
    P_CHD_HDR_ANA_VEND, 
    P_CHD_HDR_STATUS,
    P_CHD_HDR_COMMENTS,
   P_DAT_TYPE,
    P_COLOR_MODE,
    P_USER);        
    UPDATE TBL_CHD_OWA SET
      CHD_OWA_GRAVITY = P_CHD_OWA_GRAVITY,
      CHD_OWA_INHIBITOR = P_CHD_OWA_INHIBITOR,
      CHD_OWA_CLOUD_PT = P_CHD_OWA_CLOUD_PT,
      CHD_OWA_POUR_PT = P_CHD_OWA_POUR_PT,
      CHD_OWA_PARAFFIN = P_CHD_OWA_PARAFFIN,
      CHD_OWA_ASPHALTENE = P_CHD_OWA_ASPHALTENE      
    WHERE CHD_OWA_ID=P_CHD_HDR_ID;

    V_EVT_LOG:=SP_INSERT_TBL_EVENT_LOG(P_USER,'TBL_CHD_OWA','UPDATE SUCCESS: #' || P_CHD_HDR_ID);   

  END IF;

  IF (P_OPERATION = 'INSERT') THEN 
    V_NEW_ID:=SP_INSERT_TBL_CHD_HEADER(P_MODULE, 
    P_CHD_HDR_ID, 
    P_CHD_HDR_ASSET_ID, 
    P_CHD_HDR_SAMP_DATE, 
    P_CHD_HDR_ANA_VEND, 
    P_CHD_HDR_STATUS,
    P_CHD_HDR_COMMENTS,
  P_DAT_TYPE,
    P_COLOR_MODE,
    P_USER);      
    INSERT INTO TBL_CHD_OWA (
      CHD_OWA_GRAVITY,
      CHD_OWA_INHIBITOR ,
      CHD_OWA_CLOUD_PT ,
      CHD_OWA_POUR_PT,
      CHD_OWA_PARAFFIN ,
      CHD_OWA_ASPHALTENE,
      CHD_OWA_ID
      ) VALUES (
      P_CHD_OWA_GRAVITY,
      P_CHD_OWA_INHIBITOR ,
      P_CHD_OWA_CLOUD_PT ,
      P_CHD_OWA_POUR_PT,
      P_CHD_OWA_PARAFFIN ,
      P_CHD_OWA_ASPHALTENE, 
      V_NEW_ID        
      );

     V_EVT_LOG:=SP_INSERT_TBL_EVENT_LOG(P_USER,'TBL_CHD_OWA','INSERT SUCCESS: #' || V_NEW_ID);    
 END IF;

  COMMIT;


  RETURN V_NEW_ID;
EXCEPTION
 WHEN OTHERS THEN
    ROLLBACK;
 IF (P_OPERATION = 'INSERT') THEN    
      V_EVT_LOG:=SP_INSERT_TBL_EVENT_LOG(P_USER,'TBL_CHD_OWA','INSERT FAIL: #' || V_NEW_ID || '; ERR: ' || SQLCODE || '-' || SQLERRM);
    ELSE
      V_EVT_LOG:=SP_INSERT_TBL_EVENT_LOG(P_USER,'TBL_CHD_OWA','UPDATE FAIL: #' || P_CHD_HDR_ID || '; ERR: ' || SQLCODE || '-' || SQLERRM);
    END IF;      
    RETURN -1;
END SP_UPDATE_CH_OA;

/
--------------------------------------------------------
--  DDL for Function SP_UPDATE_CH_PWA
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE FUNCTION "IMSA"."SP_UPDATE_CH_PWA" 
(
--Param for Header
  P_MODULE IN  VARCHAR2 DEFAULT 'FS'
  , P_CHD_HDR_ID IN NUMBER DEFAULT NULL
  , P_CHD_HDR_ASSET_ID IN NUMBER DEFAULT NULL
  , P_CHD_HDR_SAMP_DATE IN DATE DEFAULT NULL
  , P_CHD_HDR_ANA_VEND IN NUMBER DEFAULT NULL
  , P_CHD_HDR_STATUS IN NUMBER DEFAULT NULL
  , P_CHD_HDR_COMMENTS IN VARCHAR2 DEFAULT NULL
 ,P_DAT_TYPE IN NUMBER DEFAULT 1
  , P_COLOR_MODE IN VARCHAR2 DEFAULT 'ACTION_COLOR'
  , P_OPERATION IN VARCHAR2 DEFAULT NULL
  , P_USER IN VARCHAR2 DEFAULT 'IMSA ADMIN'
  --param for Details                                                                  
  , P_CHD_PWA_SPGR IN NUMBER DEFAULT NULL
  , P_CHD_PWA_PH IN NUMBER DEFAULT NULL
  , P_CHD_PWA_POTASSIUM IN NUMBER DEFAULT NULL
  , P_CHD_PWA_TEMP IN NUMBER DEFAULT NULL
  , P_CHD_PWA_O2 IN NUMBER DEFAULT NULL
  , P_CHD_PWA_MANGANESE IN NUMBER DEFAULT NULL
  , P_CHD_PWA_HARDNESS IN NUMBER DEFAULT NULL
  , P_CHD_PWA_H2S IN NUMBER DEFAULT NULL
  , P_CHD_PWA_IRONSOLID IN NUMBER DEFAULT NULL
  , P_CHD_PWA_TDS IN NUMBER DEFAULT NULL
  , P_CHD_PWA_SODIUM IN NUMBER DEFAULT NULL
  , P_CHD_PWA_IRONDISS IN NUMBER DEFAULT NULL
  , P_CHD_PWA_ACR IN NUMBER DEFAULT NULL
  , P_CHD_PWA_CALCIUM IN NUMBER DEFAULT NULL
  , P_CHD_PWA_ZINC IN NUMBER DEFAULT NULL
  , P_CHD_PWA_TSS IN NUMBER DEFAULT NULL
  , P_CHD_PWA_MAGNESIUM IN NUMBER DEFAULT NULL
  , P_CHD_PWA_CHLORIDE IN NUMBER DEFAULT NULL
  , P_CHD_PWA_SULFATE IN NUMBER DEFAULT NULL
  , P_CHD_PWA_BARIUM IN NUMBER DEFAULT NULL
  , P_CHD_PWA_CARBONATE IN NUMBER DEFAULT NULL
  , P_CHD_PWA_SCALETEN IN NUMBER DEFAULT NULL
  , P_CHD_PWA_BROMIDE IN NUMBER DEFAULT NULL
  , P_CHD_PWA_BICARB IN NUMBER DEFAULT NULL
  , P_CHD_PWA_RESQTY IN NUMBER DEFAULT NULL
  , P_CHD_PWA_CONQTY IN NUMBER DEFAULT NULL  
  , P_CHD_PWA_TOTL_ALKALI IN NUMBER DEFAULT NULL
  , P_CHD_PWA_CO2 IN NUMBER DEFAULT NULL  
  , P_CHD_PWA_TA IN NUMBER DEFAULT NULL  
  , P_CHD_PWA_TA_NAME IN VARCHAR2 DEFAULT NULL  
  
)
    RETURN NUMBER AS 
  
  V_EVT_LOG NUMBER;
  V_NEW_ID NUMBER; 
BEGIN
  IF (P_OPERATION = 'UPDATE') THEN   
    V_NEW_ID:=SP_UPDATE_TBL_CHD_HEADER(P_MODULE, 
    P_CHD_HDR_ID, 
    P_CHD_HDR_ASSET_ID, 
    P_CHD_HDR_SAMP_DATE, 
    P_CHD_HDR_ANA_VEND, 
    P_CHD_HDR_STATUS,
    P_CHD_HDR_COMMENTS,
  P_DAT_TYPE,
    P_COLOR_MODE,
    P_USER);    

    UPDATE TBL_CHD_PWA SET                                                           
        CHD_PWA_SPGR = P_CHD_PWA_SPGR
      , CHD_PWA_PH = P_CHD_PWA_PH
      , CHD_PWA_POTASSIUM = P_CHD_PWA_POTASSIUM
      , CHD_PWA_TEMP = P_CHD_PWA_TEMP
      , CHD_PWA_O2 = P_CHD_PWA_O2
      , CHD_PWA_MANGANESE = P_CHD_PWA_MANGANESE
      , CHD_PWA_HARDNESS = P_CHD_PWA_HARDNESS
      , CHD_PWA_H2S = P_CHD_PWA_H2S
      , CHD_PWA_IRONSOLID = P_CHD_PWA_IRONSOLID
      , CHD_PWA_TDS = P_CHD_PWA_TDS
      , CHD_PWA_SODIUM = P_CHD_PWA_SODIUM
      , CHD_PWA_IRONDISS = P_CHD_PWA_IRONDISS
      , CHD_PWA_ACR = P_CHD_PWA_ACR
      , CHD_PWA_CALCIUM = P_CHD_PWA_CALCIUM
      , CHD_PWA_ZINC = P_CHD_PWA_ZINC
      , CHD_PWA_TSS = P_CHD_PWA_TSS
      , CHD_PWA_MAGNESIUM = P_CHD_PWA_MAGNESIUM
      , CHD_PWA_CHLORIDE = P_CHD_PWA_CHLORIDE
      , CHD_PWA_SULFATE = P_CHD_PWA_SULFATE
      , CHD_PWA_BARIUM = P_CHD_PWA_BARIUM
      , CHD_PWA_CARBONATE = P_CHD_PWA_CARBONATE
      , CHD_PWA_SCALETEN = P_CHD_PWA_SCALETEN
      , CHD_PWA_BROMIDE = P_CHD_PWA_BROMIDE
      , CHD_PWA_BICARB = P_CHD_PWA_BICARB
      , CHD_PWA_RESQTY = P_CHD_PWA_RESQTY
      , CHD_PWA_CONQTY = P_CHD_PWA_CONQTY 
      , CHD_PWA_TOTL_ALKALI = P_CHD_PWA_TOTL_ALKALI
      , CHD_PWA_CO2 = P_CHD_PWA_CO2 
      , CHD_PWA_TA = P_CHD_PWA_TA
      , CHD_PWA_TA_NAME = P_CHD_PWA_TA_NAME 
    WHERE CHD_PWA_ID=P_CHD_HDR_ID;

     V_EVT_LOG:=SP_INSERT_TBL_EVENT_LOG(P_USER,'TBL_CHD_PWA','UPDATE SUCCESS: #' || P_CHD_HDR_ID);  
     END IF;

  IF (P_OPERATION = 'INSERT') THEN 
    V_NEW_ID:=SP_INSERT_TBL_CHD_HEADER(P_MODULE, 
    P_CHD_HDR_ID, 
    P_CHD_HDR_ASSET_ID, 
    P_CHD_HDR_SAMP_DATE, 
    P_CHD_HDR_ANA_VEND, 
    P_CHD_HDR_STATUS,
    P_CHD_HDR_COMMENTS,
    P_DAT_TYPE,
    P_COLOR_MODE,
    P_USER);    

    INSERT INTO TBL_CHD_PWA (
        CHD_PWA_SPGR
      , CHD_PWA_PH
      , CHD_PWA_POTASSIUM
      , CHD_PWA_TEMP
      , CHD_PWA_O2
      , CHD_PWA_MANGANESE
      , CHD_PWA_HARDNESS
      , CHD_PWA_H2S 
      , CHD_PWA_IRONSOLID 
      , CHD_PWA_TDS 
      , CHD_PWA_SODIUM 
      , CHD_PWA_IRONDISS
      , CHD_PWA_ACR 
      , CHD_PWA_CALCIUM 
      , CHD_PWA_ZINC 
      , CHD_PWA_TSS 
      , CHD_PWA_MAGNESIUM 
      , CHD_PWA_CHLORIDE 
      , CHD_PWA_SULFATE
      , CHD_PWA_BARIUM 
      , CHD_PWA_CARBONATE 
      , CHD_PWA_SCALETEN
      , CHD_PWA_BROMIDE 
      , CHD_PWA_BICARB
      , CHD_PWA_RESQTY
      , CHD_PWA_CONQTY 
      , CHD_PWA_TOTL_ALKALI
      , CHD_PWA_CO2
      , CHD_PWA_TA
      , CHD_PWA_TA_NAME
      , CHD_PWA_ID
      ) VALUES (
        P_CHD_PWA_SPGR
      , P_CHD_PWA_PH
      , P_CHD_PWA_POTASSIUM
      , P_CHD_PWA_TEMP
      , P_CHD_PWA_O2
      , P_CHD_PWA_MANGANESE
      , P_CHD_PWA_HARDNESS
      , P_CHD_PWA_H2S
      , P_CHD_PWA_IRONSOLID
      , P_CHD_PWA_TDS
      , P_CHD_PWA_SODIUM
      , P_CHD_PWA_IRONDISS
      , P_CHD_PWA_ACR
      , P_CHD_PWA_CALCIUM
      , P_CHD_PWA_ZINC
      , P_CHD_PWA_TSS
      , P_CHD_PWA_MAGNESIUM
      , P_CHD_PWA_CHLORIDE
      , P_CHD_PWA_SULFATE
      , P_CHD_PWA_BARIUM
      , P_CHD_PWA_CARBONATE
      , P_CHD_PWA_SCALETEN
      , P_CHD_PWA_BROMIDE
      , P_CHD_PWA_BICARB
      , P_CHD_PWA_RESQTY
      , P_CHD_PWA_CONQTY       
      , P_CHD_PWA_TOTL_ALKALI
      , P_CHD_PWA_CO2 
      , P_CHD_PWA_TA
      , P_CHD_PWA_TA_NAME 
      , V_NEW_ID        
      );

    V_EVT_LOG:=SP_INSERT_TBL_EVENT_LOG(P_USER,'TBL_CHD_PWA','INSERT SUCCESS: #' || V_NEW_ID);  
  END IF;

  COMMIT;



  RETURN V_NEW_ID;
EXCEPTION
 WHEN OTHERS THEN
    ROLLBACK;
    IF (P_OPERATION = 'INSERT') THEN    
      V_EVT_LOG:=SP_INSERT_TBL_EVENT_LOG(P_USER,'TBL_CHD_PWA','INSERT FAIL: #' || V_NEW_ID || '; ERR: ' || SQLCODE || '-' || SQLERRM);
    ELSE
      V_EVT_LOG:=SP_INSERT_TBL_EVENT_LOG(P_USER,'TBL_CHD_PWA','UPDATE FAIL: #' || P_CHD_HDR_ID || '; ERR: ' || SQLCODE || '-' || SQLERRM);
    END IF;       
    RETURN -1;
END SP_UPDATE_CH_PWA;

/
--------------------------------------------------------
--  DDL for Function SP_UPDATE_CH_SA
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE FUNCTION "IMSA"."SP_UPDATE_CH_SA" 
(
--Param for Header
  P_MODULE IN  VARCHAR2 DEFAULT 'FS'
  , P_CHD_HDR_ID IN NUMBER DEFAULT NULL
  , P_CHD_HDR_ASSET_ID IN NUMBER DEFAULT NULL
  , P_CHD_HDR_SAMP_DATE IN DATE DEFAULT NULL
  , P_CHD_HDR_ANA_VEND IN NUMBER DEFAULT NULL
  , P_CHD_HDR_STATUS IN NUMBER DEFAULT NULL
  , P_CHD_HDR_COMMENTS IN VARCHAR2 DEFAULT NULL
  ,P_DAT_TYPE IN NUMBER DEFAULT 1
  , P_COLOR_MODE IN VARCHAR2 DEFAULT 'ACTION_COLOR'
  , P_OPERATION IN VARCHAR2 DEFAULT NULL
  , P_USER IN VARCHAR2 DEFAULT 'IMSA ADMIN'
  --param for Details                                                                  
  , P_CHD_HDR_INT IN NUMBER DEFAULT NULL
  
)
   RETURN NUMBER AS 
  
  V_EVT_LOG NUMBER;
  V_NEW_ID NUMBER; 
  V_SUB_MODULE NUMBER;
BEGIN

  IF (P_OPERATION = 'UPDATE') THEN      
    UPDATE TBL_CHD_HEADER SET
      CHD_HDR_ASSET_ID=P_CHD_HDR_ASSET_ID
      , CHD_HDR_SAMP_DATE=P_CHD_HDR_SAMP_DATE
      , CHD_HDR_ANA_VEND=P_CHD_HDR_ANA_VEND
      , CHD_HDR_STATUS=P_CHD_HDR_STATUS
      , CHD_HDR_COMMENTS=P_CHD_HDR_COMMENTS
      , CHD_HDR_INT=P_CHD_HDR_INT

    WHERE CHD_HDR_ID=P_CHD_HDR_ID;        
   V_EVT_LOG:=SP_INSERT_TBL_EVENT_LOG(P_USER,'TBL_CHD_HEADER','UPDATE SUCCESS: #' || P_CHD_HDR_ID);

  END IF;

  IF (P_OPERATION = 'INSERT') THEN 
    V_SUB_MODULE:= SP_CH_SUB_MOD_NO(P_MODULE);

    V_NEW_ID:=SP_NEW_TABLE_PK_NO('TBL_CHD_HEADER', 'CHD_HDR_ID');

     INSERT INTO  TBL_CHD_HEADER (
        CHD_HDR_ID,
        CHD_HDR_ASSET_ID,
        CHD_HDR_SAMP_DATE,
        CHD_HDR_ANA_VEND,
        CHD_HDR_STATUS,
        CHD_HDR_COMMENTS,
        CHD_HDR_TYPE,
        CHD_HDR_INT
     ) VALUES (
        V_NEW_ID,
        P_CHD_HDR_ASSET_ID,
        P_CHD_HDR_SAMP_DATE,
        P_CHD_HDR_ANA_VEND,
        P_CHD_HDR_STATUS,
        P_CHD_HDR_COMMENTS,
        V_SUB_MODULE,
        P_CHD_HDR_INT
     );

 V_EVT_LOG:=SP_INSERT_TBL_EVENT_LOG(P_USER,'TBL_CHD_HEADER','INSERT SUCCESS: #' || V_NEW_ID);    
  END IF;

  COMMIT;



  RETURN V_NEW_ID;
EXCEPTION
 WHEN OTHERS THEN
    ROLLBACK;
IF (P_OPERATION = 'INSERT') THEN    
      V_EVT_LOG:=SP_INSERT_TBL_EVENT_LOG(P_USER,'TBL_CHD_HEADER','INSERT FAIL: #' || V_NEW_ID || '; ERR: ' || SQLCODE || '-' || SQLERRM);
    ELSE
      V_EVT_LOG:=SP_INSERT_TBL_EVENT_LOG(P_USER,'TBL_CHD_HEADER','UPDATE FAIL: #' || P_CHD_HDR_ID || '; ERR: ' || SQLCODE || '-' || SQLERRM);
    END IF;     
    RETURN -1;
END SP_UPDATE_CH_SA;

/
--------------------------------------------------------
--  DDL for Function SP_UPDATE_CH_SC
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE FUNCTION "IMSA"."SP_UPDATE_CH_SC" 
(
--Param for Header
  P_MODULE IN  VARCHAR2 DEFAULT 'FS'
  , P_CHD_HDR_ID IN NUMBER DEFAULT NULL
  , P_CHD_HDR_ASSET_ID IN NUMBER DEFAULT NULL
  , P_CHD_HDR_SAMP_DATE IN DATE DEFAULT NULL
  , P_CHD_HDR_ANA_VEND IN NUMBER DEFAULT NULL
  , P_CHD_HDR_STATUS IN NUMBER DEFAULT NULL
  , P_CHD_HDR_COMMENTS IN VARCHAR2 DEFAULT NULL
  , P_DAT_TYPE IN NUMBER DEFAULT 1
  , P_COLOR_MODE IN VARCHAR2 DEFAULT 'ACTION_COLOR'
  , P_OPERATION IN VARCHAR2 DEFAULT NULL
  , P_USER IN VARCHAR2 DEFAULT 'IMSA ADMIN'
--param for Details
    , P_CHD_COUP_SC_DT_INST IN DATE DEFAULT NULL
    , P_CHD_COUP_SC_DT_REM IN DATE DEFAULT NULL
    , P_CHD_COUP_SC_DAYS_EXP IN NUMBER DEFAULT NULL
    , P_CHD_COUP_SC_WTGN IN NUMBER DEFAULT NULL
    , P_CHD_COUP_SC_WTGN_DY IN NUMBER DEFAULT NULL
)
  RETURN NUMBER AS 
  
  V_EVT_LOG NUMBER;
  V_NEW_ID NUMBER; 
BEGIN
  IF (P_OPERATION = 'UPDATE') THEN   
    V_NEW_ID:=SP_UPDATE_TBL_CHD_HEADER(P_MODULE, 
    P_CHD_HDR_ID, 
    P_CHD_HDR_ASSET_ID, 
    P_CHD_HDR_SAMP_DATE, 
    P_CHD_HDR_ANA_VEND, 
    P_CHD_HDR_STATUS,
    P_CHD_HDR_COMMENTS,
    P_DAT_TYPE,
    P_COLOR_MODE,
    P_USER);    

    UPDATE TBL_CHD_COUP_SCALE SET
      CHD_COUP_SC_DT_INST = P_CHD_COUP_SC_DT_INST,
      CHD_COUP_SC_DT_REM = P_CHD_COUP_SC_DT_REM,
      CHD_COUP_SC_DAYS_EXP = P_CHD_COUP_SC_DAYS_EXP,
      CHD_COUP_SC_WTGN = P_CHD_COUP_SC_WTGN,
      CHD_COUP_SC_WTGN_DY = P_CHD_COUP_SC_WTGN_DY
    WHERE CHD_COUP_SC_ID=P_CHD_HDR_ID;

    V_EVT_LOG:=SP_INSERT_TBL_EVENT_LOG(P_USER,'TBL_CHD_COUP_SCALE','UPDATE SUCCESS: #' || P_CHD_HDR_ID);  
    END IF;

  IF (P_OPERATION = 'INSERT') THEN 
    V_NEW_ID:=SP_INSERT_TBL_CHD_HEADER(P_MODULE, 
    P_CHD_HDR_ID, 
    P_CHD_HDR_ASSET_ID, 
    P_CHD_HDR_SAMP_DATE, 
    P_CHD_HDR_ANA_VEND, 
    P_CHD_HDR_STATUS,
    P_CHD_HDR_COMMENTS,
    P_DAT_TYPE,
    P_COLOR_MODE,
    P_USER);    

    INSERT INTO  TBL_CHD_COUP_SCALE (
      CHD_COUP_SC_DT_INST,
      CHD_COUP_SC_DT_REM,
      CHD_COUP_SC_DAYS_EXP,
      CHD_COUP_SC_WTGN,
      CHD_COUP_SC_WTGN_DY,
      CHD_COUP_SC_ID
      ) VALUES (      
      P_CHD_COUP_SC_DT_INST,
      P_CHD_COUP_SC_DT_REM,
      P_CHD_COUP_SC_DAYS_EXP,
      P_CHD_COUP_SC_WTGN,
      P_CHD_COUP_SC_WTGN_DY,
      V_NEW_ID        
      );

     V_EVT_LOG:=SP_INSERT_TBL_EVENT_LOG(P_USER,'TBL_CHD_COUP_SCALE','INSERT SUCCESS: #' || V_NEW_ID);  
 END IF;

  COMMIT;



  RETURN V_NEW_ID;
EXCEPTION
 WHEN OTHERS THEN
    ROLLBACK;
    IF (P_OPERATION = 'INSERT') THEN    
      V_EVT_LOG:=SP_INSERT_TBL_EVENT_LOG(P_USER,'TBL_CHD_COUP_SCALE','INSERT FAIL: #' || V_NEW_ID || '; ERR: ' || SQLCODE || '-' || SQLERRM);
    ELSE
      V_EVT_LOG:=SP_INSERT_TBL_EVENT_LOG(P_USER,'TBL_CHD_COUP_SCALE','UPDATE FAIL: #' || P_CHD_HDR_ID || '; ERR: ' || SQLCODE || '-' || SQLERRM);
    END IF;  
    RETURN -1;
END SP_UPDATE_CH_SC;

/
--------------------------------------------------------
--  DDL for Function SP_UPDATE_CH_WHRU
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE FUNCTION "IMSA"."SP_UPDATE_CH_WHRU" 
(
--Param for Header
  P_MODULE IN  VARCHAR2 DEFAULT 'FS'
  , P_CHD_HDR_ID IN NUMBER DEFAULT NULL
  , P_CHD_HDR_ASSET_ID IN NUMBER DEFAULT NULL
  , P_CHD_HDR_SAMP_DATE IN DATE DEFAULT NULL
  , P_CHD_HDR_ANA_VEND IN NUMBER DEFAULT NULL
  , P_CHD_HDR_STATUS IN NUMBER DEFAULT NULL
  , P_CHD_HDR_COMMENTS IN VARCHAR2 DEFAULT NULL
  , P_DAT_TYPE IN NUMBER DEFAULT 1
  , P_COLOR_MODE IN VARCHAR2 DEFAULT 'ACTION_COLOR'
  , P_OPERATION IN VARCHAR2 DEFAULT NULL
  , P_USER IN VARCHAR2 DEFAULT 'IMSA ADMIN'

  --param for Details
  , P_CHD_WHRU_WHRU_OI IN VARCHAR2 DEFAULT NULL
  , P_CHD_WHRU_WHRU_PH IN NUMBER DEFAULT NULL
  , P_CHD_WHRU_WHRU_NIT IN NUMBER DEFAULT NULL
  , P_CHD_WHRU_COLOR IN VARCHAR2 DEFAULT NULL)
  RETURN NUMBER AS 
  
  V_EVT_LOG NUMBER;
  V_NEW_ID NUMBER; 
BEGIN
  IF (P_OPERATION = 'UPDATE') THEN    
    V_NEW_ID:=SP_UPDATE_TBL_CHD_HEADER(P_MODULE, 
    P_CHD_HDR_ID, 
    P_CHD_HDR_ASSET_ID, 
    P_CHD_HDR_SAMP_DATE, 
    P_CHD_HDR_ANA_VEND, 
    P_CHD_HDR_STATUS,
    P_CHD_HDR_COMMENTS,
    P_DAT_TYPE,
    P_COLOR_MODE,
    P_USER);    

    UPDATE TBL_CHD_WHRU_WHRU SET      
      CHD_WHRU_WHRU_OI = P_CHD_WHRU_WHRU_OI,
      CHD_WHRU_WHRU_PH = P_CHD_WHRU_WHRU_PH,
      CHD_WHRU_WHRU_NIT = P_CHD_WHRU_WHRU_NIT,
      CHD_WHRU_COLOR = P_CHD_WHRU_COLOR
    WHERE CHD_WHRU_WHRU_ID=P_CHD_HDR_ID;

    V_EVT_LOG:=SP_INSERT_TBL_EVENT_LOG(P_USER,'TBL_CHD_WHRU_WHRU','UPDATE SUCCESS: #' || P_CHD_HDR_ID);  
  END IF;

  IF (P_OPERATION = 'INSERT') THEN 
    V_NEW_ID:=SP_INSERT_TBL_CHD_HEADER(P_MODULE, 
    P_CHD_HDR_ID, 
    P_CHD_HDR_ASSET_ID, 
    P_CHD_HDR_SAMP_DATE, 
    P_CHD_HDR_ANA_VEND, 
    P_CHD_HDR_STATUS,
    P_CHD_HDR_COMMENTS,
    P_DAT_TYPE,
    P_COLOR_MODE,
    P_USER);    

    INSERT INTO  TBL_CHD_WHRU_WHRU (
      CHD_WHRU_WHRU_OI,
      CHD_WHRU_WHRU_PH,
      CHD_WHRU_WHRU_NIT,
      CHD_WHRU_WHRU_ID,
      CHD_WHRU_COLOR
    ) VALUES (
      P_CHD_WHRU_WHRU_OI,
      P_CHD_WHRU_WHRU_PH,
      P_CHD_WHRU_WHRU_NIT,
      V_NEW_ID,
      P_CHD_WHRU_COLOR
      );

     V_EVT_LOG:=SP_INSERT_TBL_EVENT_LOG(P_USER,'TBL_CHD_WHRU_WHRU','INSERT SUCCESS: #' || V_NEW_ID);   
  END IF;

  COMMIT;



  RETURN V_NEW_ID;
EXCEPTION
 WHEN OTHERS THEN
    ROLLBACK;
    IF (P_OPERATION = 'INSERT') THEN    
      V_EVT_LOG:=SP_INSERT_TBL_EVENT_LOG(P_USER,'TBL_CHD_WHRU_WHRU','INSERT FAIL: #' || V_NEW_ID || '; ERR: ' || SQLCODE || '-' || SQLERRM);
    ELSE
      V_EVT_LOG:=SP_INSERT_TBL_EVENT_LOG(P_USER,'TBL_CHD_WHRU_WHRU','UPDATE FAIL: #' || P_CHD_HDR_ID || '; ERR: ' || SQLCODE || '-' || SQLERRM);
    END IF;  
    RETURN -1;
END SP_UPDATE_CH_WHRU;

/
--------------------------------------------------------
--  DDL for Function SP_UPDATE_CH_WHRUJ
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE FUNCTION "IMSA"."SP_UPDATE_CH_WHRUJ" 
(
--Param for Header
  P_MODULE IN  VARCHAR2 DEFAULT 'FS'
  , P_CHD_HDR_ID IN NUMBER DEFAULT NULL
  , P_CHD_HDR_ASSET_ID IN NUMBER DEFAULT NULL
  , P_CHD_HDR_SAMP_DATE IN DATE DEFAULT NULL
  , P_CHD_HDR_ANA_VEND IN NUMBER DEFAULT NULL
  , P_CHD_HDR_STATUS IN NUMBER DEFAULT NULL
  , P_CHD_HDR_COMMENTS IN VARCHAR2 DEFAULT NULL
  , P_DAT_TYPE IN NUMBER DEFAULT 1
  , P_COLOR_MODE IN VARCHAR2 DEFAULT 'ACTION_COLOR'
  , P_OPERATION IN VARCHAR2 DEFAULT NULL
  , P_USER IN VARCHAR2 DEFAULT 'IMSA ADMIN'

  --param for Details
  , P_CHD_WHRU_JACKET_OI IN VARCHAR2 DEFAULT NULL
  , P_CHD_WHRU_JACKET_PH IN NUMBER DEFAULT NULL
  , P_CHD_WHRU_JACKET_SUL IN NUMBER DEFAULT NULL
)
  RETURN NUMBER AS 
  
  V_EVT_LOG NUMBER;
  V_NEW_ID NUMBER; 
BEGIN
  IF (P_OPERATION = 'UPDATE') THEN   
    V_NEW_ID:=SP_UPDATE_TBL_CHD_HEADER(P_MODULE, 
    P_CHD_HDR_ID, 
    P_CHD_HDR_ASSET_ID, 
    P_CHD_HDR_SAMP_DATE, 
    P_CHD_HDR_ANA_VEND, 
    P_CHD_HDR_STATUS,
    P_CHD_HDR_COMMENTS,
    P_DAT_TYPE,
    P_COLOR_MODE,
    P_USER);    

    UPDATE TBL_CHD_WHRU_JACKET SET      
      CHD_WHRU_JACKET_OI = P_CHD_WHRU_JACKET_OI,
      CHD_WHRU_JACKET_PH = P_CHD_WHRU_JACKET_PH,
      CHD_WHRU_JACKET_SUL = P_CHD_WHRU_JACKET_SUL
    WHERE CHD_WHRU_JACKET_ID=P_CHD_HDR_ID;

    V_EVT_LOG:=SP_INSERT_TBL_EVENT_LOG(P_USER,'TBL_CHD_WHRU_JACKET','UPDATE SUCCESS: #' || P_CHD_HDR_ID);  
  END IF;

  IF (P_OPERATION = 'INSERT') THEN 
    V_NEW_ID:=SP_INSERT_TBL_CHD_HEADER(P_MODULE, 
    P_CHD_HDR_ID, 
    P_CHD_HDR_ASSET_ID, 
    P_CHD_HDR_SAMP_DATE, 
    P_CHD_HDR_ANA_VEND, 
    P_CHD_HDR_STATUS,
    P_CHD_HDR_COMMENTS,
    P_DAT_TYPE,
    P_COLOR_MODE,
    P_USER);    

    INSERT INTO  TBL_CHD_WHRU_JACKET (
      CHD_WHRU_JACKET_OI,
      CHD_WHRU_JACKET_PH,
      CHD_WHRU_JACKET_SUL,
      CHD_WHRU_JACKET_ID
    ) VALUES (
      P_CHD_WHRU_JACKET_OI,
      P_CHD_WHRU_JACKET_PH,
      P_CHD_WHRU_JACKET_SUL,
      V_NEW_ID        
      );

     V_EVT_LOG:=SP_INSERT_TBL_EVENT_LOG(P_USER,'TBL_CHD_WHRU_JACKET','INSERT SUCCESS: #' || V_NEW_ID);   
  END IF;

  COMMIT;



  RETURN V_NEW_ID;
EXCEPTION
 WHEN OTHERS THEN
    ROLLBACK;
    IF (P_OPERATION = 'INSERT') THEN    
      V_EVT_LOG:=SP_INSERT_TBL_EVENT_LOG(P_USER,'TBL_CHD_WHRU_JACKET','INSERT FAIL: #' || V_NEW_ID || '; ERR: ' || SQLCODE || '-' || SQLERRM);
    ELSE
      V_EVT_LOG:=SP_INSERT_TBL_EVENT_LOG(P_USER,'TBL_CHD_WHRU_JACKET','UPDATE FAIL: #' || P_CHD_HDR_ID || '; ERR: ' || SQLCODE || '-' || SQLERRM);
    END IF;  
    RETURN -1;
END SP_UPDATE_CH_WHRUJ;

/
--------------------------------------------------------
--  DDL for Function SP_UPDATE_CH_WHRUWA
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE FUNCTION "IMSA"."SP_UPDATE_CH_WHRUWA" 
(
--Param for Header
  P_MODULE IN  VARCHAR2 DEFAULT 'FS'
  , P_CHD_HDR_ID IN NUMBER DEFAULT NULL
  , P_CHD_HDR_ASSET_ID IN NUMBER DEFAULT NULL
  , P_CHD_HDR_SAMP_DATE IN DATE DEFAULT NULL
  , P_CHD_HDR_ANA_VEND IN NUMBER DEFAULT NULL
  , P_CHD_HDR_STATUS IN NUMBER DEFAULT NULL
  , P_CHD_HDR_COMMENTS IN VARCHAR2 DEFAULT NULL
  , P_DAT_TYPE IN NUMBER DEFAULT 1
  , P_COLOR_MODE IN VARCHAR2 DEFAULT 'ACTION_COLOR'
  , P_OPERATION IN VARCHAR2 DEFAULT NULL
  , P_USER IN VARCHAR2 DEFAULT 'IMSA ADMIN'

  --param for Details
  , P_CHD_WHRU_WATER_TDS IN NUMBER DEFAULT NULL
  , P_CHD_WHRU_WATER_CALCIUM IN NUMBER DEFAULT NULL
  , P_CHD_WHRU_WATER_TSS IN NUMBER DEFAULT NULL
  , P_CHD_WHRU_WATER_HARDNESS IN NUMBER DEFAULT NULL
  , P_CHD_WHRU_WATER_IRON IN NUMBER DEFAULT NULL
  , P_CHD_WHRU_WATER_SODIUM IN NUMBER DEFAULT NULL
  , P_CHD_WHRU_WATER_SPGR IN NUMBER DEFAULT NULL
  , P_CHD_WHRU_WATER_MAGNESIUM IN NUMBER DEFAULT NULL
  , P_CHD_WHRU_WATER_COND IN NUMBER DEFAULT NULL
  , P_CHD_WHRU_WATER_CHLORIDE IN NUMBER DEFAULT NULL
  , P_CHD_WHRU_WATER_PH IN NUMBER DEFAULT NULL
  , P_CHD_WHRU_WATER_SULFATE IN NUMBER DEFAULT NULL
  , P_CHD_WHRU_WATER_TEMP IN NUMBER DEFAULT NULL
)
  RETURN NUMBER AS 
  
  V_EVT_LOG NUMBER;
  V_NEW_ID NUMBER; 
BEGIN
  IF (P_OPERATION = 'UPDATE') THEN   
    V_NEW_ID:=SP_UPDATE_TBL_CHD_HEADER(P_MODULE, 
    P_CHD_HDR_ID, 
    P_CHD_HDR_ASSET_ID, 
    P_CHD_HDR_SAMP_DATE, 
    P_CHD_HDR_ANA_VEND, 
    P_CHD_HDR_STATUS,
    P_CHD_HDR_COMMENTS,
    P_DAT_TYPE,
    P_COLOR_MODE,
    P_USER);    

    UPDATE TBL_CHD_WHRU_WATER SET      
      CHD_WHRU_WATER_TDS = P_CHD_WHRU_WATER_TDS,
      CHD_WHRU_WATER_CALCIUM = P_CHD_WHRU_WATER_CALCIUM,
      CHD_WHRU_WATER_TSS = P_CHD_WHRU_WATER_TSS,
      CHD_WHRU_WATER_HARDNESS = P_CHD_WHRU_WATER_HARDNESS,
      CHD_WHRU_WATER_IRON = P_CHD_WHRU_WATER_IRON,
      CHD_WHRU_WATER_SODIUM = P_CHD_WHRU_WATER_SODIUM,
      CHD_WHRU_WATER_SPGR = P_CHD_WHRU_WATER_SPGR,
      CHD_WHRU_WATER_MAGNESIUM = P_CHD_WHRU_WATER_MAGNESIUM,
      CHD_WHRU_WATER_COND = P_CHD_WHRU_WATER_COND,
      CHD_WHRU_WATER_CHLORIDE = P_CHD_WHRU_WATER_CHLORIDE,
      CHD_WHRU_WATER_PH = P_CHD_WHRU_WATER_PH,
      CHD_WHRU_WATER_SULFATE = P_CHD_WHRU_WATER_SULFATE,
      CHD_WHRU_WATER_TEMP = P_CHD_WHRU_WATER_TEMP
    WHERE CHD_WHRU_WATER_ID=P_CHD_HDR_ID;

    V_EVT_LOG:=SP_INSERT_TBL_EVENT_LOG(P_USER,'TBL_CHD_WHRU_WATER','UPDATE SUCCESS: #' || P_CHD_HDR_ID);  
  END IF;

  IF (P_OPERATION = 'INSERT') THEN 
    V_NEW_ID:=SP_INSERT_TBL_CHD_HEADER(P_MODULE, 
    P_CHD_HDR_ID, 
    P_CHD_HDR_ASSET_ID, 
    P_CHD_HDR_SAMP_DATE, 
    P_CHD_HDR_ANA_VEND, 
    P_CHD_HDR_STATUS,
    P_CHD_HDR_COMMENTS,
    P_DAT_TYPE,
    P_COLOR_MODE,
    P_USER);    

    INSERT INTO  TBL_CHD_WHRU_WATER (
      CHD_WHRU_WATER_TDS,
      CHD_WHRU_WATER_CALCIUM,
      CHD_WHRU_WATER_TSS,
      CHD_WHRU_WATER_HARDNESS,
      CHD_WHRU_WATER_IRON,
      CHD_WHRU_WATER_SODIUM,
      CHD_WHRU_WATER_SPGR,
      CHD_WHRU_WATER_MAGNESIUM,
      CHD_WHRU_WATER_COND,
      CHD_WHRU_WATER_CHLORIDE,
      CHD_WHRU_WATER_PH,
      CHD_WHRU_WATER_SULFATE,
      CHD_WHRU_WATER_TEMP,
      CHD_WHRU_WATER_ID
      ) VALUES (
      P_CHD_WHRU_WATER_TDS,
      P_CHD_WHRU_WATER_CALCIUM,
      P_CHD_WHRU_WATER_TSS,
      P_CHD_WHRU_WATER_HARDNESS,
      P_CHD_WHRU_WATER_IRON,
      P_CHD_WHRU_WATER_SODIUM,
      P_CHD_WHRU_WATER_SPGR,
      P_CHD_WHRU_WATER_MAGNESIUM,
      P_CHD_WHRU_WATER_COND,
      P_CHD_WHRU_WATER_CHLORIDE,
      P_CHD_WHRU_WATER_PH,
      P_CHD_WHRU_WATER_SULFATE,
      P_CHD_WHRU_WATER_TEMP,
      V_NEW_ID        
      );

     V_EVT_LOG:=SP_INSERT_TBL_EVENT_LOG(P_USER,'TBL_CHD_WHRU_WATER','INSERT SUCCESS: #' || V_NEW_ID);   
  END IF;

  COMMIT;



  RETURN V_NEW_ID;
EXCEPTION
 WHEN OTHERS THEN
    ROLLBACK;
    IF (P_OPERATION = 'INSERT') THEN    
      V_EVT_LOG:=SP_INSERT_TBL_EVENT_LOG(P_USER,'TBL_CHD_WHRU_WATER','INSERT FAIL: #' || V_NEW_ID || '; ERR: ' || SQLCODE || '-' || SQLERRM);
    ELSE
      V_EVT_LOG:=SP_INSERT_TBL_EVENT_LOG(P_USER,'TBL_CHD_WHRU_WATER','UPDATE FAIL: #' || P_CHD_HDR_ID || '; ERR: ' || SQLCODE || '-' || SQLERRM);
    END IF;  
    RETURN -1;
END SP_UPDATE_CH_WHRUWA;

/
--------------------------------------------------------
--  DDL for Function SP_UPDATE_CH_WQA
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE FUNCTION "IMSA"."SP_UPDATE_CH_WQA" 
(
--Param for Header
  P_MODULE IN  VARCHAR2 DEFAULT 'FS'
  , P_CHD_HDR_ID IN NUMBER DEFAULT NULL
  , P_CHD_HDR_ASSET_ID IN NUMBER DEFAULT NULL
  , P_CHD_HDR_SAMP_DATE IN DATE DEFAULT NULL
  , P_CHD_HDR_ANA_VEND IN NUMBER DEFAULT NULL
  , P_CHD_HDR_STATUS IN NUMBER DEFAULT NULL
  , P_CHD_HDR_COMMENTS IN VARCHAR2 DEFAULT NULL
  , P_DAT_TYPE IN NUMBER DEFAULT 1
  , P_COLOR_MODE IN VARCHAR2 DEFAULT 'ACTION_COLOR'
  , P_OPERATION IN VARCHAR2 DEFAULT NULL
  , P_USER IN VARCHAR2 DEFAULT 'IMSA ADMIN'

  --param for Details
  , P_CHD_WQA_OP_INIT IN VARCHAR2 DEFAULT NULL
  , P_CHD_WQA_FIELD_IR IN NUMBER DEFAULT NULL
  , P_CHD_WQA_EST_RATE IN NUMBER DEFAULT NULL
  , P_CHD_WQA_LAB_IR IN NUMBER DEFAULT NULL
  , P_CHD_WQA_O2 IN NUMBER DEFAULT NULL
  , P_CHD_WQA_WSO_IR IN NUMBER DEFAULT NULL
  , P_CHD_WQA_MNLY_IR IN NUMBER DEFAULT NULL
  , P_CHD_WQA_MNLY_LAB IN NUMBER DEFAULT NULL
)
  RETURN NUMBER AS 
  
  V_EVT_LOG NUMBER;
  V_NEW_ID NUMBER; 
BEGIN
  IF (P_OPERATION = 'UPDATE') THEN     
    V_NEW_ID:=SP_UPDATE_TBL_CHD_HEADER(P_MODULE, 
    P_CHD_HDR_ID, 
    P_CHD_HDR_ASSET_ID, 
    P_CHD_HDR_SAMP_DATE, 
    P_CHD_HDR_ANA_VEND, 
    P_CHD_HDR_STATUS,
    P_CHD_HDR_COMMENTS,
    P_DAT_TYPE,
    P_COLOR_MODE,
    P_USER);    

    UPDATE TBL_CHD_WQA SET      
      CHD_WQA_OP_INIT = P_CHD_WQA_OP_INIT,
      CHD_WQA_FIELD_IR = P_CHD_WQA_FIELD_IR,
      CHD_WQA_EST_RATE = P_CHD_WQA_EST_RATE,
      CHD_WQA_LAB_IR= P_CHD_WQA_LAB_IR,
      CHD_WQA_O2= P_CHD_WQA_O2,
      CHD_WQA_WSO_IR= P_CHD_WQA_WSO_IR,
      CHD_WQA_MNLY_IR= P_CHD_WQA_MNLY_IR,
      CHD_WQA_MNLY_LAB= P_CHD_WQA_MNLY_LAB      
    WHERE CHD_WQA_ID=P_CHD_HDR_ID;

    V_EVT_LOG:=SP_INSERT_TBL_EVENT_LOG(P_USER,'TBL_CHD_WQA','UPDATE SUCCESS: #' || P_CHD_HDR_ID);  

  END IF;

  IF (P_OPERATION = 'INSERT') THEN 
    V_NEW_ID:=SP_INSERT_TBL_CHD_HEADER(P_MODULE, 
    P_CHD_HDR_ID, 
    P_CHD_HDR_ASSET_ID, 
    P_CHD_HDR_SAMP_DATE, 
    P_CHD_HDR_ANA_VEND, 
    P_CHD_HDR_STATUS,
    P_CHD_HDR_COMMENTS,
    P_DAT_TYPE,
    P_COLOR_MODE,
    P_USER);    

    INSERT INTO  TBL_CHD_WQA (
      CHD_WQA_OP_INIT,
      CHD_WQA_FIELD_IR,
      CHD_WQA_EST_RATE,
      CHD_WQA_LAB_IR,
      CHD_WQA_O2,
      CHD_WQA_WSO_IR,
      CHD_WQA_MNLY_IR,
      CHD_WQA_MNLY_LAB,      
      CHD_WQA_ID
    ) VALUES (
      P_CHD_WQA_OP_INIT,
      P_CHD_WQA_FIELD_IR,
      P_CHD_WQA_EST_RATE,
      P_CHD_WQA_LAB_IR,
      P_CHD_WQA_O2,
      P_CHD_WQA_WSO_IR,
      P_CHD_WQA_MNLY_IR,
      P_CHD_WQA_MNLY_LAB,
      V_NEW_ID        
      );

     V_EVT_LOG:=SP_INSERT_TBL_EVENT_LOG(P_USER,'TBL_CHD_WQA','INSERT SUCCESS: #' || V_NEW_ID);  
  END IF;

  COMMIT;



  RETURN V_NEW_ID;
EXCEPTION
 WHEN OTHERS THEN
    ROLLBACK;
    IF (P_OPERATION = 'INSERT') THEN    
      V_EVT_LOG:=SP_INSERT_TBL_EVENT_LOG(P_USER,'TBL_CHD_WQA','INSERT FAIL: #' || V_NEW_ID || '; ERR: ' || SQLCODE || '-' || SQLERRM);
    ELSE
      V_EVT_LOG:=SP_INSERT_TBL_EVENT_LOG(P_USER,'TBL_CHD_WQA','UPDATE FAIL: #' || P_CHD_HDR_ID || '; ERR: ' || SQLCODE || '-' || SQLERRM);
    END IF;  
    RETURN -1;
END SP_UPDATE_CH_WQA;

/
--------------------------------------------------------
--  DDL for Function SP_UPDATE_LNK_AN_CA
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE FUNCTION "IMSA"."SP_UPDATE_LNK_AN_CA" 
(
  P_CA_ID IN NUMBER DEFAULT NULL 
, P_AN_ID IN VARCHAR2 DEFAULT NULL 
, P_NEW IN NUMBER DEFAULT NULL
, P_USER IN VARCHAR2 DEFAULT 'IMSA ADMIN'
) 
  RETURN NUMBER AS 
  L_INPUT VARCHAR2(4000):=P_AN_ID;
  L_COUNT BINARY_INTEGER;
  L_ARRAY DBMS_UTILITY.lname_array;
  V_AN_ID NUMBER;
  V_EVT_LOG NUMBER;
BEGIN
  --First delete links based on SVY_HDR_ID
  IF (P_NEW != 1) THEN 
    DELETE FROM LNK_AN_CA WHERE LNK_TAG_B=P_CA_ID;
  END IF;

  IF (P_AN_ID IS NOT NULL) THEN
      --Convert string to array.
      DBMS_UTILITY.COMMA_TO_TABLE
      (list   => REGEXP_REPLACE(L_INPUT,'(^|,)','\1x')
      ,tablen => L_COUNT
      ,tab    => L_ARRAY
      );

      -- Add new related anomalies threats.
      FOR i IN 1 .. L_COUNT LOOP
        V_AN_ID:=SUBSTR(L_ARRAY(i),2);

        INSERT INTO LNK_AN_CA (LNK_TAG_A,LNK_TAG_B) VALUES(V_AN_ID,P_CA_ID);
      END LOOP;
  END IF;      
  COMMIT;

  V_EVT_LOG:=SP_INSERT_TBL_EVENT_LOG(P_USER,'LNK_AN_CA','INSERT SUCCESS: #' || P_CA_ID);
  RETURN P_CA_ID;
EXCEPTION
 WHEN OTHERS THEN
    ROLLBACK;
    V_EVT_LOG:=SP_INSERT_TBL_EVENT_LOG(P_USER,'LNK_AN_CA','INSERT FAIL: #' || P_CA_ID || '; ERR: ' || SQLCODE || '-' || SQLERRM);
    RETURN -1;
END SP_UPDATE_LNK_AN_CA;

/
--------------------------------------------------------
--  DDL for Function SP_UPDATE_LNK_AN_FT
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE FUNCTION "IMSA"."SP_UPDATE_LNK_AN_FT" 
(
  P_AN_ID IN NUMBER DEFAULT NULL 
, P_FT_ID IN VARCHAR2 DEFAULT NULL 
, P_USER IN VARCHAR2 DEFAULT 'IMSA ADMIN'
) 
  RETURN NUMBER AS 
  L_INPUT VARCHAR2(4000):=P_FT_ID;
  L_COUNT BINARY_INTEGER;
  L_ARRAY DBMS_UTILITY.lname_array;
  V_FT_ID NUMBER;
  V_EVT_LOG NUMBER;
BEGIN
  --First delete links based on an_id
  DELETE FROM LNK_AN_FT WHERE LNK_TAG_B=P_AN_ID;

  IF (P_FT_ID IS NOT NULL) THEN
    --Convert string to array.
    DBMS_UTILITY.COMMA_TO_TABLE
    (list   => REGEXP_REPLACE(L_INPUT,'(^|,)','\1x')
    ,tablen => L_COUNT
    ,tab    => L_ARRAY
    );
    DBMS_OUTPUT.PUT_LINE(L_COUNT);

    -- Add new failure threats.
    FOR i IN 1 .. L_COUNT LOOP
      V_FT_ID:=SUBSTR(L_ARRAY(i),2);

      INSERT INTO LNK_AN_FT (LNK_TAG_A,LNK_TAG_B) VALUES(V_FT_ID, P_AN_ID);
    END LOOP;
  END IF;
  COMMIT;

  V_EVT_LOG:=SP_INSERT_TBL_EVENT_LOG(P_USER,'LNK_AN_FT','INSERT SUCCESS: #' || P_AN_ID);
  RETURN P_AN_ID;
EXCEPTION
 WHEN OTHERS THEN
    ROLLBACK;
    V_EVT_LOG:=SP_INSERT_TBL_EVENT_LOG(P_USER,'LNK_AN_FT','INSERT FAIL: #' || P_AN_ID || '; ERR: ' || SQLCODE || '-' || SQLERRM);
    RETURN -1;
END SP_UPDATE_LNK_AN_FT;

/
--------------------------------------------------------
--  DDL for Function SP_UPDATE_LNK_AN_SVY
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE FUNCTION "IMSA"."SP_UPDATE_LNK_AN_SVY" 
(
  P_SVY_HDR_ID IN NUMBER DEFAULT NULL 
, P_REL_ID IN VARCHAR2 DEFAULT NULL 
, P_USER IN VARCHAR2 DEFAULT 'IMSA ADMIN'
) 
  RETURN NUMBER AS 
  L_INPUT VARCHAR2(4000):=P_REL_ID;
  L_COUNT BINARY_INTEGER;
  L_ARRAY DBMS_UTILITY.lname_array;
  V_REL_ID NUMBER;
  V_EVT_LOG NUMBER;
BEGIN
  --First delete links based on SVY_HDR_ID
  DELETE FROM LNK_AN_SVY WHERE LNK_TAG_B=P_SVY_HDR_ID;

  IF (P_REL_ID IS NOT NULL) THEN
      --Convert string to array.
      DBMS_UTILITY.COMMA_TO_TABLE
      (list   => REGEXP_REPLACE(L_INPUT,'(^|,)','\1x')
      ,tablen => L_COUNT
      ,tab    => L_ARRAY
      );

      -- Add new related anomalies threats.
      FOR i IN 1 .. L_COUNT LOOP
        V_REL_ID:=SUBSTR(L_ARRAY(i),2);

        INSERT INTO LNK_AN_SVY (LNK_TAG_A,LNK_TAG_B) VALUES(V_REL_ID,P_SVY_HDR_ID);
      END LOOP;
  END IF;      
  COMMIT;

  V_EVT_LOG:=SP_INSERT_TBL_EVENT_LOG(P_USER,'LNK_AN_SVY','INSERT SUCCESS: #' || P_SVY_HDR_ID);
  RETURN P_SVY_HDR_ID;
EXCEPTION
 WHEN OTHERS THEN
    ROLLBACK;
    V_EVT_LOG:=SP_INSERT_TBL_EVENT_LOG(P_USER,'LNK_AN_SVY','INSERT FAIL: #' || P_SVY_HDR_ID || '; ERR: ' || SQLCODE || '-' || SQLERRM);
    RETURN -1;
END SP_UPDATE_LNK_AN_SVY;

/
--------------------------------------------------------
--  DDL for Function SP_UPDATE_LNK_AN_SVY_M
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE FUNCTION "IMSA"."SP_UPDATE_LNK_AN_SVY_M" 
(
  P_SVY_HDR_ID IN VARCHAR2 DEFAULT NULL 
, P_SVY_AN_ID IN VARCHAR2 DEFAULT NULL 
, P_USER IN VARCHAR2 DEFAULT 'IMSA ADMIN'
) 
  RETURN NUMBER AS 
  L_INPUT_1 VARCHAR2(4000):=P_SVY_HDR_ID;
  L_INPUT_2 VARCHAR2(4000):=P_SVY_AN_ID;  
  L_COUNT_1 BINARY_INTEGER;
  L_COUNT_2 BINARY_INTEGER;
  L_ARRAY_1 DBMS_UTILITY.lname_array;
  L_ARRAY_2 DBMS_UTILITY.lname_array;
  V_SVY_HDR_ID NUMBER;
  V_SVY_AN_ID NUMBER;
  V_COUNT NUMBER:=0;
  V_EVT_LOG NUMBER;
BEGIN
  IF (P_SVY_HDR_ID IS NOT NULL AND P_SVY_AN_ID IS NOT NULL) THEN
      --Convert string to array.
      DBMS_UTILITY.COMMA_TO_TABLE
      (list   => REGEXP_REPLACE(L_INPUT_1,'(^|,)','\1x')
      ,tablen => L_COUNT_1
      ,tab    => L_ARRAY_1
      );

      DBMS_UTILITY.COMMA_TO_TABLE
      (list   => REGEXP_REPLACE(L_INPUT_2,'(^|,)','\1x')
      ,tablen => L_COUNT_2
      ,tab    => L_ARRAY_2
      );

      -- Add new related anomalies 
      FOR i IN 1 .. L_COUNT_1 LOOP
        V_SVY_HDR_ID:=SUBSTR(L_ARRAY_1(i),2);

        FOR j IN 1 .. L_COUNT_2 LOOP
          V_SVY_AN_ID:=SUBSTR(L_ARRAY_2(j),2);

            SELECT COUNT(1) INTO V_COUNT FROM LNK_AN_SVY WHERE (LNK_TAG_A=V_SVY_AN_ID AND LNK_TAG_B=V_SVY_HDR_ID);
            IF V_COUNT > 0 THEN --IF CONTAINS, DELETE THEM TO HAVE FRESH INSERT.
              DELETE FROM LNK_AN_SVY WHERE (LNK_TAG_A=V_SVY_AN_ID AND LNK_TAG_B=V_SVY_HDR_ID);
            END IF;
            V_COUNT:=0;

            INSERT INTO LNK_AN_SVY (LNK_TAG_A,LNK_TAG_B) VALUES(V_SVY_AN_ID,V_SVY_HDR_ID);
        END LOOP;

      END LOOP;
  END IF;      
  COMMIT;

  V_EVT_LOG:=SP_INSERT_TBL_EVENT_LOG(P_USER,'LNK_AN_SVY','INSERT SUCCESS: #' || P_SVY_HDR_ID);
  RETURN 1;
EXCEPTION
 WHEN OTHERS THEN
    ROLLBACK;
    V_EVT_LOG:=SP_INSERT_TBL_EVENT_LOG(P_USER,'LNK_AN_SVY','INSERT FAIL: #' || V_SVY_HDR_ID || '; ERR: ' || SQLCODE || '-' || SQLERRM);
    RETURN -1;
END SP_UPDATE_LNK_AN_SVY_M;

/
--------------------------------------------------------
--  DDL for Function SP_UPDATE_LNK_CHEM_PFD_REF
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE FUNCTION "IMSA"."SP_UPDATE_LNK_CHEM_PFD_REF" 
(
  P_TAG_A IN NUMBER DEFAULT NULL 
, P_TAG_B IN NUMBER DEFAULT NULL 
, P_USER IN VARCHAR2 DEFAULT 'IMSA ADMIN'
) 
  RETURN NUMBER AS 
  V_EVT_LOG NUMBER;
BEGIN

    INSERT INTO LNK_CHEM_PFD_REF (LNK_TAG_A,LNK_TAG_B) VALUES(P_TAG_A,P_TAG_B);

  COMMIT;

  V_EVT_LOG:=SP_INSERT_TBL_EVENT_LOG(P_USER,'LNK_CHEM_PFD_REF','UPDATE SUCCESS: #' || P_TAG_A || ' #' || P_TAG_B);
  RETURN P_TAG_A;
EXCEPTION
 WHEN OTHERS THEN
    ROLLBACK;
    V_EVT_LOG:=SP_INSERT_TBL_EVENT_LOG(P_USER,'LNK_CHEM_PFD_REF','UPDATE FAIL: #' || P_TAG_A || ' #' || P_TAG_B || '; ERR: ' || SQLCODE || '-' || SQLERRM);
    RETURN -1;
END SP_UPDATE_LNK_CHEM_PFD_REF;

/
--------------------------------------------------------
--  DDL for Function SP_UPDATE_LNK_CHEM_REF
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE FUNCTION "IMSA"."SP_UPDATE_LNK_CHEM_REF" 
(
  P_TAG_A IN NUMBER DEFAULT NULL 
, P_TAG_B IN NUMBER DEFAULT NULL 
, P_USER IN VARCHAR2 DEFAULT 'IMSA ADMIN'
) 
  RETURN NUMBER AS 
  V_EVT_LOG NUMBER;
BEGIN

    INSERT INTO LNK_CHEM_REF (LNK_TAG_A,LNK_TAG_B) VALUES(P_TAG_A,P_TAG_B);

  COMMIT;

  V_EVT_LOG:=SP_INSERT_TBL_EVENT_LOG(P_USER,'LNK_CHEM_REF','UPDATE SUCCESS: #' || P_TAG_A || ' #' || P_TAG_B);
  RETURN P_TAG_A;
EXCEPTION
 WHEN OTHERS THEN
    ROLLBACK;
    V_EVT_LOG:=SP_INSERT_TBL_EVENT_LOG(P_USER,'LNK_CHEM_REF','UPDATE FAIL: #' || P_TAG_A || ' #' || P_TAG_B || '; ERR: ' || SQLCODE || '-' || SQLERRM);
    RETURN -1;
END SP_UPDATE_LNK_CHEM_REF;

/
--------------------------------------------------------
--  DDL for Function SP_UPDATE_LNK_CHEM_SR_REF
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE FUNCTION "IMSA"."SP_UPDATE_LNK_CHEM_SR_REF" 
(
  P_TAG_A IN NUMBER DEFAULT NULL 
, P_TAG_B IN NUMBER DEFAULT NULL 
, P_USER IN VARCHAR2 DEFAULT 'IMSA ADMIN'
) 
  RETURN NUMBER AS 
  V_EVT_LOG NUMBER;
BEGIN
    INSERT INTO LNK_CHEM_SR_REF (LNK_TAG_A,LNK_TAG_B) VALUES(P_TAG_A,P_TAG_B);

  COMMIT;

  V_EVT_LOG:=SP_INSERT_TBL_EVENT_LOG(P_USER,'LNK_CHEM_SR_REF','UPDATE SUCCESS: #' || P_TAG_A || ' #' || P_TAG_B);
  RETURN P_TAG_A;
EXCEPTION
 WHEN OTHERS THEN
    ROLLBACK;
    V_EVT_LOG:=SP_INSERT_TBL_EVENT_LOG(P_USER,'LNK_CHEM_SR_REF','UPDATE FAIL: #' || P_TAG_A || ' #' || P_TAG_B || '; ERR: ' || SQLCODE || '-' || SQLERRM);
    RETURN -1;
END SP_UPDATE_LNK_CHEM_SR_REF;

/
--------------------------------------------------------
--  DDL for Function SP_UPDATE_LNK_CHEM_T_REF
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE FUNCTION "IMSA"."SP_UPDATE_LNK_CHEM_T_REF" 
(
  P_TAG_A IN NUMBER DEFAULT NULL 
, P_TAG_B IN NUMBER DEFAULT NULL 
, P_USER IN VARCHAR2 DEFAULT 'IMSA ADMIN'
) 
  RETURN NUMBER AS 
  V_EVT_LOG NUMBER;
BEGIN

    INSERT INTO LNK_CHEM_TREATINGMANUAL_REF (LNK_TAG_A,LNK_TAG_B) VALUES(P_TAG_A,P_TAG_B);

  COMMIT;

  V_EVT_LOG:=SP_INSERT_TBL_EVENT_LOG(P_USER,'LNK_CHEM_TREATINGMANUAL_REF','UPDATE SUCCESS: #' || P_TAG_A || ' #' || P_TAG_B);
  RETURN P_TAG_A;
EXCEPTION
 WHEN OTHERS THEN
    ROLLBACK;
    V_EVT_LOG:=SP_INSERT_TBL_EVENT_LOG(P_USER,'LNK_CHEM_TREATINGMANUAL_REF','UPDATE FAIL: #' || P_TAG_A || ' #' || P_TAG_B || '; ERR: ' || SQLCODE || '-' || SQLERRM);
    RETURN -1;
END SP_UPDATE_LNK_CHEM_T_REF;

/
--------------------------------------------------------
--  DDL for Function SP_UPDATE_LNK_FT_SVY
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE FUNCTION "IMSA"."SP_UPDATE_LNK_FT_SVY" 
(
  P_SVY_HDR_ID IN NUMBER DEFAULT NULL 
, P_FT_ID IN VARCHAR2 DEFAULT NULL 
  ,P_USER IN VARCHAR2 DEFAULT 'IMSA ADMIN'
) 
  RETURN NUMBER AS 
  L_INPUT VARCHAR2(4000):=P_FT_ID;
  L_COUNT BINARY_INTEGER;
  L_ARRAY DBMS_UTILITY.lname_array;
  V_FT_ID NUMBER;
  V_EVT_LOG NUMBER;
BEGIN
  --First delete links based on an_id
  DELETE FROM LNK_FT_SVY WHERE LNK_TAG_B=P_SVY_HDR_ID;

  IF (P_FT_ID IS NOT NULL) THEN
    --Convert string to array.
    DBMS_UTILITY.COMMA_TO_TABLE
    (list   => REGEXP_REPLACE(L_INPUT,'(^|,)','\1x')
    ,tablen => L_COUNT
    ,tab    => L_ARRAY
    );
    DBMS_OUTPUT.PUT_LINE(L_COUNT);

    -- Add new failure threats.
    FOR i IN 1 .. L_COUNT LOOP
      V_FT_ID:=SUBSTR(L_ARRAY(i),2);

      INSERT INTO LNK_FT_SVY (LNK_TAG_A,LNK_TAG_B) VALUES(V_FT_ID, P_SVY_HDR_ID);
    END LOOP;
  END IF;
  COMMIT;

  V_EVT_LOG:=SP_INSERT_TBL_EVENT_LOG(P_USER,'LNK_FT_SVY','INSERT SUCCESS: #' || P_SVY_HDR_ID || ' #' || P_FT_ID);
  RETURN P_SVY_HDR_ID;
EXCEPTION
 WHEN OTHERS THEN
    ROLLBACK;
    V_EVT_LOG:=SP_INSERT_TBL_EVENT_LOG(P_USER,'LNK_FT_SVY','INSERT FAIL: #' || P_SVY_HDR_ID || ' #' || P_FT_ID || '; ERR: ' || SQLCODE || '-' || SQLERRM);
    RETURN -1;
END SP_UPDATE_LNK_FT_SVY;

/
--------------------------------------------------------
--  DDL for Function SP_UPDATE_LNK_REF_ANOMMAIN
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE FUNCTION "IMSA"."SP_UPDATE_LNK_REF_ANOMMAIN" 
(
  P_TAG_A IN NUMBER DEFAULT NULL 
, P_TAG_B IN NUMBER DEFAULT NULL 
  ,P_USER IN VARCHAR2 DEFAULT 'IMSA ADMIN'
) 
  RETURN NUMBER AS 
  V_ATT_CNT NUMBER:=0;
  V_EVT_LOG NUMBER;
BEGIN
    INSERT INTO LNK_REF_ANOMMAIN (LNK_TAG_A,LNK_TAG_B) VALUES(P_TAG_A,P_TAG_B);
    SELECT COUNT(1) INTO V_ATT_CNT FROM LNK_REF_ANOMMAIN WHERE LNK_TAG_B=P_TAG_B;

    UPDATE TBL_ANOM_MAIN SET AN_ATTACHMENTS=V_ATT_CNT WHERE AN_ID=P_TAG_B;

  COMMIT;

    V_EVT_LOG:=SP_INSERT_TBL_EVENT_LOG(P_USER,'LNK_REF_ANOMMAIN','INSERT SUCCESS: #' || P_TAG_A || ' #' || P_TAG_B);
  RETURN P_TAG_A;
EXCEPTION
 WHEN OTHERS THEN
    ROLLBACK;
    V_EVT_LOG:=SP_INSERT_TBL_EVENT_LOG(P_USER,'LNK_REF_ANOMMAIN','INSERT FAIL: #' || P_TAG_A || ' #' || P_TAG_B || '; ERR: ' || SQLCODE || '-' || SQLERRM);
    RETURN -1;
END SP_UPDATE_LNK_REF_ANOMMAIN;

/
--------------------------------------------------------
--  DDL for Function SP_UPDATE_LNK_REF_ANOMMAIN_RF
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE FUNCTION "IMSA"."SP_UPDATE_LNK_REF_ANOMMAIN_RF" 
(
  P_RF_ID IN NUMBER DEFAULT NULL 
, P_REL_ID IN VARCHAR2 DEFAULT NULL 
, P_USER IN VARCHAR2 DEFAULT 'IMSA ADMIN'
) 
  RETURN NUMBER AS 
  L_INPUT VARCHAR2(4000):=P_REL_ID;
  L_COUNT BINARY_INTEGER;
  L_ARRAY DBMS_UTILITY.lname_array;
  V_REL_ID NUMBER;
  V_EVT_LOG NUMBER;
BEGIN
  --First delete links based on an_id
  DELETE FROM LNK_REF_ANOMMAIN WHERE LNK_TAG_A=P_RF_ID;

  IF (P_REL_ID IS NOT NULL) THEN
      --Convert string to array.
      DBMS_UTILITY.COMMA_TO_TABLE
      (list   => REGEXP_REPLACE(L_INPUT,'(^|,)','\1x')
      ,tablen => L_COUNT
      ,tab    => L_ARRAY
      );

      -- Add new related anomalies threats.
      FOR i IN 1 .. L_COUNT LOOP
        V_REL_ID:=SUBSTR(L_ARRAY(i),2);

        INSERT INTO LNK_REF_ANOMMAIN (LNK_TAG_A,LNK_TAG_B) VALUES(P_RF_ID,V_REL_ID);
      END LOOP;
  END IF;      
  COMMIT;

  V_EVT_LOG:=SP_INSERT_TBL_EVENT_LOG(P_USER,'LNK_REF_ANOMMAIN','INSERT SUCCESS: #' || P_RF_ID || ' #' || P_REL_ID);
  RETURN P_RF_ID;
EXCEPTION
 WHEN OTHERS THEN
    ROLLBACK;
    V_EVT_LOG:=SP_INSERT_TBL_EVENT_LOG(P_USER,'LNK_REF_ANOMMAIN','INSERT FAIL: #' || P_RF_ID || ' #' || P_REL_ID || '; ERR: ' || SQLCODE || '-' || SQLERRM);
    RETURN -1;
END SP_UPDATE_LNK_REF_ANOMMAIN_RF;

/
--------------------------------------------------------
--  DDL for Function SP_UPDATE_LNK_REF_DESIGNMAIN
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE FUNCTION "IMSA"."SP_UPDATE_LNK_REF_DESIGNMAIN" 
(
  P_TAG_A IN NUMBER DEFAULT NULL 
, P_TAG_B IN NUMBER DEFAULT NULL 
  ,P_USER IN VARCHAR2 DEFAULT 'IMSA ADMIN'
) 
  RETURN NUMBER AS 
  V_EVT_LOG NUMBER;
BEGIN

    INSERT INTO LNK_REF_DESIGNMAIN (LNK_TAG_A,LNK_TAG_B) VALUES(P_TAG_A,P_TAG_B);

  COMMIT;

  V_EVT_LOG:=SP_INSERT_TBL_EVENT_LOG(P_USER,'LNK_REF_DESIGNMAIN','INSERT SUCCESS: #' || P_TAG_A || ' #' || P_TAG_B);
  RETURN P_TAG_A;
EXCEPTION
 WHEN OTHERS THEN
    V_EVT_LOG:=SP_INSERT_TBL_EVENT_LOG(P_USER,'LNK_REF_DESIGNMAIN','INSERT FAIL: #' || P_TAG_A || ' #' || P_TAG_B || '; ERR: ' || SQLCODE || '-' || SQLERRM);
    ROLLBACK;
    RETURN -1;
END SP_UPDATE_LNK_REF_DESIGNMAIN;

/
--------------------------------------------------------
--  DDL for Function SP_UPDATE_LNK_REL_SVY
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE FUNCTION "IMSA"."SP_UPDATE_LNK_REL_SVY" 
(
  P_SVY_HDR_ID IN NUMBER DEFAULT NULL 
, P_REL_ID IN VARCHAR2 DEFAULT NULL 
  ,P_USER IN VARCHAR2 DEFAULT 'IMSA ADMIN'
) 
  RETURN NUMBER AS 
  L_INPUT VARCHAR2(4000):=P_REL_ID;
  L_COUNT BINARY_INTEGER;
  L_ARRAY DBMS_UTILITY.lname_array;
  V_REL_ID NUMBER;
  V_EVT_LOG NUMBER;
BEGIN
  --First delete links based on SVY_HDR_ID
  DELETE FROM LNK_REL_SVY WHERE LNK_TAG_A=P_SVY_HDR_ID;
  DELETE FROM LNK_REL_SVY WHERE LNK_TAG_B=P_SVY_HDR_ID;

  IF (P_REL_ID IS NOT NULL) THEN
      --Convert string to array.
      DBMS_UTILITY.COMMA_TO_TABLE
      (list   => REGEXP_REPLACE(L_INPUT,'(^|,)','\1x')
      ,tablen => L_COUNT
      ,tab    => L_ARRAY
      );

      -- Add new related anomalies threats.
      FOR i IN 1 .. L_COUNT LOOP
        V_REL_ID:=SUBSTR(L_ARRAY(i),2);

        INSERT INTO LNK_REL_SVY (LNK_TAG_A,LNK_TAG_B) VALUES(V_REL_ID,P_SVY_HDR_ID);
        INSERT INTO LNK_REL_SVY (LNK_TAG_A,LNK_TAG_B) VALUES(P_SVY_HDR_ID,V_REL_ID);
      END LOOP;
  END IF;      
  COMMIT;

  V_EVT_LOG:=SP_INSERT_TBL_EVENT_LOG(P_USER,'LNK_REL_SVY','INSERT SUCCESS: #' || P_SVY_HDR_ID || ' #' || P_REL_ID);
  RETURN P_SVY_HDR_ID;
EXCEPTION
 WHEN OTHERS THEN
    ROLLBACK;
    V_EVT_LOG:=SP_INSERT_TBL_EVENT_LOG(P_USER,'LNK_REL_SVY','INSERT FAIL: #' || P_SVY_HDR_ID || ' #' || P_REL_ID || '; ERR: ' || SQLCODE || '-' || SQLERRM);
    RETURN -1;
END SP_UPDATE_LNK_REL_SVY;

/
--------------------------------------------------------
--  DDL for Function SP_UPDATE_LNK_REL_SVY_M
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE FUNCTION "IMSA"."SP_UPDATE_LNK_REL_SVY_M" 
(
  P_SVY_HDR_ID_1 IN VARCHAR2 DEFAULT NULL 
, P_SVY_HDR_ID_2 IN VARCHAR2 DEFAULT NULL 
, P_USER IN VARCHAR2 DEFAULT 'IMSA ADMIN'
) 
  RETURN NUMBER AS 
  L_INPUT_1 VARCHAR2(4000):=P_SVY_HDR_ID_1;
  L_INPUT_2 VARCHAR2(4000):=P_SVY_HDR_ID_2;  
  L_COUNT_1 BINARY_INTEGER;
  L_COUNT_2 BINARY_INTEGER;
  L_ARRAY_1 DBMS_UTILITY.lname_array;
  L_ARRAY_2 DBMS_UTILITY.lname_array;
  V_SVY_HDR_ID_1 NUMBER;
  V_SVY_HDR_ID_2 NUMBER;
  V_COUNT NUMBER:=0;
  V_EVT_LOG NUMBER;
BEGIN

  IF (P_SVY_HDR_ID_1 IS NOT NULL AND P_SVY_HDR_ID_2 IS NOT NULL) THEN
      --Convert string to array.
      DBMS_UTILITY.COMMA_TO_TABLE
      (list   => REGEXP_REPLACE(L_INPUT_1,'(^|,)','\1x')
      ,tablen => L_COUNT_1
      ,tab    => L_ARRAY_1
      );

      DBMS_UTILITY.COMMA_TO_TABLE
      (list   => REGEXP_REPLACE(L_INPUT_2,'(^|,)','\1x')
      ,tablen => L_COUNT_2
      ,tab    => L_ARRAY_2
      );

      -- Add new related anomalies 
      FOR i IN 1 .. L_COUNT_1 LOOP
        V_SVY_HDR_ID_1:=SUBSTR(L_ARRAY_1(i),2);

        FOR j IN 1 .. L_COUNT_2 LOOP
          V_SVY_HDR_ID_2:=SUBSTR(L_ARRAY_2(j),2);

          IF V_SVY_HDR_ID_1 <> V_SVY_HDR_ID_2 THEN       

            SELECT COUNT(1) INTO V_COUNT FROM LNK_REL_SVY WHERE (LNK_TAG_A=V_SVY_HDR_ID_1 AND LNK_TAG_B=V_SVY_HDR_ID_2) OR 
            (LNK_TAG_A=V_SVY_HDR_ID_2 AND LNK_TAG_B=V_SVY_HDR_ID_1);

            IF V_COUNT = 0 THEN --Only add non existing anomalies.
              INSERT INTO LNK_REL_SVY (LNK_TAG_A,LNK_TAG_B) VALUES(V_SVY_HDR_ID_1,V_SVY_HDR_ID_2);
              INSERT INTO LNK_REL_SVY (LNK_TAG_A,LNK_TAG_B) VALUES(V_SVY_HDR_ID_2,V_SVY_HDR_ID_1);
            END IF;
            V_COUNT:=0;
          END IF;
        END LOOP;

      END LOOP;
  END IF;      
  COMMIT;

  V_EVT_LOG:=SP_INSERT_TBL_EVENT_LOG(P_USER,'LNK_REL_SVY','INSERT SUCCESS: #' || P_SVY_HDR_ID_1 || ' #' || P_SVY_HDR_ID_2);
  RETURN 1;
EXCEPTION
 WHEN OTHERS THEN
    ROLLBACK;
    V_EVT_LOG:=SP_INSERT_TBL_EVENT_LOG(P_USER,'LNK_REL_SVY','INSERT FAIL: #' || P_SVY_HDR_ID_1 || ' #' || P_SVY_HDR_ID_2 || '; ERR: ' || SQLCODE || '-' || SQLERRM);
    RETURN -1;
END SP_UPDATE_LNK_REL_SVY_M;

/
--------------------------------------------------------
--  DDL for Function SP_UPDATE_LNK_REL_SVY_S
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE FUNCTION "IMSA"."SP_UPDATE_LNK_REL_SVY_S" 
(
  P_SVY_HDR_ID IN NUMBER DEFAULT NULL 
, P_REL_ID IN VARCHAR2 DEFAULT NULL 
, P_USER IN VARCHAR2 DEFAULT 'IMSA ADMIN'
) 
  RETURN NUMBER AS 
  L_INPUT VARCHAR2(4000):=P_REL_ID;
  L_COUNT BINARY_INTEGER;
  L_ARRAY DBMS_UTILITY.lname_array;
  V_REL_ID NUMBER;
  V_COUNT NUMBER:=0;  
  V_EVT_LOG NUMBER;
BEGIN
  IF (P_REL_ID IS NOT NULL) THEN
      --Convert string to array.
      DBMS_UTILITY.COMMA_TO_TABLE
      (list   => REGEXP_REPLACE(L_INPUT,'(^|,)','\1x')
      ,tablen => L_COUNT
      ,tab    => L_ARRAY
      );

      -- Add new related anomalies treats.
      FOR i IN 1 .. L_COUNT LOOP
        V_REL_ID:=SUBSTR(L_ARRAY(i),2);

        SELECT COUNT(*) INTO V_COUNT FROM LNK_REL_SVY WHERE (LNK_TAG_A=P_SVY_HDR_ID AND LNK_TAG_B=V_REL_ID) OR  
        (LNK_TAG_A=V_REL_ID AND LNK_TAG_B=P_SVY_HDR_ID);

        --ADD SURVEY id to both field, coz it will search as parent SURVEY both ways.
        IF V_COUNT = 0 THEN --Only add non existing anomalies.
          INSERT INTO LNK_REL_SVY (LNK_TAG_A,LNK_TAG_B) VALUES(P_SVY_HDR_ID,V_REL_ID); 
          INSERT INTO LNK_REL_SVY (LNK_TAG_A,LNK_TAG_B) VALUES(V_REL_ID,P_SVY_HDR_ID);
        END IF;

        V_COUNT:=0;
      END LOOP;
  END IF;      
  COMMIT;

  V_EVT_LOG:=SP_INSERT_TBL_EVENT_LOG(P_USER,'LNK_REL_SVY','INSERT SUCCESS: #' || P_SVY_HDR_ID || ' #' || P_REL_ID);
  RETURN P_SVY_HDR_ID;
EXCEPTION
 WHEN OTHERS THEN
    ROLLBACK;
    V_EVT_LOG:=SP_INSERT_TBL_EVENT_LOG(P_USER,'LNK_REL_SVY','INSERT FAIL: #' || P_SVY_HDR_ID || ' #' || P_REL_ID || '; ERR: ' || SQLCODE || '-' || SQLERRM);
    RETURN -1;
END SP_UPDATE_LNK_REL_SVY_S;

/
--------------------------------------------------------
--  DDL for Function SP_UPDATE_LNK_RELAN_AN
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE FUNCTION "IMSA"."SP_UPDATE_LNK_RELAN_AN" 
(
  P_AN_ID IN NUMBER DEFAULT NULL 
, P_REL_ID IN VARCHAR2 DEFAULT NULL 
, P_USER IN VARCHAR2 DEFAULT 'IMSA ADMIN'
) 
  RETURN NUMBER AS 
  L_INPUT VARCHAR2(4000):=P_REL_ID;
  L_COUNT BINARY_INTEGER;
  L_ARRAY DBMS_UTILITY.lname_array;
  V_REL_ID NUMBER;
  V_EVT_LOG NUMBER;
BEGIN
  --First delete links based on an_id
  DELETE FROM LNK_RELAN_AN WHERE LNK_TAG_A=P_AN_ID; 
  DELETE FROM LNK_RELAN_AN WHERE LNK_TAG_B=P_AN_ID;

  IF (P_REL_ID IS NOT NULL) THEN
      --Convert string to array.
      DBMS_UTILITY.COMMA_TO_TABLE
      (list   => REGEXP_REPLACE(L_INPUT,'(^|,)','\1x')
      ,tablen => L_COUNT
      ,tab    => L_ARRAY
      );

      -- Add new related anomalies threats.
      FOR i IN 1 .. L_COUNT LOOP
        V_REL_ID:=SUBSTR(L_ARRAY(i),2);

        INSERT INTO LNK_RELAN_AN (LNK_TAG_A,LNK_TAG_B) VALUES(V_REL_ID,P_AN_ID);
        INSERT INTO LNK_RELAN_AN (LNK_TAG_A,LNK_TAG_B) VALUES(P_AN_ID,V_REL_ID);
      END LOOP;
  END IF;      
  COMMIT;

  V_EVT_LOG:=SP_INSERT_TBL_EVENT_LOG(P_USER,'LNK_RELAN_AN','INSERT SUCCESS: #' || P_AN_ID || ' #' || P_REL_ID);
  RETURN P_AN_ID;
EXCEPTION
 WHEN OTHERS THEN
    ROLLBACK;
    V_EVT_LOG:=SP_INSERT_TBL_EVENT_LOG(P_USER,'LNK_RELAN_AN','INSERT FAIL: #' || P_AN_ID || ' #' || P_REL_ID || '; ERR: ' || SQLCODE || '-' || SQLERRM);
    RETURN -1;
END SP_UPDATE_LNK_RELAN_AN;

/
--------------------------------------------------------
--  DDL for Function SP_UPDATE_LNK_RELAN_AN_M
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE FUNCTION "IMSA"."SP_UPDATE_LNK_RELAN_AN_M" 
(
  P_AN_ID_1 IN VARCHAR2 DEFAULT NULL 
, P_AN_ID_2 IN VARCHAR2 DEFAULT NULL 
, P_USER IN VARCHAR2 DEFAULT 'IMSA ADMIN'
) 
  RETURN NUMBER AS 
  L_INPUT_1 VARCHAR2(4000):=P_AN_ID_1;
  L_INPUT_2 VARCHAR2(4000):=P_AN_ID_2;  
  L_COUNT_1 BINARY_INTEGER;
  L_COUNT_2 BINARY_INTEGER;
  L_ARRAY_1 DBMS_UTILITY.lname_array;
  L_ARRAY_2 DBMS_UTILITY.lname_array;
  V_AN_ID_1 NUMBER;
  V_AN_ID_2 NUMBER;
  V_COUNT NUMBER:=0;
  V_EVT_LOG NUMBER;
BEGIN

  IF (P_AN_ID_1 IS NOT NULL AND P_AN_ID_2 IS NOT NULL) THEN
      --Convert string to array.
      DBMS_UTILITY.COMMA_TO_TABLE
      (list   => REGEXP_REPLACE(L_INPUT_1,'(^|,)','\1x')
      ,tablen => L_COUNT_1
      ,tab    => L_ARRAY_1
      );

      DBMS_UTILITY.COMMA_TO_TABLE
      (list   => REGEXP_REPLACE(L_INPUT_2,'(^|,)','\1x')
      ,tablen => L_COUNT_2
      ,tab    => L_ARRAY_2
      );

      -- Add new related anomalies 
      FOR i IN 1 .. L_COUNT_1 LOOP
        V_AN_ID_1:=SUBSTR(L_ARRAY_1(i),2);

        FOR j IN 1 .. L_COUNT_2 LOOP
          V_AN_ID_2:=SUBSTR(L_ARRAY_2(j),2);

          IF V_AN_ID_1 <> V_AN_ID_2 THEN       

            SELECT COUNT(1) INTO V_COUNT FROM LNK_RELAN_AN WHERE (LNK_TAG_A=V_AN_ID_1 AND LNK_TAG_B=V_AN_ID_2) OR 
            (LNK_TAG_A=V_AN_ID_2 AND LNK_TAG_B=V_AN_ID_1);

            IF V_COUNT = 0 THEN --Only add non existing anomalies.
              INSERT INTO LNK_RELAN_AN (LNK_TAG_A,LNK_TAG_B) VALUES(V_AN_ID_1,V_AN_ID_2);
              INSERT INTO LNK_RELAN_AN (LNK_TAG_A,LNK_TAG_B) VALUES(V_AN_ID_2,V_AN_ID_1);
            END IF;
            V_COUNT:=0;
          END IF;
        END LOOP;

      END LOOP;
  END IF;      
  COMMIT;

  V_EVT_LOG:=SP_INSERT_TBL_EVENT_LOG(P_USER,'LNK_RELAN_AN','INSERT SUCCESS: #' || P_AN_ID_1 || ' #' || P_AN_ID_2);
  RETURN 1;
EXCEPTION
 WHEN OTHERS THEN
    ROLLBACK;
    V_EVT_LOG:=SP_INSERT_TBL_EVENT_LOG(P_USER,'LNK_RELAN_AN','INSERT FAIL: #' || P_AN_ID_1 || ' #' || P_AN_ID_2 || '; ERR: ' || SQLCODE || '-' || SQLERRM);
    RETURN -1;
END SP_UPDATE_LNK_RELAN_AN_M;

/
--------------------------------------------------------
--  DDL for Function SP_UPDATE_LNK_RELAN_AN_S
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE FUNCTION "IMSA"."SP_UPDATE_LNK_RELAN_AN_S" 
(
  P_AN_ID IN NUMBER DEFAULT NULL 
, P_REL_ID IN VARCHAR2 DEFAULT NULL 
, P_USER IN VARCHAR2 DEFAULT 'IMSA ADMIN'
) 
  RETURN NUMBER AS 
  L_INPUT VARCHAR2(4000):=P_REL_ID;
  L_COUNT BINARY_INTEGER;
  L_ARRAY DBMS_UTILITY.lname_array;
  V_REL_ID NUMBER;
  V_COUNT NUMBER:=0;  
  V_EVT_LOG NUMBER;
BEGIN

  IF (P_REL_ID IS NOT NULL) THEN
      --Convert string to array.
      DBMS_UTILITY.COMMA_TO_TABLE
      (list   => REGEXP_REPLACE(L_INPUT,'(^|,)','\1x')
      ,tablen => L_COUNT
      ,tab    => L_ARRAY
      );

      -- Add new related anomalies treats.
      FOR i IN 1 .. L_COUNT LOOP
        V_REL_ID:=SUBSTR(L_ARRAY(i),2);

        SELECT COUNT(*) INTO V_COUNT FROM LNK_RELAN_AN WHERE (LNK_TAG_A=P_AN_ID AND LNK_TAG_B=V_REL_ID) OR  
        (LNK_TAG_A=V_REL_ID AND LNK_TAG_B=P_AN_ID);

        --ADD anomaly id to both field, coz it will search as parent anomaly both ways.
        IF V_COUNT = 0 THEN --Only add non existing anomalies.
          INSERT INTO LNK_RELAN_AN (LNK_TAG_A,LNK_TAG_B) VALUES(P_AN_ID,V_REL_ID); 
          INSERT INTO LNK_RELAN_AN (LNK_TAG_A,LNK_TAG_B) VALUES(V_REL_ID,P_AN_ID);
        END IF;

        V_COUNT:=0;
      END LOOP;
  END IF;      
  COMMIT;

  V_EVT_LOG:=SP_INSERT_TBL_EVENT_LOG(P_USER,'LNK_RELAN_AN','INSERT SUCCESS: #' || P_AN_ID || ' #' || P_REL_ID);
  RETURN P_AN_ID;
EXCEPTION
 WHEN OTHERS THEN
    ROLLBACK;
    V_EVT_LOG:=SP_INSERT_TBL_EVENT_LOG(P_USER,'LNK_RELAN_AN','INSERT FAIL: #' || P_AN_ID || ' #' || P_REL_ID || '; ERR: ' || SQLCODE || '-' || SQLERRM);
    RETURN -1;
END SP_UPDATE_LNK_RELAN_AN_S;

/
--------------------------------------------------------
--  DDL for Function SP_UPDATE_SYS_NODES_A_MA
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE FUNCTION "IMSA"."SP_UPDATE_SYS_NODES_A_MA" 
(
  P_REC_TAG IN NUMBER DEFAULT NULL 
, P_ITEM_USED IN NUMBER DEFAULT NULL --> 1 UNUSED, -1 USED
, P_DAT_TYPE IN NUMBER DEFAULT NULL 
, P_ACT_REMARKS IN VARCHAR2 DEFAULT NULL
, P_HIST_USERNAME IN VARCHAR2 DEFAULT NULL
) 
  RETURN NUMBER AS 
  V_NEW_DD_HIST_ID NUMBER;
  V_DD_HIST_LOG_TYPE NUMBER:=-1;
  V_RC SYS_REFCURSOR;
  V_TRE_DAT_TAG NUMBER;
BEGIN

  IF (P_ITEM_USED=1) THEN --IF MARK AS UNUSED, FLAG ASSET AND ALL CHILDREN ONLY
    SELECT LKP_ID INTO V_DD_HIST_LOG_TYPE FROM SYS_LOOKUPS WHERE LKP_GRP_ID=188 AND LKP_BOOLEAN_2=1;--GET HISTORY LOG TYPE

    OPEN V_RC FOR 
      SELECT TRE_DAT_TAG FROM SYS_TREE_STRUC WHERE TRE_DAT_TYPE=P_DAT_TYPE 
      START WITH TRE_DAT_TAG = P_REC_TAG CONNECT BY TRE_NOD_TAG_PAR=PRIOR TRE_NOD_TAG;

    UPDATE SYS_NODES_ATTRIB SET ITEM_USED=P_ITEM_USED WHERE REC_TAG IN (SELECT TRE_DAT_TAG FROM SYS_TREE_STRUC WHERE TRE_DAT_TYPE=P_DAT_TYPE  
      START WITH TRE_DAT_TAG = P_REC_TAG CONNECT BY TRE_NOD_TAG_PAR=PRIOR TRE_NOD_TAG);

    --UPDATE TBL_DESIGN_DATA_HISTORY
    LOOP
      FETCH V_RC INTO V_TRE_DAT_TAG;
        EXIT WHEN V_RC%NOTFOUND;  -- Exit the loop when we've run out of data    
        V_NEW_DD_HIST_ID:=SP_NEW_TABLE_PK_NO('TBL_DESIGN_DATA_HISTORY', 'DD_HIST_ID');

        --UPDATE TBL_DESIGN_DATA_HISTORY
        INSERT INTO TBL_DESIGN_DATA_HISTORY (
        DD_HIST_ID
        ,DD_HIST_ASSET_ID
        ,DD_HIST_DATE
        ,DD_HIST_ASSET_FR
        ,DD_HIST_ASSET_TO
        ,DD_HIST_DESC
        ,DD_HIST_LOG_TYPE
        ,DD_HIST_USERNAME
        ) VALUES (
        V_NEW_DD_HIST_ID
        ,V_TRE_DAT_TAG 
        ,CURRENT_DATE
        ,V_TRE_DAT_TAG
        ,V_TRE_DAT_TAG
        ,P_ACT_REMARKS
        ,V_DD_HIST_LOG_TYPE
        ,P_HIST_USERNAME
        );   
       END LOOP;
    CLOSE V_RC;
  ELSE --IF MARK AS USED, FLAG ASSET AND ALL PARENT AND CHILDRED
    SELECT LKP_ID INTO V_DD_HIST_LOG_TYPE FROM SYS_LOOKUPS WHERE LKP_GRP_ID=188 AND LKP_BOOLEAN_3=1;--GET HISTORY LOG TYPE

    --FIRST UPDATE PARENT
    OPEN V_RC FOR 
      SELECT TRE_DAT_TAG FROM SYS_TREE_STRUC WHERE TRE_DAT_TYPE=P_DAT_TYPE 
      START WITH TRE_DAT_TAG = P_REC_TAG CONNECT BY PRIOR TRE_NOD_TAG_PAR=TRE_NOD_TAG;

    UPDATE SYS_NODES_ATTRIB SET ITEM_USED=P_ITEM_USED WHERE REC_TAG IN (SELECT TRE_DAT_TAG FROM SYS_TREE_STRUC WHERE TRE_DAT_TYPE=P_DAT_TYPE  
      START WITH TRE_DAT_TAG = P_REC_TAG CONNECT BY PRIOR TRE_NOD_TAG_PAR= TRE_NOD_TAG);

    --UPDATE TBL_DESIGN_DATA_HISTORY FOR 
    LOOP
      FETCH V_RC INTO V_TRE_DAT_TAG;
        EXIT WHEN V_RC%NOTFOUND;  -- Exit the loop when we've run out of data    
        V_NEW_DD_HIST_ID:=SP_NEW_TABLE_PK_NO('TBL_DESIGN_DATA_HISTORY', 'DD_HIST_ID');

        --UPDATE TBL_DESIGN_DATA_HISTORY
        INSERT INTO TBL_DESIGN_DATA_HISTORY (
        DD_HIST_ID
        ,DD_HIST_ASSET_ID
        ,DD_HIST_DATE
        ,DD_HIST_ASSET_FR
        ,DD_HIST_ASSET_TO
        ,DD_HIST_DESC
        ,DD_HIST_LOG_TYPE
        ,DD_HIST_USERNAME
        ) VALUES (
        V_NEW_DD_HIST_ID
        ,V_TRE_DAT_TAG 
        ,CURRENT_DATE
        ,V_TRE_DAT_TAG
        ,V_TRE_DAT_TAG
        ,P_ACT_REMARKS
        ,V_DD_HIST_LOG_TYPE
        ,P_HIST_USERNAME
        );   
       END LOOP;
    CLOSE V_RC;

    --THEN UPDATE CHILDREN
    OPEN V_RC FOR 
      SELECT TRE_DAT_TAG FROM SYS_TREE_STRUC WHERE TRE_DAT_TYPE=P_DAT_TYPE AND TRE_DAT_TAG <> P_REC_TAG --Add Additional filter to avoid duplicate saving on p_rec_tag  
      START WITH TRE_DAT_TAG = P_REC_TAG CONNECT BY TRE_NOD_TAG_PAR=PRIOR TRE_NOD_TAG;

    UPDATE SYS_NODES_ATTRIB SET ITEM_USED=P_ITEM_USED WHERE REC_TAG IN (SELECT TRE_DAT_TAG FROM SYS_TREE_STRUC WHERE TRE_DAT_TYPE=P_DAT_TYPE  
      START WITH TRE_DAT_TAG = P_REC_TAG CONNECT BY TRE_NOD_TAG_PAR=PRIOR TRE_NOD_TAG);

    --UPDATE TBL_DESIGN_DATA_HISTORY
    LOOP
      FETCH V_RC INTO V_TRE_DAT_TAG;
        EXIT WHEN V_RC%NOTFOUND;  -- Exit the loop when we've run out of data    
        V_NEW_DD_HIST_ID:=SP_NEW_TABLE_PK_NO('TBL_DESIGN_DATA_HISTORY', 'DD_HIST_ID');

        --UPDATE TBL_DESIGN_DATA_HISTORY
        INSERT INTO TBL_DESIGN_DATA_HISTORY (
        DD_HIST_ID
        ,DD_HIST_ASSET_ID
        ,DD_HIST_DATE
        ,DD_HIST_ASSET_FR
        ,DD_HIST_ASSET_TO
        ,DD_HIST_DESC
        ,DD_HIST_LOG_TYPE
        ,DD_HIST_USERNAME
        ) VALUES (
        V_NEW_DD_HIST_ID
        ,V_TRE_DAT_TAG 
        ,CURRENT_DATE
        ,V_TRE_DAT_TAG
        ,V_TRE_DAT_TAG
        ,P_ACT_REMARKS
        ,V_DD_HIST_LOG_TYPE
        ,P_HIST_USERNAME
        );   
       END LOOP;
    CLOSE V_RC;
  END IF;

  COMMIT;

  RETURN P_REC_TAG;
EXCEPTION
 WHEN OTHERS THEN
    ROLLBACK;
    RETURN -1;
END SP_UPDATE_SYS_NODES_A_MA;

/
--------------------------------------------------------
--  DDL for Function SP_UPDATE_SYS_NODES_A_MO
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE FUNCTION "IMSA"."SP_UPDATE_SYS_NODES_A_MO" 
(
  P_S_REC_TAG IN NUMBER DEFAULT NULL 
, P_D_REC_TAG IN NUMBER DEFAULT NULL 
, P_REC_TAG IN NUMBER DEFAULT NULL 
, P_DAT_TYPE IN NUMBER DEFAULT NULL 
, P_ACT_REMARKS IN VARCHAR2 DEFAULT NULL
, P_HIST_USERNAME IN VARCHAR2 DEFAULT NULL
) 
  RETURN NUMBER AS 
  V_NEW_DD_HIST_ID NUMBER:=SP_NEW_TABLE_PK_NO('TBL_DESIGN_DATA_HISTORY', 'DD_HIST_ID');
  V_TRE_NOD_TAG_PAR NUMBER:=-1;
  V_DD_HIST_LOG_TYPE NUMBER:=-1;
  V_S_ITEM_USED NUMBER;
  V_D_ITEM_USED NUMBER;
  V_RC_S SYS_REFCURSOR;
  V_RC_D SYS_REFCURSOR;
  V_TMP NUMBER;
BEGIN
  --MOVE ASSET.

  --SEARCH TREE FOR PARENT ID
  SELECT TRE_NOD_TAG INTO V_TRE_NOD_TAG_PAR FROM SYS_TREE_STRUC WHERE TRE_DAT_TAG=P_D_REC_TAG 
    AND TRE_DAT_TYPE=P_DAT_TYPE;

  --UPDATE SYS_TREE_STRUC
  UPDATE SYS_TREE_STRUC SET TRE_NOD_TAG_PAR=V_TRE_NOD_TAG_PAR WHERE TRE_DAT_TAG=P_REC_TAG 
    AND TRE_DAT_TYPE=P_DAT_TYPE;

  --GET HISTORY LOG TYPE
  SELECT LKP_ID INTO V_DD_HIST_LOG_TYPE FROM SYS_LOOKUPS WHERE LKP_GRP_ID=188 AND LKP_BOOLEAN_1=1;

   --UPDATE TBL_DESIGN_DATA_HISTORY
  INSERT INTO TBL_DESIGN_DATA_HISTORY (
  DD_HIST_ID
  ,DD_HIST_ASSET_ID
  ,DD_HIST_DATE
  ,DD_HIST_ASSET_FR
  ,DD_HIST_ASSET_TO
  ,DD_HIST_DESC
  ,DD_HIST_LOG_TYPE
  ,DD_HIST_USERNAME
  ) VALUES (
  V_NEW_DD_HIST_ID
  ,P_REC_TAG
  ,CURRENT_DATE
  ,P_S_REC_TAG
  ,P_D_REC_TAG
  ,P_ACT_REMARKS
  ,V_DD_HIST_LOG_TYPE
  ,P_HIST_USERNAME
  );

  COMMIT;

  --AFTER MOVING ASSET, UPDATE STATUS IF NEEDED.
  --FIRST GET ITEM_USED OF DESTINATION REC_TAG.
  --IF DESTINATION REC_TAG IS NOT IN USED, THEN CHECK SOURCE REC_TAG IF USED.
  OPEN V_RC_D FOR SELECT ITEM_USED FROM SYS_NODES_ATTRIB WHERE REC_TAG=P_D_REC_TAG;
  FETCH V_RC_D INTO V_D_ITEM_USED;
  CLOSE V_RC_D;

  IF V_D_ITEM_USED<>-1 THEN --IF UNUSED.
    OPEN V_RC_S FOR SELECT ITEM_USED FROM SYS_NODES_ATTRIB WHERE REC_TAG=P_S_REC_TAG; --GET ITEM USED OF SOURCE REC_TAG.
    FETCH V_RC_S INTO V_S_ITEM_USED;
    CLOSE V_RC_S;

    IF V_S_ITEM_USED=-1 THEN --IF SOURCE REC_TAG IS USED, AND DESTINATION REC_TAG IS UNUSED THEN, MARK DESTINATION AND ALL ITS PARENT TO USED.
      V_TMP:=SP_UPDATE_SYS_NODES_A_MA(P_D_REC_TAG,-1,P_DAT_TYPE,P_ACT_REMARKS,P_HIST_USERNAME);
    END IF;
  END IF;

  RETURN P_REC_TAG;
--EXCEPTION
 --WHEN OTHERS THEN
  --  ROLLBACK;
  --  RETURN -1;
END SP_UPDATE_SYS_NODES_A_MO;

/
--------------------------------------------------------
--  DDL for Function SP_UPDATE_TBL_ANOM_ACT_ITEMS
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE FUNCTION "IMSA"."SP_UPDATE_TBL_ANOM_ACT_ITEMS" 
(
  P_AI_ID IN NUMBER DEFAULT NULL,
  P_AI_REF_NO IN VARCHAR2 DEFAULT NULL,
  P_AI_ACT_PARTY1 IN VARCHAR2 DEFAULT NULL,
  P_AI_ACT_PARTY2 IN VARCHAR2 DEFAULT NULL,
  P_AI_TARGET_DATE IN DATE DEFAULT NULL,
  P_AI_ACT_START_DATE IN DATE DEFAULT NULL,
  P_AI_ACT_END_DATE IN DATE DEFAULT NULL,
  P_AI_MHOURS IN NUMBER DEFAULT NULL,
  P_AI_STAT IN NUMBER DEFAULT NULL,
  P_AI_AN_ID IN NUMBER DEFAULT NULL,
  P_AI_DETAILS IN VARCHAR2 DEFAULT NULL,
  P_AI_NOTES IN VARCHAR2 DEFAULT NULL,
  P_AI_UPDATED_DATE IN DATE DEFAULT NULL,
  P_AI_RAISED_BY IN NUMBER DEFAULT NULL,
  P_AI_RAISED_DATE IN DATE DEFAULT NULL,
  P_AI_UPDATED_BY IN NUMBER DEFAULT NULL,
  P_AI_TITLE IN VARCHAR2 DEFAULT NULL,
  P_AI_PRIORITY IN NUMBER DEFAULT NULL,
  P_AI_UPDATED_BY_SYS IN VARCHAR2 DEFAULT NULL
)
  RETURN NUMBER AS 
  V_EVT_LOG NUMBER;
BEGIN
  UPDATE TBL_ANOM_ACT_ITEMS SET 
    AI_ID=P_AI_ID,
    AI_REF_NO=P_AI_REF_NO,
    AI_ACT_PARTY1=P_AI_ACT_PARTY1,
    AI_ACT_PARTY2=P_AI_ACT_PARTY2,
    AI_TARGET_DATE=P_AI_TARGET_DATE,
    AI_ACT_START_DATE=P_AI_ACT_START_DATE,
    AI_ACT_END_DATE=P_AI_ACT_END_DATE,
    AI_MHOURS=P_AI_MHOURS,
    AI_STAT=P_AI_STAT,
    AI_AN_ID=P_AI_AN_ID,
    AI_DETAILS=P_AI_DETAILS,
    AI_NOTES=P_AI_NOTES,
    AI_UPDATED_DATE=P_AI_UPDATED_DATE,
    AI_RAISED_BY=P_AI_RAISED_BY,
    AI_RAISED_DATE=P_AI_RAISED_DATE,
    AI_UPDATED_BY=P_AI_UPDATED_BY,
    AI_TITLE=P_AI_TITLE,
    AI_PRIORITY=P_AI_PRIORITY    
  WHERE AI_ID=P_AI_ID;

  COMMIT;

  V_EVT_LOG:=SP_INSERT_TBL_EVENT_LOG(P_AI_UPDATED_BY_SYS,'TBL_ANOM_ACT_ITEMS','UPDATE SUCCESS: #' || P_AI_ID);
  RETURN P_AI_ID;
EXCEPTION
 WHEN OTHERS THEN
    ROLLBACK;
  V_EVT_LOG:=SP_INSERT_TBL_EVENT_LOG(P_AI_UPDATED_BY_SYS,'TBL_ANOM_ACT_ITEMS','UPDATE FAIL: #' || P_AI_ID || '; ERR: ' || SQLCODE || '-' || SQLERRM);
    RETURN -1;
END SP_UPDATE_TBL_ANOM_ACT_ITEMS;

/
--------------------------------------------------------
--  DDL for Function SP_UPDATE_TBL_ANOM_FT
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE FUNCTION "IMSA"."SP_UPDATE_TBL_ANOM_FT" 
(
  P_FT_ID IN NUMBER DEFAULT NULL
, P_FT_CODE IN VARCHAR2 DEFAULT NULL
, P_FT_CORR_REL IN NUMBER DEFAULT NULL  
, P_FT_NAME IN VARCHAR2 DEFAULT NULL
, P_FT_DESC IN VARCHAR2 DEFAULT NULL
, P_FT_TYPE IN NUMBER DEFAULT NULL 
, P_FT_GROUP IN NUMBER DEFAULT NULL
, P_USER IN VARCHAR2 DEFAULT 'IMSA ADMIN'
) RETURN NUMBER AS 
  V_EVT_LOG NUMBER;
BEGIN
  UPDATE TBL_ANOM_FT
  SET FT_CODE = P_FT_CODE
  , FT_CORR_REL = P_FT_CORR_REL
  , FT_NAME = P_FT_NAME
  , FT_DESC = P_FT_DESC
  , FT_TYPE = P_FT_TYPE
  , FT_GROUP = P_FT_GROUP
  WHERE FT_ID = P_FT_ID;

  COMMIT;

 --Record event log.
  V_EVT_LOG:=SP_INSERT_TBL_EVENT_LOG(P_USER,'TBL_ANOM_FT', 'UPDATE SUCCESS: #' || P_FT_ID);

  RETURN P_FT_ID;
EXCEPTION
 WHEN OTHERS THEN
    ROLLBACK;
    --Record event log.
    V_EVT_LOG:=SP_INSERT_TBL_EVENT_LOG(P_USER, 'TBL_ANOM_FT', 'UPDATE FAIL: #' || P_FT_ID || '; ERR: ' || SQLCODE || '-' || SQLERRM);
    RETURN -1;
END SP_UPDATE_TBL_ANOM_FT;

/
--------------------------------------------------------
--  DDL for Function SP_UPDATE_TBL_ANOM_MAIN
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE FUNCTION "IMSA"."SP_UPDATE_TBL_ANOM_MAIN" 
(
  P_AN_ID IN NUMBER DEFAULT NULL
  , P_AN_REF IN VARCHAR2 DEFAULT NULL
  , P_AN_REVNO IN VARCHAR2 DEFAULT NULL
  , P_AN_ORIG_CLASS IN NUMBER DEFAULT NULL
  , P_AN_CURR_CLASS IN NUMBER DEFAULT NULL
  , P_AN_TYPE IN NUMBER DEFAULT NULL
  , P_AN_ORIG_AVAIL_CLASS IN NUMBER DEFAULT NULL
  , P_AN_CURR_AVAIL_CLASS IN NUMBER DEFAULT NULL
  , P_AN_ASSET_ID IN NUMBER DEFAULT NULL
  , P_AN_ASSET_ID_M IN VARCHAR2 DEFAULT NULL
  , P_AN_DATE_IDENT IN DATE DEFAULT NULL 
  , P_AN_STATUS IN NUMBER DEFAULT NULL
 -- Details Tab
  , P_AN_TITLE IN VARCHAR2 DEFAULT NULL 
  , P_AN_FNCR_REQUIRED IN NUMBER DEFAULT NULL
  , P_AN_FNCR IN VARCHAR2 DEFAULT NULL 
  , P_AN_DESC IN VARCHAR2 DEFAULT NULL 
  , P_AN_LIFE_TERM IN VARCHAR2 DEFAULT NULL
  , P_AN_ACT_BY_DATE IN DATE DEFAULT NULL
  , P_AN_ACT_PARTY IN VARCHAR2 DEFAULT NULL 
  , P_AN_MAINT_REQ IN NUMBER DEFAULT NULL
  , P_AN_START_NORTH IN NUMBER DEFAULT NULL 
  , P_AN_START_EAST IN NUMBER DEFAULT NULL 
  , P_AN_PORTFOLIO_APPL IN NUMBER DEFAULT NULL
  , P_AN_WO_REF IN VARCHAR2 DEFAULT NULL 
  , P_AN_END_NORTH IN NUMBER DEFAULT NULL 
  , P_AN_END_EAST IN NUMBER DEFAULT NULL 
  , P_AN_EQ_FAILURE IN NUMBER DEFAULT NULL
  , P_AN_WO_STATUS IN NUMBER DEFAULT NULL 
  , P_AN_ASIS IN NUMBER DEFAULT NULL 
  , P_AN_ASIS_STATUS IN NUMBER DEFAULT NULL 
  , P_AN_PT_SUPPORT IN NUMBER DEFAULT NULL 
  -- Assessment Tab
  , P_AN_ASSMNT IN VARCHAR2 DEFAULT NULL 
  , P_AN_RAISED_BY IN VARCHAR2 DEFAULT NULL 
  , P_AN_RAISED_DATE IN DATE DEFAULT NULL
  , P_AN_ASS_BY IN VARCHAR2 DEFAULT NULL 
  , P_AN_ASS_DATE IN DATE DEFAULT NULL
  , P_AN_UPD_BY IN VARCHAR2 DEFAULT NULL 
  , P_AN_UPD_DATE IN DATE DEFAULT NULL  
  -- Recommendation Tab
  , P_AN_RECCMD IN VARCHAR2 DEFAULT NULL 
  , P_AN_TA_APPROVED IN NUMBER DEFAULT NULL
  , P_AN_TA_NAME IN VARCHAR2 DEFAULT NULL 
  , P_AN_TA_APPR_DATE IN DATE DEFAULT NULL  
  -- Risk Tab
  , P_AN_RISK_RANK_COMMENTS IN VARCHAR2 DEFAULT NULL 
  , P_AN_RISK_RANK_SEVERITY IN NUMBER DEFAULT NULL
  , P_AN_RISK_RANK_LIKELIHOOD IN NUMBER DEFAULT NULL
  -- Intervention Tab
  , P_ITV_DATE_MOBIL IN DATE DEFAULT NULL 
  , P_ITV_TYPE IN NUMBER DEFAULT NULL
  , P_ITV_VESSEL_TYPE IN NUMBER DEFAULT NULL
  , P_ITV_VESSEL_NAME IN VARCHAR2 DEFAULT NULL 
  , P_ITV_SUMMARY IN VARCHAR2 DEFAULT NULL 
  , P_ITV_TIME_PLAN_PROC IN NUMBER DEFAULT NULL
  , P_ITV_AFE_COST IN NUMBER DEFAULT NULL
  , P_ITV_TIME_ACTUAL IN NUMBER DEFAULT NULL
  , P_ITV_AFE_SHELL_SHARE IN NUMBER DEFAULT NULL
  , P_ITV_TIME_MOBIL IN NUMBER DEFAULT NULL
  , P_ITV_ACTUAL_COST IN NUMBER DEFAULT NULL
  , P_ITV_LEARNING IN VARCHAR2 DEFAULT NULL 
  , P_ITV_VESSEL_DAY_RATE IN NUMBER DEFAULT NULL
  , P_ITV_WBS_NUMBER IN VARCHAR2 DEFAULT NULL 
  , P_AN_ASSET_CHANGED IN NUMBER DEFAULT 0 
  , P_DAT_TYPE IN NUMBER DEFAULT 1
  , P_COLOR_MODE IN VARCHAR2 DEFAULT 'ACTION_COLOR'

)
  RETURN NUMBER AS 
  L_INPUT VARCHAR2(4000):=P_AN_ASSET_ID_M;
  L_COUNT BINARY_INTEGER;
  L_ARRAY DBMS_UTILITY.lname_array;
  V_AN_ASSET_ID NUMBER;
  V_EVT_LOG NUMBER;
 BEGIN
  --Insert to archive when updating.
  INSERT INTO TBL_ARC_ANOM_MAIN (
    AN_ID
    ,AN_REF
    ,AN_REVNO
    ,AN_ORIG_CLASS
    ,AN_CURR_CLASS
    ,AN_TYPE
    ,AN_ORIG_AVAIL_CLASS
    ,AN_CURR_AVAIL_CLASS
    ,AN_ASSET_ID
    ,AN_DATE_IDENT
    ,AN_STATUS
    ,AN_ATTACHMENTS
   -- Details Tab
    ,AN_TITLE 
    ,AN_FNCR_REQUIRED
    ,AN_FNCR 
    ,AN_DESC 
    ,AN_LIFE_TERM
    ,AN_ACT_BY_DATE
    ,AN_ACT_PARTY 
    ,AN_MAINT_REQ
    ,AN_START_NORTH 
    ,AN_START_EAST 
    ,AN_PORTFOLIO_APPL
    ,AN_WO_REF 
    ,AN_END_NORTH 
    ,AN_END_EAST 
    ,AN_EQ_FAILURE
    ,AN_WO_STATUS 
    ,AN_ASIS
    ,AN_ASIS_STATUS
    ,AN_PT_SUPPORT
    -- Assessment Tab
    ,AN_ASSMNT 
    ,AN_RAISED_BY 
    ,AN_RAISED_DATE
    ,AN_ASS_BY 
    ,AN_ASS_DATE
    ,AN_UPD_BY 
    ,AN_UPD_DATE 
    -- Recommendation Tab
    ,AN_RECCMD 
    ,AN_TA_APPROVED
    ,AN_TA_NAME 
    ,AN_TA_APPR_DATE 
    -- Risk Tab
    ,AN_RISK_RANK_COMMENTS 
    ,AN_RISK_RANK_SEVERITY
    ,AN_RISK_RANK_LIKELIHOOD
    -- Intervention Tab
    ,ITV_DATE_MOBIL
    ,ITV_TYPE
    ,ITV_VESSEL_TYPE
    ,ITV_VESSEL_NAME 
    ,ITV_SUMMARY 
    ,ITV_TIME_PLAN_PROC
    ,ITV_AFE_COST
    ,ITV_TIME_ACTUAL
    ,ITV_AFE_SHELL_SHARE
    ,ITV_TIME_MOBIL
    ,ITV_ACTUAL_COST
    ,ITV_LEARNING 
    ,ITV_VESSEL_DAY_RATE
    ,ITV_WBS_NUMBER 
  ) SELECT  
   AN_ID
    ,AN_REF
    ,AN_REVNO
    ,AN_ORIG_CLASS
    ,AN_CURR_CLASS
    ,AN_TYPE
    ,AN_ORIG_AVAIL_CLASS
    ,AN_CURR_AVAIL_CLASS
    ,AN_ASSET_ID
    ,AN_DATE_IDENT
    ,AN_STATUS
    ,AN_ATTACHMENTS
   -- Details Tab
    ,AN_TITLE 
    ,AN_FNCR_REQUIRED
    ,AN_FNCR 
    ,AN_DESC 
    ,AN_LIFE_TERM
    ,AN_ACT_BY_DATE
    ,AN_ACT_PARTY 
    ,AN_MAINT_REQ
    ,AN_START_NORTH 
    ,AN_START_EAST 
    ,AN_PORTFOLIO_APPL
    ,AN_WO_REF 
    ,AN_END_NORTH 
    ,AN_END_EAST 
    ,AN_EQ_FAILURE
    ,AN_WO_STATUS 
    ,AN_ASIS
    ,AN_ASIS_STATUS
    ,AN_PT_SUPPORT
    -- Assessment Tab
    ,AN_ASSMNT 
    ,AN_RAISED_BY 
    ,AN_RAISED_DATE
    ,AN_ASS_BY 
    ,AN_ASS_DATE
    ,AN_UPD_BY 
    ,AN_UPD_DATE 
    -- Recommendation Tab
    ,AN_RECCMD 
    ,AN_TA_APPROVED
    ,AN_TA_NAME 
    ,AN_TA_APPR_DATE 
    -- Risk Tab
    ,AN_RISK_RANK_COMMENTS 
    ,AN_RISK_RANK_SEVERITY
    ,AN_RISK_RANK_LIKELIHOOD
    -- Intervention Tab
    ,ITV_DATE_MOBIL
    ,ITV_TYPE
    ,ITV_VESSEL_TYPE
    ,ITV_VESSEL_NAME 
    ,ITV_SUMMARY 
    ,ITV_TIME_PLAN_PROC
    ,ITV_AFE_COST
    ,ITV_TIME_ACTUAL
    ,ITV_AFE_SHELL_SHARE
    ,ITV_TIME_MOBIL
    ,ITV_ACTUAL_COST
    ,ITV_LEARNING 
    ,ITV_VESSEL_DAY_RATE
    ,ITV_WBS_NUMBER FROM TBL_ANOM_MAIN WHERE AN_ID=P_AN_ID;

  UPDATE TBL_ANOM_MAIN SET 
    AN_REF=P_AN_REF
    ,AN_REVNO=P_AN_REVNO
    ,AN_ORIG_CLASS=P_AN_ORIG_CLASS
    ,AN_CURR_CLASS=P_AN_CURR_CLASS
    ,AN_TYPE=P_AN_TYPE
    ,AN_ORIG_AVAIL_CLASS=P_AN_ORIG_AVAIL_CLASS
    ,AN_CURR_AVAIL_CLASS=P_AN_CURR_AVAIL_CLASS
    ,AN_ASSET_ID=P_AN_ASSET_ID
    ,AN_DATE_IDENT=P_AN_DATE_IDENT
    ,AN_STATUS=P_AN_STATUS
    --Details Tab
    ,AN_TITLE=P_AN_TITLE
    ,AN_FNCR_REQUIRED=P_AN_FNCR_REQUIRED
    ,AN_FNCR=P_AN_FNCR
    ,AN_DESC=P_AN_DESC
    ,AN_LIFE_TERM=P_AN_LIFE_TERM
    ,AN_ACT_BY_DATE=P_AN_ACT_BY_DATE
    ,AN_ACT_PARTY=P_AN_ACT_PARTY
    ,AN_MAINT_REQ=P_AN_MAINT_REQ
    ,AN_START_NORTH=P_AN_START_NORTH
    ,AN_START_EAST=P_AN_START_EAST
    ,AN_PORTFOLIO_APPL=P_AN_PORTFOLIO_APPL
    ,AN_WO_REF=P_AN_WO_REF
    ,AN_END_NORTH=P_AN_END_NORTH
    ,AN_END_EAST=P_AN_END_EAST
    ,AN_EQ_FAILURE=P_AN_EQ_FAILURE
    ,AN_WO_STATUS=P_AN_WO_STATUS  
    ,AN_ASIS_STATUS=P_AN_ASIS_STATUS
    ,AN_PT_SUPPORT=P_AN_PT_SUPPORT
    ,AN_ASIS=P_AN_ASIS
    -- Assessment Tab     
    ,AN_ASSMNT=P_AN_ASSMNT
    ,AN_RAISED_BY=P_AN_RAISED_BY
    ,AN_RAISED_DATE=P_AN_RAISED_DATE
    ,AN_ASS_BY=P_AN_ASS_BY
    ,AN_ASS_DATE=P_AN_ASS_DATE
    ,AN_UPD_BY=P_AN_UPD_BY
    ,AN_UPD_DATE=P_AN_UPD_DATE
    -- Recommendation Tab
    ,AN_RECCMD=P_AN_RECCMD
    ,AN_TA_APPROVED=P_AN_TA_APPROVED
    ,AN_TA_NAME=P_AN_TA_NAME
    ,AN_TA_APPR_DATE=P_AN_TA_APPR_DATE
    -- Risk Tab
    ,AN_RISK_RANK_COMMENTS=P_AN_RISK_RANK_COMMENTS
    ,AN_RISK_RANK_SEVERITY=P_AN_RISK_RANK_SEVERITY
    ,AN_RISK_RANK_LIKELIHOOD=P_AN_RISK_RANK_LIKELIHOOD
    -- Intervention Tab
    ,ITV_DATE_MOBIL=P_ITV_DATE_MOBIL
    ,ITV_TYPE=P_ITV_TYPE
    ,ITV_VESSEL_TYPE=P_ITV_VESSEL_TYPE
    ,ITV_VESSEL_NAME=P_ITV_VESSEL_NAME
    ,ITV_SUMMARY=P_ITV_SUMMARY
    ,ITV_TIME_PLAN_PROC=P_ITV_TIME_PLAN_PROC
    ,ITV_AFE_COST=P_ITV_AFE_COST
    ,ITV_TIME_ACTUAL=P_ITV_TIME_ACTUAL
    ,ITV_AFE_SHELL_SHARE=P_ITV_AFE_SHELL_SHARE
    ,ITV_TIME_MOBIL=P_ITV_TIME_MOBIL
    ,ITV_ACTUAL_COST=P_ITV_ACTUAL_COST
    ,ITV_LEARNING=P_ITV_LEARNING
    ,ITV_VESSEL_DAY_RATE=P_ITV_VESSEL_DAY_RATE
    ,ITV_WBS_NUMBER=P_ITV_WBS_NUMBER
  WHERE AN_ID=P_AN_ID;

 IF (P_AN_ASSET_CHANGED = 1) THEN 
    --One to Many anomaly to sys_nodes_attrib
    DELETE FROM LNK_AN_NODES WHERE LNK_TAG_A = P_AN_ID;

    --Convert string to array.
    DBMS_UTILITY.COMMA_TO_TABLE
      (list   => REGEXP_REPLACE(L_INPUT,'(^|,)','\1x')
      ,tablen => L_COUNT
      ,tab    => L_ARRAY
    );
    --DBMS_OUTPUT.PUT_LINE(L_COUNT);

      FOR i IN 1 .. L_COUNT LOOP
        V_AN_ASSET_ID:=SUBSTR(L_ARRAY(i),2);
        INSERT INTO LNK_AN_NODES (LNK_TAG_A,LNK_TAG_B) VALUES (P_AN_ID, V_AN_ASSET_ID);
      END LOOP;  
    END IF;

    COMMIT;

   --Record event log.
  V_EVT_LOG:=SP_INSERT_TBL_EVENT_LOG(P_AN_UPD_BY,'TBL_ANOM_MAIN', 'UPDATE SUCCESS: #' || P_AN_ID);

  RETURN P_AN_ID;
EXCEPTION
 WHEN OTHERS THEN
    ROLLBACK;
    --Record event log.
    V_EVT_LOG:=SP_INSERT_TBL_EVENT_LOG(P_AN_UPD_BY, 'TBL_ANOM_MAIN', 'UPDATE FAIL: #' || P_AN_ID || '; ERR: ' || SQLCODE || '-' || SQLERRM);
    RETURN -1;
END SP_UPDATE_TBL_ANOM_MAIN;

/
--------------------------------------------------------
--  DDL for Function SP_UPDATE_TBL_CA
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE FUNCTION "IMSA"."SP_UPDATE_TBL_CA" 
(
    P_CA_ID IN NUMBER DEFAULT NULL, 
    P_CA_REC_TAG IN NUMBER DEFAULT NULL, 
    P_CA_LAST_DATE IN DATE DEFAULT NULL, 
    P_CA_TASK_REF IN VARCHAR2 DEFAULT NULL, 
    P_CA_TASK_DESC IN VARCHAR2 DEFAULT NULL, 
    P_CA_TARGET_DATE IN DATE DEFAULT NULL, 
    P_CA_TASK_TYPE IN NUMBER DEFAULT NULL, 
    P_CA_TASK_FREQ IN NUMBER DEFAULT NULL, 
    P_CA_HRS_NEEDED IN NUMBER DEFAULT NULL, 
    P_CA_FREQ_JUST IN VARCHAR2 DEFAULT NULL, 
    P_CA_NEXT_TARGET_DATE IN DATE DEFAULT NULL, 
    P_CA_UPD_BY IN VARCHAR2 DEFAULT NULL, 
    P_CA_UPD_DATE IN DATE DEFAULT NULL, 
		
    P_CA_DEV_NEEDED IN NUMBER DEFAULT NULL, 
    P_CA_LAFD_DEV_1 IN DATE DEFAULT NULL, 
    P_CA_RSK_ASS IN VARCHAR2 DEFAULT NULL, 
    P_CA_DEV_MIT IN VARCHAR2 DEFAULT NULL, 
    P_CA_DEV_INITIATOR IN VARCHAR2 DEFAULT NULL, 
    P_CA_DEV_APPROVER IN VARCHAR2 DEFAULT NULL, 
		
    P_CA_LAFD_DEV_NEEDED IN NUMBER DEFAULT NULL, 
    P_CA_LAFD_DEV_2 IN DATE DEFAULT NULL, 
    P_CA_LAFD_RSK_ASS IN VARCHAR2 DEFAULT NULL, 
    P_CA_LAFD_MIT IN VARCHAR2 DEFAULT NULL, 
    P_CA_LAFD_DEV_INITIATOR IN VARCHAR2 DEFAULT NULL, 
    P_CA_LAFD_DEV_APPROVER IN VARCHAR2 DEFAULT NULL, 
    P_CA_SCE IN NUMBER DEFAULT NULL, 
    P_DAT_TYPE IN NUMBER DEFAULT 1, 
    P_COLOR_MODE IN VARCHAR2 DEFAULT 'ACTION_COLOR',
    P_USER IN VARCHAR2 DEFAULT 'IMSA ADMIN'
) RETURN NUMBER AS 
  V_EVT_LOG NUMBER;
BEGIN
  UPDATE TBL_CA SET  
    CA_REC_TAG = P_CA_REC_TAG,
    CA_LAST_DATE = P_CA_LAST_DATE,
    CA_TASK_REF = P_CA_TASK_REF,
    CA_TASK_DESC = P_CA_TASK_DESC,
    CA_TARGET_DATE = P_CA_TARGET_DATE,
    CA_TASK_TYPE = P_CA_TASK_TYPE,
    CA_TASK_FREQ = P_CA_TASK_FREQ,
    CA_HRS_NEEDED = P_CA_HRS_NEEDED,
    CA_FREQ_JUST = P_CA_FREQ_JUST, 
    CA_NEXT_TARGET_DATE = P_CA_NEXT_TARGET_DATE, 
    CA_UPD_BY = P_CA_UPD_BY,
    CA_UPD_DATE = P_CA_UPD_DATE,
    CA_SCE = P_CA_SCE,

    CA_DEV_NEEDED = P_CA_DEV_NEEDED,
    CA_LAFD_DEV_1 = P_CA_LAFD_DEV_1,
    CA_RSK_ASS = P_CA_RSK_ASS,
    CA_DEV_MIT = P_CA_DEV_MIT,
    CA_DEV_INITIATOR = P_CA_DEV_INITIATOR,
    CA_DEV_APPROVER = P_CA_DEV_APPROVER,

    CA_LAFD_DEV_NEEDED = P_CA_LAFD_DEV_NEEDED,
    CA_LAFD_DEV_2 = P_CA_LAFD_DEV_2,
    CA_LAFD_RSK_ASS = P_CA_LAFD_RSK_ASS,
    CA_LAFD_MIT = P_CA_LAFD_MIT,
    CA_LAFD_DEV_INITIATOR = P_CA_LAFD_DEV_INITIATOR,
    CA_LAFD_DEV_APPROVER = P_CA_LAFD_DEV_APPROVER 
    WHERE CA_ID = P_CA_ID;

  COMMIT;

  V_EVT_LOG:=SP_INSERT_TBL_EVENT_LOG(P_USER,'TBL_CA','UPDATE SUCCESS: #' || P_CA_ID);
  RETURN P_CA_ID;
EXCEPTION
  WHEN OTHERS THEN
    ROLLBACK;
    V_EVT_LOG:=SP_INSERT_TBL_EVENT_LOG(P_USER,'TBL_CA','UPDATE FAIL: #' || P_CA_ID || '; ERR: ' || SQLCODE || '-' || SQLERRM);
    RETURN -1;
END SP_UPDATE_TBL_CA;

/
--------------------------------------------------------
--  DDL for Function SP_UPDATE_TBL_CHD_HEADER
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE FUNCTION "IMSA"."SP_UPDATE_TBL_CHD_HEADER" 
(
  P_MODULE IN  VARCHAR2 DEFAULT 'FS'
  , P_CHD_HDR_ID IN NUMBER DEFAULT NULL
  , P_CHD_HDR_ASSET_ID IN NUMBER DEFAULT NULL
  , P_CHD_HDR_SAMP_DATE IN DATE DEFAULT NULL
  , P_CHD_HDR_ANA_VEND IN NUMBER DEFAULT NULL
  , P_CHD_HDR_STATUS IN NUMBER DEFAULT NULL
  , P_CHD_HDR_COMMENTS IN VARCHAR2 DEFAULT NULL
  , P_DAT_TYPE IN NUMBER DEFAULT 1
  , P_COLOR_MODE IN VARCHAR2 DEFAULT 'ACTION_COLOR'
  , P_USER IN VARCHAR2 DEFAULT 'IMSA ADMIN'
)
  RETURN NUMBER AS 
  V_EVT_LOG NUMBER;
BEGIN
    UPDATE TBL_CHD_HEADER SET
      CHD_HDR_ASSET_ID=P_CHD_HDR_ASSET_ID
      , CHD_HDR_SAMP_DATE=P_CHD_HDR_SAMP_DATE
      , CHD_HDR_ANA_VEND=P_CHD_HDR_ANA_VEND
      , CHD_HDR_STATUS=P_CHD_HDR_STATUS
      , CHD_HDR_COMMENTS=P_CHD_HDR_COMMENTS
    WHERE CHD_HDR_ID=P_CHD_HDR_ID; 

  COMMIT;
  V_EVT_LOG:=SP_INSERT_TBL_EVENT_LOG(P_USER,'TBL_CHD_HEADER','UPDATE SUCCESS: #' || P_CHD_HDR_ID);

  RETURN P_CHD_HDR_ID;
EXCEPTION
 WHEN OTHERS THEN
    ROLLBACK;
    V_EVT_LOG:=SP_INSERT_TBL_EVENT_LOG(P_USER,'TBL_CHD_HEADER','UPDATE FAIL: #' || P_CHD_HDR_ID || '; ERR: ' || SQLCODE || '-' || SQLERRM);
    RETURN -1;
END SP_UPDATE_TBL_CHD_HEADER;

/
--------------------------------------------------------
--  DDL for Function SP_UPDATE_TBL_DESIGN_DATA_KP
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE FUNCTION "IMSA"."SP_UPDATE_TBL_DESIGN_DATA_KP" 
(
  P_DD_KP_PARAM_ID IN NUMBER  DEFAULT NULL
, P_DD_PARAM_ID IN NUMBER  DEFAULT NULL
, P_DD_KP_START IN NUMBER  DEFAULT NULL
, P_DD_KP_END IN NUMBER  DEFAULT NULL
, P_DD_KP_PARAM_VALUE IN NUMBER DEFAULT NULL
, P_USER IN VARCHAR2 DEFAULT 'IMSA ADMIN'
) RETURN NUMBER AS 
  V_EVT_LOG NUMBER;
BEGIN
  UPDATE TBL_DESIGN_DATA_KP 
  SET DD_PARAM_ID = P_DD_PARAM_ID
  , DD_KP_START = P_DD_KP_START
  , DD_KP_END = P_DD_KP_END
  , DD_KP_PARAM_VALUE = P_DD_KP_PARAM_VALUE
  WHERE DD_KP_PARAM_ID = P_DD_KP_PARAM_ID;
  COMMIT;

  V_EVT_LOG:=SP_INSERT_TBL_EVENT_LOG(P_USER,'TBL_DESIGN_DATA_KP','UPDATE SUCCESS: #' || P_DD_KP_PARAM_ID);
  RETURN P_DD_KP_PARAM_ID;
EXCEPTION
  WHEN OTHERS THEN
    ROLLBACK;
  V_EVT_LOG:=SP_INSERT_TBL_EVENT_LOG(P_USER,'TBL_DESIGN_DATA_KP','UPDATE FAIL: #' || P_DD_KP_PARAM_ID || '; ERR: ' || SQLCODE || '-' || SQLERRM);
    RETURN -1;
END SP_UPDATE_TBL_DESIGN_DATA_KP;

/
--------------------------------------------------------
--  DDL for Function SP_UPDATE_TBL_DESIGN_DATA_MAIN
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE FUNCTION "IMSA"."SP_UPDATE_TBL_DESIGN_DATA_MAIN" 
(
  P_DD_ID IN NUMBER DEFAULT NULL
, P_DD_ASSET IN NUMBER DEFAULT NULL
, P_DD_PARAM IN NUMBER DEFAULT NULL
, P_DD_PARAM_VALUE IN VARCHAR2 DEFAULT NULL
, P_DD_PARAM_UNIT IN NUMBER DEFAULT NULL
, P_DD_PARAM_NOTES IN VARCHAR2 DEFAULT NULL
, P_DD_PARAM_REF IN VARCHAR2 DEFAULT NULL
, P_DD_UPDATE_DATE IN DATE DEFAULT NULL
, P_DAT_TYPE IN NUMBER DEFAULT 1
, P_COLOR_MODE IN VARCHAR2 DEFAULT 'ACTION_COLOR'
, P_USER IN VARCHAR2 DEFAULT 'IMSA ADMIN'
) RETURN NUMBER AS 
  V_EVT_LOG NUMBER;
BEGIN
  UPDATE TBL_DESIGN_DATA_MAIN 
  SET DD_ASSET = P_DD_ASSET
  , DD_PARAM = P_DD_PARAM 
  , DD_PARAM_VALUE = P_DD_PARAM_VALUE
  , DD_PARAM_UNIT = P_DD_PARAM_UNIT 
  , DD_PARAM_NOTES = P_DD_PARAM_NOTES
  , DD_PARAM_REF = P_DD_PARAM_REF
  , DD_UPDATE_DATE = P_DD_UPDATE_DATE 
  WHERE DD_ID = P_DD_ID;

  UPDATE TBL_DESIGN_DATA_KP SET DD_KP_PARAM_UNIT=P_DD_PARAM_UNIT WHERE DD_PARAM_ID=P_DD_ID;

  COMMIT;

  V_EVT_LOG:=SP_INSERT_TBL_EVENT_LOG(P_USER,'TBL_DESIGN_DATA_MAIN','UPDATE SUCCESS: #' || P_DD_ID);
  RETURN P_DD_ID;
EXCEPTION
  WHEN OTHERS THEN
    ROLLBACK;
    V_EVT_LOG:=SP_INSERT_TBL_EVENT_LOG(P_USER,'TBL_DESIGN_DATA_MAIN','UPDATE FAIL: #' || P_DD_ID || '; ERR: ' || SQLCODE || '-' || SQLERRM);
    RETURN -1;
END SP_UPDATE_TBL_DESIGN_DATA_MAIN;

/
--------------------------------------------------------
--  DDL for Function SP_UPDATE_TBL_RBI_CB
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE FUNCTION "IMSA"."SP_UPDATE_TBL_RBI_CB" 
(
  P_RBI_CB_ID IN NUMBER DEFAULT NULL
, P_RBI_CB_NAME IN VARCHAR2 DEFAULT NULL
, P_USER IN VARCHAR2 DEFAULT 'IMSA ADMIN'
) RETURN NUMBER AS 
  V_EVT_LOG NUMBER;
BEGIN
  UPDATE TBL_RBI_CB 
  SET RBI_CB_NAME = P_RBI_CB_NAME
  WHERE RBI_CB_ID = P_RBI_CB_ID;

  COMMIT;

 --Record event log.
  V_EVT_LOG:=SP_INSERT_TBL_EVENT_LOG(P_USER,'TBL_RBI_CB', 'UPDATE SUCCESS: #' || P_RBI_CB_ID);

  RETURN P_RBI_CB_ID;
EXCEPTION
 WHEN OTHERS THEN
    ROLLBACK;
    --Record event log.
    V_EVT_LOG:=SP_INSERT_TBL_EVENT_LOG(P_USER, 'TBL_RBI_CB', 'UPDATE FAIL: #' || P_RBI_CB_ID || '; ERR: ' || SQLCODE || '-' || SQLERRM);
    RETURN -1;
END SP_UPDATE_TBL_RBI_CB;

/
--------------------------------------------------------
--  DDL for Function SP_UPDATE_TBL_RBI_CB_POF
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE FUNCTION "IMSA"."SP_UPDATE_TBL_RBI_CB_POF" 
(
  P_RBI_CB_POF_ID IN VARCHAR2 DEFAULT NULL,
  P_RBI_CB_POF_PLACED IN NUMBER DEFAULT NULL,
  P_RBI_CB_POF_CONFIRMED IN NUMBER DEFAULT NULL,
  P_RBI_CB_POF_NOTES IN VARCHAR2 DEFAULT NULL,
  P_RBI_CB_POF_LAST_CONFIRMED IN DATE DEFAULT NULL,
  P_RBI_CB_POF_CONFIRMED_BY IN VARCHAR2 DEFAULT NULL
) RETURN NUMBER AS 
  V_EVT_LOG NUMBER;
  BEGIN

  UPDATE TBL_RBI_CB_POF SET 
    RBI_CB_POF_PLACED=P_RBI_CB_POF_PLACED,
    RBI_CB_POF_CONFIRMED=P_RBI_CB_POF_CONFIRMED,
    RBI_CB_POF_NOTES= RBI_CB_POF_NOTES || CHR(10) || P_RBI_CB_POF_NOTES,
    RBI_CB_POF_LAST_CONFIRMED=P_RBI_CB_POF_LAST_CONFIRMED,
    RBI_CB_POF_CONFIRMED_BY=P_RBI_CB_POF_CONFIRMED_BY
  WHERE RBI_CB_POF_ID IN (
    (SELECT REGEXP_SUBSTR(P_RBI_CB_POF_ID,'[^,]+{1}',1,LEVEL) FROM DUAL CONNECT BY LEVEL <= LENGTH(REGEXP_REPLACE(P_RBI_CB_POF_ID,'[^,]*')) + 1)
  );

  COMMIT;
  V_EVT_LOG:=SP_INSERT_TBL_EVENT_LOG(P_RBI_CB_POF_CONFIRMED_BY,'TBL_RBI_CB_POF','UPDATE SUCCESS: #' || P_RBI_CB_POF_ID);

  RETURN 1;
EXCEPTION
  WHEN OTHERS THEN
  DBMS_OUTPUT.PUT_LINE (SQLCODE || '-' || SQLERRM);
  ROLLBACK;
    V_EVT_LOG:=SP_INSERT_TBL_EVENT_LOG(P_RBI_CB_POF_CONFIRMED_BY,'TBL_RBI_CB_POF','UPDATE FAIL: #' || P_RBI_CB_POF_ID || '; ERR: ' || SQLCODE || '-' || SQLERRM);
    RETURN -1;
END SP_UPDATE_TBL_RBI_CB_POF;

/
--------------------------------------------------------
--  DDL for Function SP_UPDATE_TBL_RBI_COF
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE FUNCTION "IMSA"."SP_UPDATE_TBL_RBI_COF" 
(
  P_RBI_COF_ID IN VARCHAR2 DEFAULT NULL,
  P_RBI_COF_OVERALL IN NUMBER DEFAULT NULL,
  P_RBI_COF_HEALTH IN NUMBER DEFAULT NULL,
  P_RBI_COF_SAFETY IN NUMBER DEFAULT NULL,
  P_RBI_COF_ENV IN NUMBER DEFAULT NULL,
  P_RBI_COF_ASSETS IN NUMBER DEFAULT NULL,
  P_RBI_COF_REP IN NUMBER DEFAULT NULL,
  P_RBI_COF_COF_NOTES IN VARCHAR2 DEFAULT NULL,
  P_RBI_COF_NODE_HAZ_REF IN VARCHAR2 DEFAULT NULL,
  P_RBI_COF_SCE IN NUMBER DEFAULT NULL,
  P_RBI_COF_CE IN NUMBER DEFAULT NULL,
  P_RBI_COF_SGS IN NUMBER DEFAULT NULL,
  P_RBI_COF_UPDATE_BY IN VARCHAR2 DEFAULT NULL,
  P_RBI_COF_UPDATE_DATE IN DATE DEFAULT NULL 
) RETURN NUMBER AS 
  V_EVT_LOG NUMBER;

BEGIN
  IF (P_RBI_COF_NODE_HAZ_REF = 'MULTIPLE RECORDS SELECTED') THEN --IF MULTIPLE RECORD SELECTED, THEN UPDATE SELECTED CELLS ONLY
    UPDATE TBL_RBI_COF SET 
      RBI_COF_OVERALL=P_RBI_COF_OVERALL,
      RBI_COF_HEALTH=P_RBI_COF_HEALTH,
      RBI_COF_SAFETY=P_RBI_COF_SAFETY,
      RBI_COF_ENV=P_RBI_COF_ENV,
      RBI_COF_ASSETS=P_RBI_COF_ASSETS,
      RBI_COF_REP=P_RBI_COF_REP,
      RBI_COF_COF_NOTES=RBI_COF_COF_NOTES || CHR(10) || P_RBI_COF_COF_NOTES,
      RBI_COF_SCE=P_RBI_COF_SCE,
      RBI_COF_CE=P_RBI_COF_CE,
      RBI_COF_SGS=P_RBI_COF_SGS, 
      RBI_COF_UPDATE_DATE=P_RBI_COF_UPDATE_DATE,
      RBI_COF_UPDATE_BY=P_RBI_COF_UPDATE_BY
    WHERE RBI_COF_ID IN (
      --SELECT REGEXP_SUBSTR('53','[^,]+{1}',1,LEVEL) FROM DUAL CONNECT BY LEVEL <= LENGTH(REGEXP_REPLACE('53','[^,]*')) + 1
      (SELECT REGEXP_SUBSTR(P_RBI_COF_ID,'[^,]+{1}',1,LEVEL) FROM DUAL CONNECT BY LEVEL <= LENGTH(REGEXP_REPLACE(P_RBI_COF_ID,'[^,]*')) + 1)
    );
  ELSE 
    UPDATE TBL_RBI_COF SET 
      RBI_COF_OVERALL=P_RBI_COF_OVERALL,
      RBI_COF_HEALTH=P_RBI_COF_HEALTH,
      RBI_COF_SAFETY=P_RBI_COF_SAFETY,
      RBI_COF_ENV=P_RBI_COF_ENV,
      RBI_COF_ASSETS=P_RBI_COF_ASSETS,
      RBI_COF_REP=P_RBI_COF_REP,
      RBI_COF_COF_NOTES=RBI_COF_COF_NOTES || CHR(10) || P_RBI_COF_COF_NOTES,
      RBI_COF_NODE_HAZ_REF=P_RBI_COF_NODE_HAZ_REF,
      RBI_COF_SCE=P_RBI_COF_SCE,
      RBI_COF_CE=P_RBI_COF_CE,
      RBI_COF_SGS=P_RBI_COF_SGS, 
      RBI_COF_UPDATE_DATE=P_RBI_COF_UPDATE_DATE,
      RBI_COF_UPDATE_BY=P_RBI_COF_UPDATE_BY
    WHERE RBI_COF_ID IN (
      --SELECT REGEXP_SUBSTR('53','[^,]+{1}',1,LEVEL) FROM DUAL CONNECT BY LEVEL <= LENGTH(REGEXP_REPLACE('53','[^,]*')) + 1
      (SELECT REGEXP_SUBSTR(P_RBI_COF_ID,'[^,]+{1}',1,LEVEL) FROM DUAL CONNECT BY LEVEL <= LENGTH(REGEXP_REPLACE(P_RBI_COF_ID,'[^,]*')) + 1)
    );
  END IF;

    UPDATE SYS_NODES_ATTRIB SET SCE = P_RBI_COF_SCE, REC_UPDATED=P_RBI_COF_UPDATE_DATE WHERE REC_TAG IN (SELECT RBI_COF_NODE_ID FROM TBL_RBI_COF WHERE RBI_COF_ID IN (
      (SELECT REGEXP_SUBSTR(P_RBI_COF_ID,'[^,]+{1}',1,LEVEL) FROM DUAL CONNECT BY LEVEL <= LENGTH(REGEXP_REPLACE(P_RBI_COF_ID,'[^,]*')) + 1)));
    UPDATE SYS_NODES_ATTRIB SET CE = P_RBI_COF_CE, REC_UPDATED=P_RBI_COF_UPDATE_DATE WHERE REC_TAG IN (SELECT RBI_COF_NODE_ID FROM TBL_RBI_COF WHERE RBI_COF_ID IN (
      (SELECT REGEXP_SUBSTR(P_RBI_COF_ID,'[^,]+{1}',1,LEVEL) FROM DUAL CONNECT BY LEVEL <= LENGTH(REGEXP_REPLACE(P_RBI_COF_ID,'[^,]*')) + 1)));
    UPDATE SYS_NODES_ATTRIB SET SGS = P_RBI_COF_SGS, REC_UPDATED=P_RBI_COF_UPDATE_DATE WHERE REC_TAG IN (SELECT RBI_COF_NODE_ID FROM TBL_RBI_COF WHERE RBI_COF_ID IN (
      (SELECT REGEXP_SUBSTR(P_RBI_COF_ID,'[^,]+{1}',1,LEVEL) FROM DUAL CONNECT BY LEVEL <= LENGTH(REGEXP_REPLACE(P_RBI_COF_ID,'[^,]*')) + 1)));

  COMMIT;
  V_EVT_LOG:=SP_INSERT_TBL_EVENT_LOG(P_RBI_COF_UPDATE_BY,'TBL_RBI_COF','UPDATE SUCCESS: #' || P_RBI_COF_ID);

  RETURN 1;
EXCEPTION
  WHEN OTHERS THEN
    ROLLBACK;
    V_EVT_LOG:=SP_INSERT_TBL_EVENT_LOG(P_RBI_COF_UPDATE_BY,'TBL_RBI_COF','UPDATE FAIL: #' || P_RBI_COF_ID || '; ERR: ' || SQLCODE || '-' || SQLERRM);
    RETURN -1;
END SP_UPDATE_TBL_RBI_COF;

/
--------------------------------------------------------
--  DDL for Function SP_UPDATE_TBL_RBI_CONF
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE FUNCTION "IMSA"."SP_UPDATE_TBL_RBI_CONF" 
(
  P_RBI_POF_ID IN VARCHAR2 DEFAULT '932',
  P_RBI_POF_CONF_COMMENT IN VARCHAR2 DEFAULT 'testUPDT: SOGA Tech-07-Jul-2017 16:45:54',
  P_RBI_POF_CONF_STATUS IN NUMBER DEFAULT 14022,
  P_RBI_POF_CONF_PREV_INS IN NUMBER DEFAULT NULL,
  P_RBI_POF_CONF_BY IN VARCHAR2 DEFAULT 'SOGA Tech', 
  P_RBI_POF_CONF_DATE IN DATE DEFAULT NULL
) RETURN NUMBER AS 
  V_EVT_LOG NUMBER;
  BEGIN

  IF (P_RBI_POF_CONF_PREV_INS = -1) THEN --IF MULTIPLE RECORD SELECTED, THEN UPDATE SELECTED CELLS ONLY
    UPDATE TBL_RBI_POF SET 
      RBI_POF_CONF_COMMENT= RBI_POF_CONF_COMMENT || CHR(10) || P_RBI_POF_CONF_COMMENT,
      RBI_POF_CONF_STATUS=P_RBI_POF_CONF_STATUS,
      RBI_POF_CONF_BY=P_RBI_POF_CONF_BY, 
      RBI_POF_CONF_DATE=P_RBI_POF_CONF_DATE
    WHERE RBI_POF_ID IN (
      --SELECT REGEXP_SUBSTR('53','[^,]+{1}',1,LEVEL) FROM DUAL CONNECT BY LEVEL <= LENGTH(REGEXP_REPLACE('53','[^,]*')) + 1
      (SELECT REGEXP_SUBSTR(P_RBI_POF_ID,'[^,]+{1}',1,LEVEL) FROM DUAL CONNECT BY LEVEL <= LENGTH(REGEXP_REPLACE(P_RBI_POF_ID,'[^,]*')) + 1)
    );
  ELSE
  dbms_output.put_line('UPDATE TBL_RBI_POF SET 
      RBI_POF_CONF_COMMENT= RBI_POF_CONF_COMMENT || CHR(10) || P_RBI_POF_CONF_COMMENT,
      RBI_POF_CONF_STATUS=P_RBI_POF_CONF_STATUS,
      RBI_POF_CONF_PREV_INS=P_RBI_POF_CONF_PREV_INS,
      RBI_POF_CONF_BY=P_RBI_POF_CONF_BY, 
      RBI_POF_CONF_DATE=P_RBI_POF_CONF_DATE
    WHERE RBI_POF_ID IN (
      --SELECT REGEXP_SUBSTR(''53'',''[^,]+{1}'',1,LEVEL) FROM DUAL CONNECT BY LEVEL <= LENGTH(REGEXP_REPLACE(''53'',''[^,]*'')) + 1
      (SELECT REGEXP_SUBSTR(P_RBI_POF_ID,''[^,]+{1}'',1,LEVEL) FROM DUAL CONNECT BY LEVEL <= LENGTH(REGEXP_REPLACE(P_RBI_POF_ID,''[^,]*'')) + 1)
    );');
    UPDATE TBL_RBI_POF SET 
      RBI_POF_CONF_COMMENT= RBI_POF_CONF_COMMENT || CHR(10) || P_RBI_POF_CONF_COMMENT,
      RBI_POF_CONF_STATUS=P_RBI_POF_CONF_STATUS,
      RBI_POF_CONF_PREV_INS=P_RBI_POF_CONF_PREV_INS,
      RBI_POF_CONF_BY=P_RBI_POF_CONF_BY, 
      RBI_POF_CONF_DATE=P_RBI_POF_CONF_DATE
    WHERE RBI_POF_ID IN (
      --SELECT REGEXP_SUBSTR('53','[^,]+{1}',1,LEVEL) FROM DUAL CONNECT BY LEVEL <= LENGTH(REGEXP_REPLACE('53','[^,]*')) + 1
      (SELECT REGEXP_SUBSTR(P_RBI_POF_ID,'[^,]+{1}',1,LEVEL) FROM DUAL CONNECT BY LEVEL <= LENGTH(REGEXP_REPLACE(P_RBI_POF_ID,'[^,]*')) + 1)
    );
  END IF;

  COMMIT;
  V_EVT_LOG:=SP_INSERT_TBL_EVENT_LOG(P_RBI_POF_CONF_BY,'TBL_RBI_POF','UPDATE SUCCESS: #' || P_RBI_POF_ID);

  RETURN 1;
EXCEPTION
  WHEN OTHERS THEN
    ROLLBACK;
    V_EVT_LOG:=SP_INSERT_TBL_EVENT_LOG(P_RBI_POF_CONF_BY,'TBL_RBI_POF','UPDATE FAIL: #' || P_RBI_POF_ID || '; ERR: ' || SQLCODE || '-' || SQLERRM);
    dbms_output.put_line('xx');
    RETURN -1;
END SP_UPDATE_TBL_RBI_CONF;

/
--------------------------------------------------------
--  DDL for Function SP_UPDATE_TBL_RBI_MIT
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE FUNCTION "IMSA"."SP_UPDATE_TBL_RBI_MIT" 
(
  P_RBI_MIT_ID IN NUMBER DEFAULT NULL
, P_RBI_MIT_CODE IN VARCHAR2 DEFAULT NULL
, P_RBI_MIT_DESC IN VARCHAR2 DEFAULT NULL
, P_RBI_MIT_TYPE_ID IN NUMBER DEFAULT NULL
, P_USER IN VARCHAR2 DEFAULT 'IMSA ADMIN'
) RETURN NUMBER AS 
  V_EVT_LOG NUMBER;
BEGIN
  UPDATE TBL_RBI_MIT 
  SET RBI_MIT_CODE = P_RBI_MIT_CODE,
  RBI_MIT_DESC = P_RBI_MIT_DESC,
  RBI_MIT_TYPE_ID = P_RBI_MIT_TYPE_ID
  WHERE RBI_MIT_ID = P_RBI_MIT_ID;

  COMMIT;
--Record event log.
  V_EVT_LOG:=SP_INSERT_TBL_EVENT_LOG(P_USER,'TBL_RBI_MIT', 'UPDATE SUCCESS: #' || P_RBI_MIT_ID);

  RETURN P_RBI_MIT_ID;
EXCEPTION
 WHEN OTHERS THEN
    ROLLBACK;
    --Record event log.
    V_EVT_LOG:=SP_INSERT_TBL_EVENT_LOG(P_USER, 'TBL_RBI_MIT', 'UPDATE FAIL: #' || P_RBI_MIT_ID || '; ERR: ' || SQLCODE || '-' || SQLERRM);
    RETURN -1;
END SP_UPDATE_TBL_RBI_MIT;

/
--------------------------------------------------------
--  DDL for Function SP_UPDATE_TBL_RBI_MIT_POF
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE FUNCTION "IMSA"."SP_UPDATE_TBL_RBI_MIT_POF" 
(
  P_RBI_MIT_POF_ID IN VARCHAR2 DEFAULT NULL,
  P_RBI_MIT_POF_FRT_ID IN NUMBER DEFAULT NULL,
  P_RBI_MIT_POF_TBI IN NUMBER DEFAULT NULL,
  P_RBI_MIT_POF_L_INS IN DATE DEFAULT NULL,
  P_RBI_MIT_POF_UPD_BY IN VARCHAR2 DEFAULT NULL,
  P_RBI_MIT_POF_UPD_DATE IN DATE DEFAULT NULL
) RETURN NUMBER AS 
  V_EVT_LOG NUMBER;
  BEGIN

  IF (REGEXP_COUNT(P_RBI_MIT_POF_ID, ',') > 0) THEN --IF MULTIPLE RECORD SELECTED, THEN UPDATE SELECTED CELLS ONLY
    UPDATE TBL_RBI_MIT_POF SET 
      RBI_MIT_POF_FRT_ID=P_RBI_MIT_POF_FRT_ID,
      RBI_MIT_POF_TBI=P_RBI_MIT_POF_TBI,
      RBI_MIT_POF_L_INS=P_RBI_MIT_POF_L_INS,
      RBI_MIT_POF_UPD_BY=P_RBI_MIT_POF_UPD_BY,
      RBI_MIT_POF_UPD_DATE=P_RBI_MIT_POF_UPD_DATE
    WHERE RBI_MIT_POF_ID IN (
      (SELECT REGEXP_SUBSTR(P_RBI_MIT_POF_ID,'[^,]+{1}',1,LEVEL) FROM DUAL CONNECT BY LEVEL <= LENGTH(REGEXP_REPLACE(P_RBI_MIT_POF_ID,'[^,]*')) + 1)
    );
  ELSE
    UPDATE TBL_RBI_MIT_POF SET 
      RBI_MIT_POF_FRT_ID=P_RBI_MIT_POF_FRT_ID,
      RBI_MIT_POF_TBI=P_RBI_MIT_POF_TBI,
      RBI_MIT_POF_L_INS=P_RBI_MIT_POF_L_INS,
      RBI_MIT_POF_UPD_BY=P_RBI_MIT_POF_UPD_BY,
      RBI_MIT_POF_UPD_DATE=P_RBI_MIT_POF_UPD_DATE
    WHERE RBI_MIT_POF_ID IN (
      (SELECT REGEXP_SUBSTR(P_RBI_MIT_POF_ID,'[^,]+{1}',1,LEVEL) FROM DUAL CONNECT BY LEVEL <= LENGTH(REGEXP_REPLACE(P_RBI_MIT_POF_ID,'[^,]*')) + 1)
    );
  END IF;

  COMMIT;
  V_EVT_LOG:=SP_INSERT_TBL_EVENT_LOG(P_RBI_MIT_POF_UPD_BY,'TBL_RBI_MIT_POF','UPDATE SUCCESS: #' || P_RBI_MIT_POF_ID);

  RETURN 1;
EXCEPTION
  WHEN OTHERS THEN
    ROLLBACK;
    V_EVT_LOG:=SP_INSERT_TBL_EVENT_LOG(P_RBI_MIT_POF_UPD_BY,'TBL_RBI_MIT_POF','UPDATE FAIL: #' || P_RBI_MIT_POF_ID || '; ERR: ' || SQLCODE || '-' || SQLERRM);
    RETURN -1;
END SP_UPDATE_TBL_RBI_MIT_POF;

/
--------------------------------------------------------
--  DDL for Function SP_UPDATE_TBL_RBI_POF
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE FUNCTION "IMSA"."SP_UPDATE_TBL_RBI_POF" 
(
  P_RBI_POF_ID IN VARCHAR2 DEFAULT NULL,
  P_RBI_POF_NPOF IN NUMBER DEFAULT NULL,
  P_RBI_POF_ARL_YEARS IN NUMBER DEFAULT NULL,
  P_RBI_POF_AN_CNT IN NUMBER DEFAULT NULL,
  P_RBI_POF_POF_NOTES IN VARCHAR2 DEFAULT NULL,
  P_RBI_POF_ASS_BY IN VARCHAR2 DEFAULT NULL, 
  P_RBI_POF_ASS_DATE IN DATE DEFAULT NULL
) RETURN NUMBER AS 
  V_EVT_LOG NUMBER;
  BEGIN

  IF (P_RBI_POF_ARL_YEARS = -1) THEN --IF MULTIPLE RECORD SELECTED, THEN UPDATE SELECTED CELLS ONLY
    UPDATE TBL_RBI_POF SET 
      RBI_POF_NPOF=P_RBI_POF_NPOF,
      RBI_POF_POF_NOTES= RBI_POF_POF_NOTES || CHR(10) || P_RBI_POF_POF_NOTES,
      RBI_POF_ASS_BY=P_RBI_POF_ASS_BY,
      RBI_POF_ASS_DATE=P_RBI_POF_ASS_DATE
    WHERE RBI_POF_ID IN (
      --SELECT REGEXP_SUBSTR('53','[^,]+{1}',1,LEVEL) FROM DUAL CONNECT BY LEVEL <= LENGTH(REGEXP_REPLACE('53','[^,]*')) + 1
      (SELECT REGEXP_SUBSTR(P_RBI_POF_ID,'[^,]+{1}',1,LEVEL) FROM DUAL CONNECT BY LEVEL <= LENGTH(REGEXP_REPLACE(P_RBI_POF_ID,'[^,]*')) + 1)
    );
  ELSE 
    UPDATE TBL_RBI_POF SET 
      RBI_POF_NPOF=P_RBI_POF_NPOF,
      RBI_POF_ARL_YEARS=P_RBI_POF_ARL_YEARS,
      RBI_POF_AN_CNT=P_RBI_POF_AN_CNT,
      RBI_POF_POF_NOTES= RBI_POF_POF_NOTES || CHR(10) || P_RBI_POF_POF_NOTES,
      RBI_POF_ASS_BY=P_RBI_POF_ASS_BY,
      RBI_POF_ASS_DATE=P_RBI_POF_ASS_DATE
    WHERE RBI_POF_ID IN (
      --SELECT REGEXP_SUBSTR('53','[^,]+{1}',1,LEVEL) FROM DUAL CONNECT BY LEVEL <= LENGTH(REGEXP_REPLACE('53','[^,]*')) + 1
      (SELECT REGEXP_SUBSTR(P_RBI_POF_ID,'[^,]+{1}',1,LEVEL) FROM DUAL CONNECT BY LEVEL <= LENGTH(REGEXP_REPLACE(P_RBI_POF_ID,'[^,]*')) + 1)
    );
  END IF;
  COMMIT;
  V_EVT_LOG:=SP_INSERT_TBL_EVENT_LOG(P_RBI_POF_ASS_BY,'TBL_RBI_POF','UPDATE SUCCESS: #' || P_RBI_POF_ID);
DBMS_OUTPUT.PUT_LINE('test');
  RETURN 1;
EXCEPTION
  WHEN OTHERS THEN
    DBMS_OUTPUT.PUT_LINE (SQLCODE || '-' || SQLERRM);

  ROLLBACK;
    V_EVT_LOG:=SP_INSERT_TBL_EVENT_LOG(P_RBI_POF_ASS_BY,'TBL_RBI_POF','UPDATE FAIL: #' || P_RBI_POF_ID || '; ERR: ' || SQLCODE || '-' || SQLERRM);
    RETURN -1;
END SP_UPDATE_TBL_RBI_POF;

/
--------------------------------------------------------
--  DDL for Function SP_UPDATE_TBL_RBI_POF_GUIDE
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE FUNCTION "IMSA"."SP_UPDATE_TBL_RBI_POF_GUIDE" 
(
  P_RBI_POF_FT_ID IN NUMBER DEFAULT NULL,
  P_RBI_POF_MIN_POF IN VARCHAR2 DEFAULT NULL,
  P_RBI_POF_NPOF_A IN VARCHAR2 DEFAULT NULL,
  P_RBI_POF_NPOF_B IN VARCHAR2 DEFAULT NULL,
  P_RBI_POF_NPOF_C IN VARCHAR2 DEFAULT NULL, 
  P_RBI_POF_NPOF_D IN VARCHAR2 DEFAULT NULL, 
  P_RBI_POF_NPOF_E IN VARCHAR2 DEFAULT NULL
) RETURN NUMBER AS 
  V_EVT_LOG NUMBER;
  BEGIN

  UPDATE TBL_RBI_POF SET 
    RBI_POF_MIN_POF=P_RBI_POF_MIN_POF,
    RBI_POF_NPOF_A=P_RBI_POF_NPOF_A,
    RBI_POF_NPOF_B=P_RBI_POF_NPOF_B,
    RBI_POF_NPOF_C=P_RBI_POF_NPOF_C,
    RBI_POF_NPOF_D=P_RBI_POF_NPOF_D,
    RBI_POF_NPOF_E=P_RBI_POF_NPOF_E 
  WHERE RBI_POF_FT_ID = P_RBI_POF_FT_ID;

   COMMIT;

  RETURN 1;
EXCEPTION
  WHEN OTHERS THEN
    ROLLBACK;
    RETURN -1;
END SP_UPDATE_TBL_RBI_POF_GUIDE;

/
--------------------------------------------------------
--  DDL for Function SP_UPDATE_TBL_REFERENCE_FILES
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE FUNCTION "IMSA"."SP_UPDATE_TBL_REFERENCE_FILES" 
(
  P_RF_ID IN NUMBER DEFAULT -1
  ,P_RF_DESC IN VARCHAR2 DEFAULT NULL
  ,P_RF_TYPE IN NUMBER DEFAULT NULL
  ,P_RF_CLASS IN NUMBER DEFAULT NULL
  ,P_RF_UPLDATE IN DATE DEFAULT NULL
  ,P_RF_REF_NO IN VARCHAR2 DEFAULT NULL
  ,P_RF_REVNO IN VARCHAR2 DEFAULT NULL
  ,P_RF_REVDATE IN DATE DEFAULT NULL
  ,P_RF_FILENAME IN VARCHAR2 DEFAULT NULL
  ,P_RF_PATH IN NUMBER DEFAULT NULL
  ,P_RF_REFNOX IN VARCHAR2 DEFAULT NULL
  ,P_RF_CONTRACTOR IN VARCHAR2 DEFAULT NULL
  ,P_RF_ASSET IN NUMBER DEFAULT NULL
  ,P_RF_LLID IN VARCHAR2 DEFAULT NULL
  ,P_RF_UPDBY IN VARCHAR2 DEFAULT NULL
  ,P_RF_UPDDATE IN DATE DEFAULT NULL
  ,P_RF_NOTES IN VARCHAR2 DEFAULT NULL
  ,P_LNK_PROC IN VARCHAR2 DEFAULT NULL
  ,P_HDR_ID IN NUMBER DEFAULT NULL
) 
 RETURN NUMBER AS 
  V_SQL VARCHAR2(4000);
  V_OUPUT NUMBER;
  V_EVT_LOG NUMBER;
BEGIN
  UPDATE TBL_REFERENCE_FILES SET 
    RF_DESC=P_RF_DESC
    ,RF_TYPE=P_RF_TYPE
    ,RF_CLASS=P_RF_CLASS
    ,RF_UPLDATE=P_RF_UPLDATE
    ,RF_REF_NO=P_RF_REF_NO
    ,RF_REVNO=P_RF_REVNO
    ,RF_REVDATE=P_RF_REVDATE
    ,RF_FILENAME=P_RF_FILENAME
    ,RF_PATH=P_RF_PATH
    ,RF_REFNOX=P_RF_REFNOX
    ,RF_CONTRACTOR=P_RF_CONTRACTOR
    ,RF_ASSET=P_RF_ASSET
    ,RF_LLID=P_RF_LLID
    ,RF_UPDBY=P_RF_UPDBY
    ,RF_UPDDATE=P_RF_UPDDATE
    ,RF_NOTES=P_RF_NOTES
  WHERE RF_ID=P_RF_ID;

  IF (P_LNK_PROC IS NOT NULL) THEN
    EXECUTE IMMEDIATE 'INSERT INTO ' || P_LNK_PROC || ' (LNK_TAG_A,LNK_TAG_B) VALUES (' || P_RF_ID || ',' || P_HDR_ID || ')';
  END IF;

  COMMIT;

  V_EVT_LOG:=SP_INSERT_TBL_EVENT_LOG(P_RF_UPDBY,'TBL_REFERENCE_FILES','UPDATE SUCCESS: #' || P_RF_ID);

  RETURN P_RF_ID;
EXCEPTION
 WHEN OTHERS THEN
    ROLLBACK;
    V_EVT_LOG:=SP_INSERT_TBL_EVENT_LOG(P_RF_UPDBY,'TBL_REFERENCE_FILES','UPDATE FAIL: #' || P_RF_ID || '; ERR: ' || SQLCODE || '-' || SQLERRM);
    RETURN -1;
END SP_UPDATE_TBL_REFERENCE_FILES;

/
--------------------------------------------------------
--  DDL for Function SP_UPDATE_TBL_SURV_HDR
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE FUNCTION "IMSA"."SP_UPDATE_TBL_SURV_HDR" 
(
  P_SURV_HDR_ID IN NUMBER DEFAULT NULL
  , P_SURV_HDR_HOST_ID IN NUMBER DEFAULT NULL
  , P_SURV_HDR_NOTES IN VARCHAR2 DEFAULT NULL
  , P_SURV_HDR_DATE IN DATE DEFAULT NULL 
  , P_SURV_DTL_TIEBACK_IDS IN VARCHAR2 DEFAULT NULL
  , P_SURV_DTL_COMPLETED IN VARCHAR2 DEFAULT NULL
  , P_USER IN VARCHAR2 DEFAULT 'IMSA ADMIN'
)
  RETURN NUMBER AS 
  V_SURV_HDR_ID NUMBER:=P_SURV_HDR_ID;
  V_EVT_LOG NUMBER;
BEGIN
  UPDATE TBL_SURV_HDR SET 
  SURV_HDR_HOST_ID=P_SURV_HDR_HOST_ID,
  SURV_HDR_NOTES=P_SURV_HDR_NOTES, 
  SURV_HDR_DATE=P_SURV_HDR_DATE 
  WHERE SURV_HDR_ID=P_SURV_HDR_ID;

  DELETE FROM TBL_SURV_DTL WHERE SURV_DTL_HDR_ID=P_SURV_HDR_ID;

  V_SURV_HDR_ID:=SP_INSERT_TBL_SURV_DTL(P_SURV_HDR_ID,P_SURV_DTL_TIEBACK_IDS,P_SURV_DTL_COMPLETED);

  COMMIT;

  V_EVT_LOG:=SP_INSERT_TBL_EVENT_LOG(P_USER,'TBL_SURV_HDR','UPDATE SUCCESS: #' || V_SURV_HDR_ID);

  RETURN V_SURV_HDR_ID;
EXCEPTION
  WHEN OTHERS THEN
    ROLLBACK;
    V_EVT_LOG:=SP_INSERT_TBL_EVENT_LOG(P_USER,'TBL_SURV_HDR','UPDATE FAIL: #' || V_SURV_HDR_ID || '; ERR: ' || SQLCODE || '-' || SQLERRM);
    RETURN -1;
END SP_UPDATE_TBL_SURV_HDR;

/
--------------------------------------------------------
--  DDL for Function SP_UPDATE_TBL_SVY_HEADER
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE FUNCTION "IMSA"."SP_UPDATE_TBL_SVY_HEADER" 
(
  P_SVY_HDR_ID IN NUMBER DEFAULT NULL
  ,P_SVY_HDR_MAIN_ID IN NUMBER DEFAULT NULL
  ,P_SVY_HDR_EVT_ID IN NUMBER DEFAULT NULL
  ,P_SVY_HDR_EVT_NUM IN NUMBER DEFAULT NULL
  ,P_SVY_HDR_NOD_ID IN NUMBER DEFAULT NULL
  ,P_SVY_HDR_START_POS_ID IN NUMBER DEFAULT NULL
  ,P_SVY_HDR_END_POS_ID IN NUMBER DEFAULT NULL
  ,P_SVY_HDR_RECORDER IN VARCHAR2 DEFAULT NULL
  ,P_SVY_HDR_COMMENT IN VARCHAR2 DEFAULT NULL
  ,P_SVY_HDR_UPDATE_DATE IN DATE DEFAULT NULL
  ,P_SVY_HDR_UPDATE_BY IN VARCHAR2 DEFAULT NULL
  ,P_SVY_HDR_COLOUR IN NUMBER DEFAULT NULL
  ,P_SVY_HDR_ASS_DATE IN DATE DEFAULT NULL
  ,P_SVY_HDR_ASS_BY IN VARCHAR2 DEFAULT NULL
  ,P_SVY_HDR_ANOM_ID IN NUMBER DEFAULT NULL
  ,P_SVY_YESNO_A IN NUMBER DEFAULT NULL
  ,P_SVY_YESNO_B IN NUMBER DEFAULT NULL
  ,P_SVY_YESNO_C IN NUMBER DEFAULT NULL
  ,P_SVY_YESNO_D IN NUMBER DEFAULT NULL
  ,P_SVY_YESNO_E IN NUMBER DEFAULT NULL
  ,P_SVY_YESNO_F IN NUMBER DEFAULT NULL
  ,P_SVY_YESNO_G IN NUMBER DEFAULT NULL
  ,P_SVY_YESNO_H IN NUMBER DEFAULT NULL
  ,P_SVY_YESNO_I IN NUMBER DEFAULT NULL
  ,P_SVY_YESNO_J IN NUMBER DEFAULT NULL
  ,P_SVY_TEXT_A IN VARCHAR2 DEFAULT NULL
  ,P_SVY_TEXT_B IN VARCHAR2 DEFAULT NULL
  ,P_SVY_TEXT_C IN VARCHAR2 DEFAULT NULL
  ,P_SVY_TEXT_D IN VARCHAR2 DEFAULT NULL
  ,P_SVY_TEXT_E IN VARCHAR2 DEFAULT NULL
  ,P_SVY_TEXT_F IN VARCHAR2 DEFAULT NULL
  ,P_SVY_TEXT_G IN VARCHAR2 DEFAULT NULL
  ,P_SVY_TEXT_H IN VARCHAR2 DEFAULT NULL
  ,P_SVY_TEXT_I IN VARCHAR2 DEFAULT NULL
  ,P_SVY_TEXT_J IN VARCHAR2 DEFAULT NULL
  ,P_SVY_TEXT_K IN VARCHAR2 DEFAULT NULL
  ,P_SVY_TEXT_L IN VARCHAR2 DEFAULT NULL
  ,P_SVY_TEXT_M IN VARCHAR2 DEFAULT NULL
  ,P_SVY_TEXT_N IN VARCHAR2 DEFAULT NULL
  ,P_SVY_TEXT_O IN VARCHAR2 DEFAULT NULL
  ,P_SVY_TEXT_P IN VARCHAR2 DEFAULT NULL
  ,P_SVY_TEXT_Q IN VARCHAR2 DEFAULT NULL
  ,P_SVY_MEMO_A IN VARCHAR2 DEFAULT NULL
  ,P_SVY_MEMO_B IN VARCHAR2 DEFAULT NULL
  ,P_SVY_MEMO_C IN VARCHAR2 DEFAULT NULL
  ,P_SVY_MEMO_D IN VARCHAR2 DEFAULT NULL
  ,P_SVY_DATETIME_A IN DATE DEFAULT NULL
  ,P_SVY_DATETIME_B IN DATE DEFAULT NULL
  ,P_SVY_DATETIME_C IN DATE DEFAULT NULL
  ,P_SVY_DATETIME_D IN DATE DEFAULT NULL
  ,P_SVY_DATETIME_E IN DATE DEFAULT NULL
  ,P_SVY_DATETIME_F IN DATE DEFAULT NULL
  ,P_SVY_INTEGER_A IN NUMBER DEFAULT NULL
  ,P_SVY_INTEGER_B IN NUMBER DEFAULT NULL
  ,P_SVY_INTEGER_C IN NUMBER DEFAULT NULL
  ,P_SVY_INTEGER_D IN NUMBER DEFAULT NULL
  ,P_SVY_INTEGER_E IN NUMBER DEFAULT NULL
  ,P_SVY_INTEGER_F IN NUMBER DEFAULT NULL
  ,P_SVY_HDR_ASS_DETAILS IN VARCHAR2 DEFAULT NULL
  ,P_AB_HDR_ID IN NUMBER DEFAULT NULL
  ,P_SVY_HDR_PAR_ID IN NUMBER DEFAULT NULL
  ,P_SVY_HDR_ANOM_CODE IN VARCHAR2 DEFAULT NULL
  ,P_SVY_HDR_ANOM_COMMENT IN VARCHAR2 DEFAULT NULL
  ,P_SVY_SINGLE_F IN NUMBER DEFAULT NULL
  ,P_SVY_SINGLE_G IN NUMBER DEFAULT NULL
  ,P_SVY_SINGLE_H IN NUMBER DEFAULT NULL
  ,P_SVY_SINGLE_I IN NUMBER DEFAULT NULL
  ,P_SVY_SINGLE_J IN NUMBER DEFAULT NULL
  ,P_SVY_SINGLE_K IN NUMBER DEFAULT NULL
  ,P_SVY_SINGLE_L IN NUMBER DEFAULT NULL
  ,P_SVY_SINGLE_A IN NUMBER DEFAULT NULL
  ,P_SVY_SINGLE_B IN NUMBER DEFAULT NULL
  ,P_SVY_SINGLE_C IN NUMBER DEFAULT NULL
  ,P_SVY_SINGLE_D IN NUMBER DEFAULT NULL
  ,P_SVY_SINGLE_E IN NUMBER DEFAULT NULL
  ,P_SVY_SINGLE_M IN NUMBER DEFAULT NULL
  ,P_SVY_SINGLE_N IN NUMBER DEFAULT NULL
  --START POSITIONS DATA
  ,P_S_SVY_POS_DATE_TIME IN DATE DEFAULT NULL
  ,P_S_SVY_POS_KP IN NUMBER DEFAULT NULL
  ,P_S_SVY_POS_DEPTH IN NUMBER DEFAULT NULL
  ,P_S_SVY_POS_EASTING IN NUMBER DEFAULT NULL
  ,P_S_SVY_POS_NORTHING IN NUMBER DEFAULT NULL
  ,P_S_SVY_POS_VID_TAG IN NUMBER DEFAULT NULL
  ,P_S_SVY_POS_OFFSET IN NUMBER DEFAULT NULL
  ,P_S_SVY_POS_HEADING IN NUMBER DEFAULT NULL
  ,P_S_SVY_POS_PITCH IN NUMBER DEFAULT NULL
  ,P_S_SVY_POS_ROLL IN NUMBER DEFAULT NULL
  ,P_S_SVY_POS_ALTITUDE IN NUMBER DEFAULT NULL
  ,P_S_SVY_POS_TEMPERATURE IN NUMBER DEFAULT NULL
  ,P_S_SVY_POS_LONGITUDE IN NUMBER DEFAULT NULL
  ,P_S_SVY_POS_LATITUDE IN NUMBER DEFAULT NULL
  ,P_S_SVY_POS_XCOORD IN NUMBER DEFAULT NULL
  ,P_S_SVY_POS_YCOORD IN NUMBER DEFAULT NULL
  ,P_S_SVY_POS_ZCOORD IN NUMBER DEFAULT NULL
  ,P_S_SVY_POS_UPDATE_DATE IN DATE DEFAULT NULL
  ,P_S_SVY_POS_VIDEO_CTR  IN NUMBER DEFAULT NULL
  --END POSITIONS DATA
  ,P_E_SVY_POS_DATE_TIME IN DATE DEFAULT NULL
  ,P_E_SVY_POS_KP IN NUMBER DEFAULT NULL
  ,P_E_SVY_POS_DEPTH IN NUMBER DEFAULT NULL
  ,P_E_SVY_POS_EASTING IN NUMBER DEFAULT NULL
  ,P_E_SVY_POS_NORTHING IN NUMBER DEFAULT NULL
  ,P_E_SVY_POS_VID_TAG IN NUMBER DEFAULT NULL
  ,P_E_SVY_POS_OFFSET IN NUMBER DEFAULT NULL
  ,P_E_SVY_POS_HEADING IN NUMBER DEFAULT NULL
  ,P_E_SVY_POS_PITCH IN NUMBER DEFAULT NULL
  ,P_E_SVY_POS_ROLL IN NUMBER DEFAULT NULL
  ,P_E_SVY_POS_ALTITUDE IN NUMBER DEFAULT NULL
  ,P_E_SVY_POS_TEMPERATURE IN NUMBER DEFAULT NULL
  ,P_E_SVY_POS_LONGITUDE IN NUMBER DEFAULT NULL
  ,P_E_SVY_POS_LATITUDE IN NUMBER DEFAULT NULL
  ,P_E_SVY_POS_XCOORD IN NUMBER DEFAULT NULL
  ,P_E_SVY_POS_YCOORD IN NUMBER DEFAULT NULL
  ,P_E_SVY_POS_ZCOORD IN NUMBER DEFAULT NULL
  ,P_E_SVY_POS_UPDATE_DATE IN DATE DEFAULT NULL
  ,P_E_SVY_POS_VIDEO_CTR  IN NUMBER DEFAULT NULL
  
  ,P_DAT_TYPE IN NUMBER DEFAULT 1
  ,P_COLOR_MODE IN VARCHAR2 DEFAULT 'ACTION_COLOR'
)   
RETURN NUMBER AS 
  V_POS_EVT NUMBER;
  V_EVT_LOG NUMBER;
BEGIN

    --UPDATE SURVEY POSITIONS FIRST (START).
    V_POS_EVT:=SP_UPDATE_TBL_SVY_POSITION
      (
        P_SVY_HDR_START_POS_ID,P_S_SVY_POS_DATE_TIME,P_S_SVY_POS_KP,P_S_SVY_POS_DEPTH,P_S_SVY_POS_EASTING,P_S_SVY_POS_NORTHING,
        P_S_SVY_POS_VID_TAG,P_S_SVY_POS_OFFSET,P_S_SVY_POS_HEADING,P_S_SVY_POS_PITCH,P_S_SVY_POS_ROLL,P_S_SVY_POS_ALTITUDE,
        P_S_SVY_POS_TEMPERATURE,P_S_SVY_POS_LONGITUDE,P_S_SVY_POS_LATITUDE,P_S_SVY_POS_XCOORD,P_S_SVY_POS_YCOORD,P_S_SVY_POS_ZCOORD,
        P_S_SVY_POS_UPDATE_DATE,P_S_SVY_POS_VIDEO_CTR
      );

    IF (V_POS_EVT = -1) THEN --IF POSITION IS UNCESSFULL
      RETURN NULL; 
    END IF;

    --UPDATE SURVEY POSITIONS FIRST (END).
    V_POS_EVT:=SP_UPDATE_TBL_SVY_POSITION
      (
        P_SVY_HDR_END_POS_ID,P_E_SVY_POS_DATE_TIME,P_E_SVY_POS_KP,P_E_SVY_POS_DEPTH,P_E_SVY_POS_EASTING,P_E_SVY_POS_NORTHING,
        P_E_SVY_POS_VID_TAG,P_E_SVY_POS_OFFSET,P_E_SVY_POS_HEADING,P_E_SVY_POS_PITCH,P_E_SVY_POS_ROLL,P_E_SVY_POS_ALTITUDE,
        P_E_SVY_POS_TEMPERATURE,P_E_SVY_POS_LONGITUDE,P_E_SVY_POS_LATITUDE,P_E_SVY_POS_XCOORD,P_E_SVY_POS_YCOORD,P_E_SVY_POS_ZCOORD,
        P_E_SVY_POS_UPDATE_DATE,P_E_SVY_POS_VIDEO_CTR
      );

    IF (V_POS_EVT = -1) THEN --IF POSITION IS UNCESSFULL
      RETURN NULL; 
    END IF;

  UPDATE TBL_SVY_HEADER SET
    SVY_HDR_ID=P_SVY_HDR_ID,
    SVY_HDR_MAIN_ID=P_SVY_HDR_MAIN_ID,
    SVY_HDR_EVT_ID=P_SVY_HDR_EVT_ID,
    SVY_HDR_EVT_NUM=P_SVY_HDR_EVT_NUM,
    SVY_HDR_NOD_ID=P_SVY_HDR_NOD_ID,
    SVY_HDR_START_POS_ID=P_SVY_HDR_START_POS_ID,
    SVY_HDR_END_POS_ID=P_SVY_HDR_END_POS_ID,
    SVY_HDR_RECORDER=P_SVY_HDR_RECORDER,
    SVY_HDR_COMMENT=P_SVY_HDR_COMMENT,
    SVY_HDR_UPDATE_DATE=P_SVY_HDR_UPDATE_DATE,
    SVY_HDR_UPDATE_BY=P_SVY_HDR_UPDATE_BY,
    SVY_HDR_COLOUR=P_SVY_HDR_COLOUR,
    SVY_HDR_ASS_DATE=P_SVY_HDR_ASS_DATE,
    SVY_HDR_ASS_BY=P_SVY_HDR_ASS_BY,
    SVY_HDR_ANOM_ID=P_SVY_HDR_ANOM_ID,
    SVY_YESNO_A=P_SVY_YESNO_A,
    SVY_YESNO_B=P_SVY_YESNO_B,
    SVY_YESNO_C=P_SVY_YESNO_C,
    SVY_YESNO_D=P_SVY_YESNO_D,
    SVY_YESNO_E=P_SVY_YESNO_E,
    SVY_YESNO_F=P_SVY_YESNO_F,
    SVY_YESNO_G=P_SVY_YESNO_G,
    SVY_YESNO_H=P_SVY_YESNO_H,
    SVY_YESNO_I=P_SVY_YESNO_I,
    SVY_YESNO_J=P_SVY_YESNO_J,
    SVY_TEXT_A=P_SVY_TEXT_A,
    SVY_TEXT_B=P_SVY_TEXT_B,
    SVY_TEXT_C=P_SVY_TEXT_C,
    SVY_TEXT_D=P_SVY_TEXT_D,
    SVY_TEXT_E=P_SVY_TEXT_E,
    SVY_TEXT_F=P_SVY_TEXT_F,
    SVY_TEXT_G=P_SVY_TEXT_G,
    SVY_TEXT_H=P_SVY_TEXT_H,
    SVY_TEXT_I=P_SVY_TEXT_I,
    SVY_TEXT_J=P_SVY_TEXT_J,
    SVY_TEXT_K=P_SVY_TEXT_K,
    SVY_TEXT_L=P_SVY_TEXT_L,
    SVY_TEXT_M=P_SVY_TEXT_M,
    SVY_TEXT_N=P_SVY_TEXT_N,
    SVY_TEXT_O=P_SVY_TEXT_O,
    SVY_TEXT_P=P_SVY_TEXT_P,
    SVY_TEXT_Q=P_SVY_TEXT_Q,
    SVY_MEMO_A=P_SVY_MEMO_A,
    SVY_MEMO_B=P_SVY_MEMO_B,
    SVY_MEMO_C=P_SVY_MEMO_C,
    SVY_MEMO_D=P_SVY_MEMO_D,
    SVY_DATETIME_A=P_SVY_DATETIME_A,
    SVY_DATETIME_B=P_SVY_DATETIME_B,
    SVY_DATETIME_C=P_SVY_DATETIME_C,
    SVY_DATETIME_D=P_SVY_DATETIME_D,
    SVY_DATETIME_E=P_SVY_DATETIME_E,
    SVY_DATETIME_F=P_SVY_DATETIME_F,
    SVY_INTEGER_A=P_SVY_INTEGER_A,
    SVY_INTEGER_B=P_SVY_INTEGER_B,
    SVY_INTEGER_C=P_SVY_INTEGER_C,
    SVY_INTEGER_D=P_SVY_INTEGER_D,
    SVY_INTEGER_E=P_SVY_INTEGER_E,
    SVY_INTEGER_F=P_SVY_INTEGER_F,
    SVY_HDR_ASS_DETAILS=P_SVY_HDR_ASS_DETAILS,
    AB_HDR_ID=P_AB_HDR_ID,
    SVY_HDR_PAR_ID=P_SVY_HDR_PAR_ID,
    SVY_HDR_ANOM_CODE=P_SVY_HDR_ANOM_CODE,
    SVY_HDR_ANOM_COMMENT=P_SVY_HDR_ANOM_COMMENT,
    SVY_SINGLE_F=P_SVY_SINGLE_F,
    SVY_SINGLE_G=P_SVY_SINGLE_G,
    SVY_SINGLE_H=P_SVY_SINGLE_H,
    SVY_SINGLE_I=P_SVY_SINGLE_I,
    SVY_SINGLE_J=P_SVY_SINGLE_J,
    SVY_SINGLE_K=P_SVY_SINGLE_K,
    SVY_SINGLE_L=P_SVY_SINGLE_L,
    SVY_SINGLE_A=P_SVY_SINGLE_A,
    SVY_SINGLE_B=P_SVY_SINGLE_B,
    SVY_SINGLE_C=P_SVY_SINGLE_C,
    SVY_SINGLE_D=P_SVY_SINGLE_D,
    SVY_SINGLE_E=P_SVY_SINGLE_E, 
    SVY_SINGLE_M=P_SVY_SINGLE_M,
    SVY_SINGLE_N=P_SVY_SINGLE_N 
  WHERE SVY_HDR_ID=P_SVY_HDR_ID;

  COMMIT;

  V_EVT_LOG:=SP_INSERT_TBL_EVENT_LOG(P_SVY_HDR_UPDATE_BY,'TBL_SVY_HEADER','UPDATE SUCCESS: #' || P_SVY_HDR_ID);
  RETURN P_SVY_HDR_ID;
EXCEPTION
  WHEN OTHERS THEN
    ROLLBACK;
    V_EVT_LOG:=SP_INSERT_TBL_EVENT_LOG(P_SVY_HDR_UPDATE_BY,'TBL_SVY_HEADER','UPDATE FAIL: #' || P_SVY_HDR_ID || '; ERR: ' || SQLCODE || '-' || SQLERRM);
    RETURN -1;
END SP_UPDATE_TBL_SVY_HEADER;

/
--------------------------------------------------------
--  DDL for Function SP_UPDATE_TBL_SVY_POSITION
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE FUNCTION "IMSA"."SP_UPDATE_TBL_SVY_POSITION" 
(
  P_SVY_POS_ID IN NUMBER DEFAULT -1,
  P_SVY_POS_DATE_TIME IN DATE DEFAULT NULL,
  P_SVY_POS_KP IN NUMBER DEFAULT NULL,
  P_SVY_POS_DEPTH IN NUMBER DEFAULT NULL,
  P_SVY_POS_EASTING IN NUMBER DEFAULT NULL,
  P_SVY_POS_NORTHING IN NUMBER DEFAULT NULL,
  P_SVY_POS_VID_TAG IN NUMBER DEFAULT NULL,
  P_SVY_POS_OFFSET IN NUMBER DEFAULT NULL,
  P_SVY_POS_HEADING IN NUMBER DEFAULT NULL,
  P_SVY_POS_PITCH IN NUMBER DEFAULT NULL,
  P_SVY_POS_ROLL IN NUMBER DEFAULT NULL,
  P_SVY_POS_ALTITUDE IN NUMBER DEFAULT NULL,
  P_SVY_POS_TEMPERATURE IN NUMBER DEFAULT NULL,
  P_SVY_POS_LONGITUDE IN NUMBER DEFAULT NULL,
  P_SVY_POS_LATITUDE IN NUMBER DEFAULT NULL,
  P_SVY_POS_XCOORD IN NUMBER DEFAULT NULL,
  P_SVY_POS_YCOORD IN NUMBER DEFAULT NULL,
  P_SVY_POS_ZCOORD IN NUMBER DEFAULT NULL,
  P_SVY_POS_UPDATE_DATE IN DATE DEFAULT NULL,
  P_SVY_POS_VIDEO_CTR  IN NUMBER DEFAULT NULL
)
  RETURN NUMBER AS 
  V_EVT_LOG NUMBER;
BEGIN
  UPDATE TBL_SVY_POSITION SET 
    SVY_POS_DATE_TIME=P_SVY_POS_DATE_TIME,
    SVY_POS_KP=P_SVY_POS_KP,
    SVY_POS_DEPTH=P_SVY_POS_DEPTH,
    SVY_POS_EASTING=P_SVY_POS_EASTING,
    SVY_POS_NORTHING=P_SVY_POS_NORTHING,
    SVY_POS_VID_TAG=P_SVY_POS_VID_TAG,
    SVY_POS_OFFSET=P_SVY_POS_OFFSET,
    SVY_POS_HEADING=P_SVY_POS_HEADING,
    SVY_POS_PITCH=P_SVY_POS_PITCH,
    SVY_POS_ROLL=P_SVY_POS_ROLL,
    SVY_POS_ALTITUDE=P_SVY_POS_ALTITUDE,
    SVY_POS_TEMPERATURE=P_SVY_POS_TEMPERATURE,
    SVY_POS_LONGITUDE=P_SVY_POS_LONGITUDE,
    SVY_POS_LATITUDE=P_SVY_POS_LATITUDE,
    SVY_POS_XCOORD=P_SVY_POS_XCOORD,
    SVY_POS_YCOORD=P_SVY_POS_YCOORD,
    SVY_POS_ZCOORD=P_SVY_POS_ZCOORD,
    SVY_POS_UPDATE_DATE=P_SVY_POS_UPDATE_DATE,
    SVY_POS_VIDEO_CTR=P_SVY_POS_VIDEO_CTR
  WHERE SVY_POS_ID=P_SVY_POS_ID;

  RETURN P_SVY_POS_ID;
EXCEPTION
  WHEN OTHERS THEN
    RETURN -1;
END SP_UPDATE_TBL_SVY_POSITION;

/
--------------------------------------------------------
--  DDL for Function SP_UPDATE_TBL_USER_COMMENTS
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE FUNCTION "IMSA"."SP_UPDATE_TBL_USER_COMMENTS" 
(
  P_UC_ID IN NUMBER DEFAULT NULL
, P_UC_RAISED_BY IN VARCHAR2 DEFAULT NULL  
, P_UC_DATE_STAMP IN DATE DEFAULT NULL 
, P_UC_COMPANY IN VARCHAR2 DEFAULT NULL
, P_UC_NOTES IN VARCHAR2 DEFAULT NULL
, P_UC_RESPONSE IN VARCHAR2 DEFAULT NULL
, P_UC_STATUS IN NUMBER DEFAULT NULL
, P_UC_CLASSIFICATION IN NUMBER DEFAULT NULL
, P_UC_PRIORITY IN NUMBER DEFAULT NULL
) RETURN NUMBER AS 
BEGIN
  UPDATE TBL_USER_COMMENTS 
  SET UC_RAISED_BY = P_UC_RAISED_BY
  , UC_DATE_STAMP = P_UC_DATE_STAMP
  , UC_COMPANY = P_UC_COMPANY
  , UC_NOTES = P_UC_NOTES
  , UC_RESPONSE = P_UC_RESPONSE
  , UC_STATUS = P_UC_STATUS
  , UC_CLASSIFICATION = P_UC_CLASSIFICATION
  , UC_PRIORITY = P_UC_PRIORITY
  WHERE UC_ID = P_UC_ID;

  COMMIT;
  RETURN P_UC_ID;
EXCEPTION
  WHEN OTHERS THEN
    ROLLBACK;
    RETURN -1;
END SP_UPDATE_TBL_USER_COMMENTS;

/
